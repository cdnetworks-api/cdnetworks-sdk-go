package securitypolicy

// This file is auto-generated, don't edit it. Thanks.
import (
	"github.com/alibabacloud-go/tea/tea"
)

type DeleteBuiltInRuleRequest struct {
	// {'en':'Template id', 'zh_CN':'模板id'}
	Id *int `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteBuiltInRuleRequest) SetId(v int) *DeleteBuiltInRuleRequest {
	s.Id = &v
	return s
}

type DeleteBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s DeleteBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteBuiltInRuleResponse) SetCode(v string) *DeleteBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteBuiltInRuleResponse) SetMessage(v string) *DeleteBuiltInRuleResponse {
	s.Message = &v
	return s
}

type DeleteBuiltInRulePaths struct {
}

func (s DeleteBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRulePaths) GoString() string {
	return s.String()
}

type DeleteBuiltInRuleParameters struct {
}

func (s DeleteBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRuleParameters) GoString() string {
	return s.String()
}

type DeleteBuiltInRuleRequestHeader struct {
}

func (s DeleteBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type DeleteBuiltInRuleResponseHeader struct {
}

func (s DeleteBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type ListIPBlockSettingsRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s ListIPBlockSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsRequest) GoString() string {
	return s.String()
}

func (s *ListIPBlockSettingsRequest) SetDomainList(v []*string) *ListIPBlockSettingsRequest {
	s.DomainList = v
	return s
}

type ListIPBlockSettingsRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListIPBlockSettingsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListIPBlockSettingsRequestHeader) SetServiceType(v string) *ListIPBlockSettingsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListIPBlockSettingsPaths struct {
}

func (s ListIPBlockSettingsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsPaths) GoString() string {
	return s.String()
}

type ListIPBlockSettingsParameters struct {
}

func (s ListIPBlockSettingsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsParameters) GoString() string {
	return s.String()
}

type ListIPBlockSettingsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListIPBlockSettingsResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListIPBlockSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsResponse) GoString() string {
	return s.String()
}

func (s *ListIPBlockSettingsResponse) SetCode(v string) *ListIPBlockSettingsResponse {
	s.Code = &v
	return s
}

func (s *ListIPBlockSettingsResponse) SetMsg(v string) *ListIPBlockSettingsResponse {
	s.Msg = &v
	return s
}

func (s *ListIPBlockSettingsResponse) SetData(v []*ListIPBlockSettingsResponseData) *ListIPBlockSettingsResponse {
	s.Data = v
	return s
}

type ListIPBlockSettingsResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"The blocked IP/CIDR.","zh_CN":"已拦截的IP/IP段。"}
	BlockConditions []*string `json:"blockConditions,omitempty" xml:"blockConditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListIPBlockSettingsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsResponseData) GoString() string {
	return s.String()
}

func (s *ListIPBlockSettingsResponseData) SetDomain(v string) *ListIPBlockSettingsResponseData {
	s.Domain = &v
	return s
}

func (s *ListIPBlockSettingsResponseData) SetBlockConditions(v []*string) *ListIPBlockSettingsResponseData {
	s.BlockConditions = v
	return s
}

type ListIPBlockSettingsResponseHeader struct {
}

func (s ListIPBlockSettingsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListIPBlockSettingsResponseHeader) GoString() string {
	return s.String()
}

type GetPreDeployResultRequest struct {
}

func (s GetPreDeployResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultRequest) GoString() string {
	return s.String()
}

type GetPreDeployResultRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetPreDeployResultRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultRequestHeader) GoString() string {
	return s.String()
}

func (s *GetPreDeployResultRequestHeader) SetServiceType(v string) *GetPreDeployResultRequestHeader {
	s.ServiceType = &v
	return s
}

type GetPreDeployResultPaths struct {
}

func (s GetPreDeployResultPaths) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultPaths) GoString() string {
	return s.String()
}

type GetPreDeployResultParameters struct {
	// {"en":"Pre-deployment id.","zh_CN":"预部署id。"}
	PreId *string `json:"preId,omitempty" xml:"preId,omitempty" require:"true"`
}

func (s GetPreDeployResultParameters) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultParameters) GoString() string {
	return s.String()
}

func (s *GetPreDeployResultParameters) SetPreId(v string) *GetPreDeployResultParameters {
	s.PreId = &v
	return s
}

type GetPreDeployResultResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *GetPreDeployResultResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetPreDeployResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultResponse) GoString() string {
	return s.String()
}

func (s *GetPreDeployResultResponse) SetCode(v string) *GetPreDeployResultResponse {
	s.Code = &v
	return s
}

func (s *GetPreDeployResultResponse) SetMsg(v string) *GetPreDeployResultResponse {
	s.Msg = &v
	return s
}

func (s *GetPreDeployResultResponse) SetData(v *GetPreDeployResultResponseData) *GetPreDeployResultResponse {
	s.Data = v
	return s
}

type GetPreDeployResultResponseData struct {
	// {"en":"Deployment results.\nDEPLOYING: Deployment in progress.\nSUCCESS: Deployment successful.\nFAIL: Deployment failed.","zh_CN":"部署结果。\nDEPLOYING：部署中。\nSUCCESS：部署成功。\nFAIL：部署失败。","exampleValue":"DEPLOYING,SUCCESS,FAIL"}
	DeployStatus *string `json:"deployStatus,omitempty" xml:"deployStatus,omitempty" require:"true"`
	// {"en":"Host list.","zh_CN":"Host 列表。"}
	HostList []*GetPreDeployResultResponseDataHostList `json:"hostList,omitempty" xml:"hostList,omitempty" require:"true" type:"Repeated"`
}

func (s GetPreDeployResultResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultResponseData) GoString() string {
	return s.String()
}

func (s *GetPreDeployResultResponseData) SetDeployStatus(v string) *GetPreDeployResultResponseData {
	s.DeployStatus = &v
	return s
}

func (s *GetPreDeployResultResponseData) SetHostList(v []*GetPreDeployResultResponseDataHostList) *GetPreDeployResultResponseData {
	s.HostList = v
	return s
}

type GetPreDeployResultResponseDataHostList struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	HostName *string `json:"hostName,omitempty" xml:"hostName,omitempty" require:"true"`
	// {"en":"IP address.","zh_CN":"IP地址。"}
	HostAddress *string `json:"hostAddress,omitempty" xml:"hostAddress,omitempty" require:"true"`
}

func (s GetPreDeployResultResponseDataHostList) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultResponseDataHostList) GoString() string {
	return s.String()
}

func (s *GetPreDeployResultResponseDataHostList) SetHostName(v string) *GetPreDeployResultResponseDataHostList {
	s.HostName = &v
	return s
}

func (s *GetPreDeployResultResponseDataHostList) SetHostAddress(v string) *GetPreDeployResultResponseDataHostList {
	s.HostAddress = &v
	return s
}

type GetPreDeployResultResponseHeader struct {
}

func (s GetPreDeployResultResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetPreDeployResultResponseHeader) GoString() string {
	return s.String()
}

type UsingSystemRecommendedAccessDomainRequest struct {
	// {"en":"WAF.","zh_CN":"WAF。"}
	WafDefendConfig *UsingSystemRecommendedAccessDomainRequestWafDefendConfig `json:"wafDefendConfig,omitempty" xml:"wafDefendConfig,omitempty" type:"Struct"`
	// {"en":"Custom rules.","zh_CN":"自定义规则。"}
	CustomizeRuleConfig *UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig `json:"customizeRuleConfig,omitempty" xml:"customizeRuleConfig,omitempty" type:"Struct"`
	// {"en":"API security.","zh_CN":"API安全。"}
	ApiDefendConfig *UsingSystemRecommendedAccessDomainRequestApiDefendConfig `json:"apiDefendConfig,omitempty" xml:"apiDefendConfig,omitempty" type:"Struct"`
	// {"en":"Whitelist.","zh_CN":"白名单。"}
	WhitelistConfig *UsingSystemRecommendedAccessDomainRequestWhitelistConfig `json:"whitelistConfig,omitempty" xml:"whitelistConfig,omitempty" type:"Struct"`
	// {"en":"Target domains (maximum 100 allowed).","zh_CN":"目标域名，最多100个域名。"}
	TargetDomains []*string `json:"targetDomains,omitempty" xml:"targetDomains,omitempty" require:"true" type:"Repeated"`
	// {"en":"IP/Geo blocking.","zh_CN":"IP/区域封禁。"}
	BlockConfig *UsingSystemRecommendedAccessDomainRequestBlockConfig `json:"blockConfig,omitempty" xml:"blockConfig,omitempty" type:"Struct"`
	// {"en":"DDoS protection.","zh_CN":"DDoS防护。"}
	DmsDefendConfig *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig `json:"dmsDefendConfig,omitempty" xml:"dmsDefendConfig,omitempty" type:"Struct"`
	// {"en":"Threat intelligence.","zh_CN":"威胁情报。"}
	IntelligenceConfig *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig `json:"intelligenceConfig,omitempty" xml:"intelligenceConfig,omitempty" type:"Struct"`
	// {"en":"Bot management.","zh_CN":"Bot管理。"}
	BotManageConfig *UsingSystemRecommendedAccessDomainRequestBotManageConfig `json:"botManageConfig,omitempty" xml:"botManageConfig,omitempty" type:"Struct"`
	// {"en":"Rate limiting.","zh_CN":"频率限制。"}
	RateLimitConfig *UsingSystemRecommendedAccessDomainRequestRateLimitConfig `json:"rateLimitConfig,omitempty" xml:"rateLimitConfig,omitempty" type:"Struct"`
}

func (s UsingSystemRecommendedAccessDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequest) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetWafDefendConfig(v *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.WafDefendConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetCustomizeRuleConfig(v *UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.CustomizeRuleConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetApiDefendConfig(v *UsingSystemRecommendedAccessDomainRequestApiDefendConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.ApiDefendConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetWhitelistConfig(v *UsingSystemRecommendedAccessDomainRequestWhitelistConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.WhitelistConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetTargetDomains(v []*string) *UsingSystemRecommendedAccessDomainRequest {
	s.TargetDomains = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetBlockConfig(v *UsingSystemRecommendedAccessDomainRequestBlockConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.BlockConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetDmsDefendConfig(v *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.DmsDefendConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetIntelligenceConfig(v *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.IntelligenceConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetBotManageConfig(v *UsingSystemRecommendedAccessDomainRequestBotManageConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.BotManageConfig = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequest) SetRateLimitConfig(v *UsingSystemRecommendedAccessDomainRequestRateLimitConfig) *UsingSystemRecommendedAccessDomainRequest {
	s.RateLimitConfig = v
	return s
}

type UsingSystemRecommendedAccessDomainRequestWafDefendConfig struct {
	// {"en":"Ruleset pattern.\nMANUAL: Manual\nAUTO: Automatic","zh_CN":"规则集模式。\nMANUAL：手动\nAUTO：自动","exampleValue":"MANUAL,AUTO"}
	RuleUpdateMode *string `json:"ruleUpdateMode,omitempty" xml:"ruleUpdateMode,omitempty" require:"true"`
	// {"en":"WAF protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"WAF防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
	// {"en":"WAF protection Mode.\nBLOCK: Interception\nLOG: Observation","zh_CN":"WAF防护模式。\nBLOCK：拦截\nLOG：观察","exampleValue":"LOG,BLOCK"}
	DefendMode *string `json:"defendMode,omitempty" xml:"defendMode,omitempty" require:"true"`
	// {"en":"Scanning tool detection action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"扫描工具检测处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	ScanToolsAction *string `json:"scanToolsAction,omitempty" xml:"scanToolsAction,omitempty" require:"true"`
	// {"en":"Repeated violation detection action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"反复违规检测处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	RepeatedViolationAction *string `json:"repeatedViolationAction,omitempty" xml:"repeatedViolationAction,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestWafDefendConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestWafDefendConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) SetRuleUpdateMode(v string) *UsingSystemRecommendedAccessDomainRequestWafDefendConfig {
	s.RuleUpdateMode = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestWafDefendConfig {
	s.ConfigSwitch = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) SetDefendMode(v string) *UsingSystemRecommendedAccessDomainRequestWafDefendConfig {
	s.DefendMode = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) SetScanToolsAction(v string) *UsingSystemRecommendedAccessDomainRequestWafDefendConfig {
	s.ScanToolsAction = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestWafDefendConfig) SetRepeatedViolationAction(v string) *UsingSystemRecommendedAccessDomainRequestWafDefendConfig {
	s.RepeatedViolationAction = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig struct {
	// {"en":"Custom rules switch.\nON: Enabled\nOFF: Disabel","zh_CN":"自定义规则开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestCustomizeRuleConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestApiDefendConfig struct {
	// {"en":"API security switch.\nON: Enabled\nOFF: Disabled","zh_CN":"API安全开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestApiDefendConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestApiDefendConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestApiDefendConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestApiDefendConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestWhitelistConfig struct {
	// {"en":"Whitelist switch.\nON: Enabled\nOFF: Disabled","zh_CN":"白名单开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestWhitelistConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestWhitelistConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestWhitelistConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestWhitelistConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestBlockConfig struct {
	// {"en":"IP/Geo switch.\nON: Enabled\nOFF: Disabled","zh_CN":"IP/区域封禁开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestBlockConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestBlockConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestBlockConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestBlockConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestDmsDefendConfig struct {
	// {"en":"DDoS protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"DDoS防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
	// {"en":"Protection mode, loose: 'LOOSE', moderate: 'MODERATE',strict: 'STRICT'","zh_CN":"防护模式, 宽松: 'LOOSE', 适中: 'MODERATE',严格: 'STRICT'","exampleValue":"LOOSE,MODERATE,STRICT"}
	ProtectionMode *string `json:"protectionMode,omitempty" xml:"protectionMode,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestDmsDefendConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestDmsDefendConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig {
	s.ConfigSwitch = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig) SetProtectionMode(v string) *UsingSystemRecommendedAccessDomainRequestDmsDefendConfig {
	s.ProtectionMode = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestIntelligenceConfig struct {
	// {"en":"Attack risk type action.","zh_CN":"攻击风险类型处理动作。"}
	InfoCateAct *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct `json:"infoCateAct,omitempty" xml:"infoCateAct,omitempty" require:"true" type:"Struct"`
	// {"en":"Threat intelligence switch.\nON: Enabled\nOFF: Disabled","zh_CN":"威胁情报开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestIntelligenceConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestIntelligenceConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig) SetInfoCateAct(v *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig {
	s.InfoCateAct = v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestIntelligenceConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct struct {
	// {"en":"Attack resource risk action.\nNO_USE: Not used\nBLOCK: Deny\nLOG: Log","zh_CN":"攻击资源风险处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控","exampleValue":"NO_USE,LOG,BLOCK"}
	AttackSource *string `json:"attackSource,omitempty" xml:"attackSource,omitempty" require:"true"`
	// {"en":"Specific attack risk action.\nNO_USE: Not used\nBLOCK: Deny\nLOG:Log","zh_CN":"特定攻击风险处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控","exampleValue":"NO_USE,LOG,BLOCK"}
	SpecAttack *string `json:"specAttack,omitempty" xml:"specAttack,omitempty" require:"true"`
	// {"en":"Industry attack risk action.\nNO_USE: Not used\nBLOCK: Deny\nLOG: Log","zh_CN":"重点行业风险处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控","exampleValue":"NO_USE,LOG,BLOCK"}
	Industry *string `json:"industry,omitempty" xml:"industry,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) SetAttackSource(v string) *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct {
	s.AttackSource = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) SetSpecAttack(v string) *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct {
	s.SpecAttack = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct) SetIndustry(v string) *UsingSystemRecommendedAccessDomainRequestIntelligenceConfigInfoCateAct {
	s.Industry = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestBotManageConfig struct {
	// {"en":"Known Bots action.\nNO_USE: not used\nBLOCK: Deny\nLOG: Log\nACCEPT: Skip","zh_CN":"已知Bots处理动作。NO_USE：不使用BLOCK：拦截LOG：监控ACCEPT：放行","exampleValue":"NO_USE,LOG,BLOCK,ACCEPT"}
	PublicBotsAct *string `json:"publicBotsAct,omitempty" xml:"publicBotsAct,omitempty" require:"true"`
	// {"en":"Bot management switch.\nON:Enabled\nOFF:Disabled","zh_CN":"Bot管理开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
	// {"en":"User-Agent Based Detection action.\nNO_USE: Not used\nBLOCK: Deny\nLOG: Log\nACCEPT: Skip","zh_CN":"UA特征检测处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控\nACCEPT：放行","exampleValue":"NO_USE,LOG,BLOCK,ACCEPT"}
	UaBotsAct *string `json:"uaBotsAct,omitempty" xml:"uaBotsAct,omitempty" require:"true"`
	// {"en":"Browser Bot defense.","zh_CN":"Web风险检测。"}
	WebRiskConfig *UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig `json:"webRiskConfig,omitempty" xml:"webRiskConfig,omitempty" require:"true" type:"Struct"`
}

func (s UsingSystemRecommendedAccessDomainRequestBotManageConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestBotManageConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestBotManageConfig) SetPublicBotsAct(v string) *UsingSystemRecommendedAccessDomainRequestBotManageConfig {
	s.PublicBotsAct = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestBotManageConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestBotManageConfig {
	s.ConfigSwitch = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestBotManageConfig) SetUaBotsAct(v string) *UsingSystemRecommendedAccessDomainRequestBotManageConfig {
	s.UaBotsAct = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainRequestBotManageConfig) SetWebRiskConfig(v *UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig) *UsingSystemRecommendedAccessDomainRequestBotManageConfig {
	s.WebRiskConfig = v
	return s
}

type UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig struct {
	// {"en":"Action.\nNO_USE: Not used\nBLOCK: Deny\nLOG: Log","zh_CN":"处理动作。\nNO_USE:不使用\nBLOCK:拦截\nLOG:监控","exampleValue":"NO_USE,LOG,BLOCK"}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig) SetAct(v string) *UsingSystemRecommendedAccessDomainRequestBotManageConfigWebRiskConfig {
	s.Act = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestRateLimitConfig struct {
	// {"en":"Rate limiting switch.\nON: Enabled\nOFF: Disabled","zh_CN":"频率限制开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ConfigSwitch *string `json:"configSwitch,omitempty" xml:"configSwitch,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainRequestRateLimitConfig) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestRateLimitConfig) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestRateLimitConfig) SetConfigSwitch(v string) *UsingSystemRecommendedAccessDomainRequestRateLimitConfig {
	s.ConfigSwitch = &v
	return s
}

type UsingSystemRecommendedAccessDomainRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UsingSystemRecommendedAccessDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainRequestHeader) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainRequestHeader) SetServiceType(v string) *UsingSystemRecommendedAccessDomainRequestHeader {
	s.ServiceType = &v
	return s
}

type UsingSystemRecommendedAccessDomainPaths struct {
}

func (s UsingSystemRecommendedAccessDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainPaths) GoString() string {
	return s.String()
}

type UsingSystemRecommendedAccessDomainParameters struct {
}

func (s UsingSystemRecommendedAccessDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainParameters) GoString() string {
	return s.String()
}

type UsingSystemRecommendedAccessDomainResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UsingSystemRecommendedAccessDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainResponse) GoString() string {
	return s.String()
}

func (s *UsingSystemRecommendedAccessDomainResponse) SetCode(v string) *UsingSystemRecommendedAccessDomainResponse {
	s.Code = &v
	return s
}

func (s *UsingSystemRecommendedAccessDomainResponse) SetMsg(v string) *UsingSystemRecommendedAccessDomainResponse {
	s.Msg = &v
	return s
}

type UsingSystemRecommendedAccessDomainResponseHeader struct {
}

func (s UsingSystemRecommendedAccessDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UsingSystemRecommendedAccessDomainResponseHeader) GoString() string {
	return s.String()
}

type EditAndActiveApiRequest struct {
	// {"en":"API ID", "zh_CN":"api ID"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty" require:"true"`
	// {"en":"Case sensitive,default value:0.
	// 0:False
	// 1:True", "zh_CN":"大小写敏感，默认值：0。
	//  0：否
	// 1：是"}
	ApiCase *int `json:"apiCase,omitempty" xml:"apiCase,omitempty"`
	// {"en":"API group.", "zh_CN":"API分组。"}
	ApiGroup *string `json:"apiGroup,omitempty" xml:"apiGroup,omitempty" require:"true"`
	// {"en":"API name.", "zh_CN":"API名称。"}
	ApiName *string `json:"apiName,omitempty" xml:"apiName,omitempty" require:"true"`
	// {"en":"API privacy,default value:PUBLIC.
	// PUBLIC:Public,the consumer does not need to associate with the API, and can access the public API assets only by passing the authentication.
	// PRIVATE:Private,you need to create a consumer and associate with the API to access private API assets.", "zh_CN":"API隐私，默认值：PUBLIC。
	// PUBLIC：公开，消费方无需绑定API，仅鉴权通过即可访问公开API资产。
	// PRIVATE：私有，需要创建消费方并绑定API，方可访问私有API资产。"}
	ApiConceal *string `json:"apiConceal,omitempty" xml:"apiConceal,omitempty"`
	// {"en":"API type,default value:NORMAL.
	// NORMAL:Normal API,the path does not contain query string parameters,such as http://www.test.com/api.
	// WHEN_CASE:When case,the path contains query string parameters,such as http://www.test.com/api?action=1 and http://www.test.com/api?action=2 are two different APIs.", "zh_CN":"API类型，默认值：NORMAL。
	// NORMAL：普通接口，路径中不包含query string参数的普通接口，如http://www.test.com/api。
	// WHEN_CASE：when_case接口，路径中包含query string参数，如http://www.test.com/api?action=1与http://www.test.com/api?action=2 是两个不同的接口。"}
	ApiType *string `json:"apiType,omitempty" xml:"apiType,omitempty" require:"true"`
	// {"en":"Authentication configuration.", "zh_CN":"鉴权配置。"}
	EditAndActiveApiAuthConfig *EditAndActiveApiAuthConfig `json:"authConfig,omitempty" xml:"authConfig,omitempty"`
	// {"en":"Authentication key.", "zh_CN":"鉴权秘钥。"}
	AuthKey *string `json:"authKey,omitempty" xml:"authKey,omitempty"`
	// {"en":"Domain,multiple use \";\" split.", "zh_CN":"所属域名，多个用;隔开。"}
	Domains *string `json:"domains,omitempty" xml:"domains,omitempty" require:"true"`
	// {"en":"Endpoint path.", "zh_CN":"前端路径。"}
	FrontPath *string `json:"frontPath,omitempty" xml:"frontPath,omitempty" require:"true"`
	// {"en":"Path matching type,default value:DICT.
	// DICT:Complete matching
	//  REGEX:Regular matching", "zh_CN":"路径匹配类型，默认值：DICT。
	// DICT：完整匹配
	//  REGEX：正则匹配"}
	PathMatchType *string `json:"pathMatchType,omitempty" xml:"pathMatchType,omitempty" require:"true"`
	// {"en":"Match parameters in the path,default value:0.
	// 0:False
	// 1:True
	// ", "zh_CN":"前端路径类型，默认值：0。
	//  0：否
	// 1：是
	// "}
	FrontPathType *int `json:"frontPathType,omitempty" xml:"frontPathType,omitempty" require:"true"`
	// {"en":"Parameter limit configuration.", "zh_CN":"参数限制配置。"}
	EditAndActiveApiParamsLimitConfig []*EditAndActiveApiParamsLimitConfig `json:"paramsLimitConfig,omitempty" xml:"paramsLimitConfig,omitempty" type:"Repeated"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"Request body limit configuration.", "zh_CN":"请求Body配置。"}
	EditAndActiveApiRequestBodyConfig *EditAndActiveApiRequestBodyConfig `json:"requestBodyConfig,omitempty" xml:"requestBodyConfig,omitempty" require:"true"`
	// {"en":"Request Methods,multiple use \";\" split,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，多个用;隔开，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true"`
}

func (s EditAndActiveApiRequest) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiRequest) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiRequest) SetApiId(v string) *EditAndActiveApiRequest {
	s.ApiId = &v
	return s
}

func (s *EditAndActiveApiRequest) SetApiCase(v int) *EditAndActiveApiRequest {
	s.ApiCase = &v
	return s
}

func (s *EditAndActiveApiRequest) SetApiGroup(v string) *EditAndActiveApiRequest {
	s.ApiGroup = &v
	return s
}

func (s *EditAndActiveApiRequest) SetApiName(v string) *EditAndActiveApiRequest {
	s.ApiName = &v
	return s
}

func (s *EditAndActiveApiRequest) SetApiConceal(v string) *EditAndActiveApiRequest {
	s.ApiConceal = &v
	return s
}

func (s *EditAndActiveApiRequest) SetApiType(v string) *EditAndActiveApiRequest {
	s.ApiType = &v
	return s
}

func (s *EditAndActiveApiRequest) SetAuthConfig(v *EditAndActiveApiAuthConfig) *EditAndActiveApiRequest {
	s.EditAndActiveApiAuthConfig = v
	return s
}

func (s *EditAndActiveApiRequest) SetAuthKey(v string) *EditAndActiveApiRequest {
	s.AuthKey = &v
	return s
}

func (s *EditAndActiveApiRequest) SetDomains(v string) *EditAndActiveApiRequest {
	s.Domains = &v
	return s
}

func (s *EditAndActiveApiRequest) SetFrontPath(v string) *EditAndActiveApiRequest {
	s.FrontPath = &v
	return s
}

func (s *EditAndActiveApiRequest) SetPathMatchType(v string) *EditAndActiveApiRequest {
	s.PathMatchType = &v
	return s
}

func (s *EditAndActiveApiRequest) SetFrontPathType(v int) *EditAndActiveApiRequest {
	s.FrontPathType = &v
	return s
}

func (s *EditAndActiveApiRequest) SetParamsLimitConfig(v []*EditAndActiveApiParamsLimitConfig) *EditAndActiveApiRequest {
	s.EditAndActiveApiParamsLimitConfig = v
	return s
}

func (s *EditAndActiveApiRequest) SetRemark(v string) *EditAndActiveApiRequest {
	s.Remark = &v
	return s
}

func (s *EditAndActiveApiRequest) SetRequestBodyConfig(v *EditAndActiveApiRequestBodyConfig) *EditAndActiveApiRequest {
	s.EditAndActiveApiRequestBodyConfig = v
	return s
}

func (s *EditAndActiveApiRequest) SetRequestMethod(v string) *EditAndActiveApiRequest {
	s.RequestMethod = &v
	return s
}

type EditAndActiveApiAuthConfig struct {
	// {"en":"Authentication parameter name,default value: authKey.", "zh_CN":"鉴权参数名称，默认值：authKey。"}
	AuthParamName *string `json:"authParamName,omitempty" xml:"authParamName,omitempty"`
	// {"en":"Authentication parameter location,default value:1.
	// 1:HTTP header
	// 2:Query string
	// 3:Cookie", "zh_CN":"鉴权参数位置，默认值：1。
	// 1：HTTP header
	// 2：Query string
	// 3：Cookie"}
	AuthParamSite *string `json:"authParamSite,omitempty" xml:"authParamSite,omitempty"`
	// {"en":"Authentication method,default value:1.
	// 1:No auth
	// 2:Auth by  wangsu Secret Key.", "zh_CN":"鉴权方法，默认值：1。
	// 1：免鉴权
	// 2：网宿秘钥对鉴权"}
	AuthType *string `json:"authType,omitempty" xml:"authType,omitempty"`
	// {"en":"Authentication validity time(seconds), default value:8.", "zh_CN":"鉴权有效期（s），默认值：8。"}
	AuthValidityTime *int `json:"authValidityTime,omitempty" xml:"authValidityTime,omitempty"`
}

func (s EditAndActiveApiAuthConfig) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiAuthConfig) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiAuthConfig) SetAuthParamName(v string) *EditAndActiveApiAuthConfig {
	s.AuthParamName = &v
	return s
}

func (s *EditAndActiveApiAuthConfig) SetAuthParamSite(v string) *EditAndActiveApiAuthConfig {
	s.AuthParamSite = &v
	return s
}

func (s *EditAndActiveApiAuthConfig) SetAuthType(v string) *EditAndActiveApiAuthConfig {
	s.AuthType = &v
	return s
}

func (s *EditAndActiveApiAuthConfig) SetAuthValidityTime(v int) *EditAndActiveApiAuthConfig {
	s.AuthValidityTime = &v
	return s
}

type EditAndActiveApiParamsLimitConfig struct {
	// {"en":"Request body parameter restriction configuration.", "zh_CN":"请求Body参数限制配置。"}
	EditAndActiveApiBody []*EditAndActiveApiBody `json:"body,omitempty" xml:"body,omitempty" type:"Repeated"`
	// {"en":"Request method,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty"`
	// {"en":"Request parameter.", "zh_CN":"请求参数。"}
	EditAndActiveApiRequestParams []*EditAndActiveApiRequestParams `json:"requestParams,omitempty" xml:"requestParams,omitempty" type:"Repeated"`
	// {"en":"Path matching type,Default value:DICT.
	// DICT:Complete matching
	//  REGEX:Regular matching", "zh_CN":"路径匹配类型，默认值：DICT。
	// DICT：完整匹配
	//  REGEX：正则匹配"}
	PathMatchType *string `json:"pathMatchType,omitempty" xml:"pathMatchType,omitempty"`
	// {"en":"Whether to define the body parameter,default value:false.", "zh_CN":"是否定义Body参数，默认值：false。"}
	BodyFlag *bool `json:"bodyFlag,omitempty" xml:"bodyFlag,omitempty"`
	// {"en":"EditAndActiveApiBody parameter type,default value:FORM.
	// FORM:Form
	// JSON_XML:Json format definition", "zh_CN":"Body参数类型，默认值：FORM。
	// FORM：Form表单
	// JSON_XML：Json格式定义"}
	BodyType *string `json:"bodyType,omitempty" xml:"bodyType,omitempty"`
}

func (s EditAndActiveApiParamsLimitConfig) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiParamsLimitConfig) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiParamsLimitConfig) SetBody(v []*EditAndActiveApiBody) *EditAndActiveApiParamsLimitConfig {
	s.EditAndActiveApiBody = v
	return s
}

func (s *EditAndActiveApiParamsLimitConfig) SetRequestMethod(v string) *EditAndActiveApiParamsLimitConfig {
	s.RequestMethod = &v
	return s
}

func (s *EditAndActiveApiParamsLimitConfig) SetRequestParams(v []*EditAndActiveApiRequestParams) *EditAndActiveApiParamsLimitConfig {
	s.EditAndActiveApiRequestParams = v
	return s
}

func (s *EditAndActiveApiParamsLimitConfig) SetPathMatchType(v string) *EditAndActiveApiParamsLimitConfig {
	s.PathMatchType = &v
	return s
}

func (s *EditAndActiveApiParamsLimitConfig) SetBodyFlag(v bool) *EditAndActiveApiParamsLimitConfig {
	s.BodyFlag = &v
	return s
}

func (s *EditAndActiveApiParamsLimitConfig) SetBodyType(v string) *EditAndActiveApiParamsLimitConfig {
	s.BodyType = &v
	return s
}

type EditAndActiveApiRequestBodyConfig struct {
	// {"en":"Maximum body limit(bytes).", "zh_CN":"body最大限制。"}
	BodyLimitMax *int `json:"bodyLimitMax,omitempty" xml:"bodyLimitMax,omitempty"`
	// {"en":"HTTP content type of the response,default value:1.
	// 1:Form
	// 2:Json
	// 4:Any
	// 5:For empty or no existence.", "zh_CN":"contentType，默认值：1。
	// 1：Form表单
	// 2：Json
	// 4：任意
	// 5：为空或不存在。"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// {"en":"Maximum nesting depth.", "zh_CN":"最大嵌套层数。"}
	NestMax *int `json:"nestMax,omitempty" xml:"nestMax,omitempty"`
	// {"en":"Maximum number of parameters for JSON.", "zh_CN":"Json最大参数个数。"}
	ParamsCountMax *int `json:"paramsCountMax,omitempty" xml:"paramsCountMax,omitempty"`
	// {"en":"Parameter limit switch,default value: false.", "zh_CN":"参数限制开关，默认值：false。"}
	ParamsLimitSwitch *bool `json:"paramsLimitSwitch,omitempty" xml:"paramsLimitSwitch,omitempty"`
	// {"en":"Query string parameter detection modeh,default value:1.
	// 1:Quirk mode
	// 2:Strict mode", "zh_CN":"query string参数检测模式，默认值：1。
	// :1：宽松模式
	// 2：严格模式"}
	ParamsProcessingModel *string `json:"paramsProcessingModel,omitempty" xml:"paramsProcessingModel,omitempty"`
	// {"en":"Request body limit switch,default value:false.", "zh_CN":"请求body限制开关，默认值：false。"}
	RequestBodyLimitSwitch *bool `json:"requestBodyLimitSwitch,omitempty" xml:"requestBodyLimitSwitch,omitempty"`
	// {"en":"The action to execute when a rule is matched,default value:2.
	// 1:Block
	// 2:Log
	// 3:Sign", "zh_CN":"处理动作，默认值：2。
	// 1：拦截
	// 2：监控
	// 3：标记"}
	RequestProcessingAction *string `json:"requestProcessingAction,omitempty" xml:"requestProcessingAction,omitempty"`
}

func (s EditAndActiveApiRequestBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiRequestBodyConfig) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiRequestBodyConfig) SetBodyLimitMax(v int) *EditAndActiveApiRequestBodyConfig {
	s.BodyLimitMax = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetContentType(v string) *EditAndActiveApiRequestBodyConfig {
	s.ContentType = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetNestMax(v int) *EditAndActiveApiRequestBodyConfig {
	s.NestMax = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetParamsCountMax(v int) *EditAndActiveApiRequestBodyConfig {
	s.ParamsCountMax = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetParamsLimitSwitch(v bool) *EditAndActiveApiRequestBodyConfig {
	s.ParamsLimitSwitch = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetParamsProcessingModel(v string) *EditAndActiveApiRequestBodyConfig {
	s.ParamsProcessingModel = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetRequestBodyLimitSwitch(v bool) *EditAndActiveApiRequestBodyConfig {
	s.RequestBodyLimitSwitch = &v
	return s
}

func (s *EditAndActiveApiRequestBodyConfig) SetRequestProcessingAction(v string) *EditAndActiveApiRequestBodyConfig {
	s.RequestProcessingAction = &v
	return s
}

type EditAndActiveApiRequestParams struct {
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter position,default value:1.
	// 1: HTTP header
	// 2: Query string,
	// 3: Cookie
	// 4: Path parameter", "zh_CN":"参数位置，默认值：1。
	// 1：HTTP header
	// 2：Query string,
	// 3：Cookie
	// 4：路径参数"}
	Site *string `json:"site,omitempty" xml:"site,omitempty"`
	// {"en":"Parameter Type,default value:1.
	// 1:integer
	// 2:number
	// 3:string
	// 4:boolean
	// 5:enumerate", "zh_CN":"参数类型，默认值：1。
	// 1：整数
	// 2：数字
	// 3：字符串
	// 4：布尔
	// 5：枚举"}
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// {"en":"Parameter enumeration,multiple use \";\" split.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s EditAndActiveApiRequestParams) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiRequestParams) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiRequestParams) SetMax(v int) *EditAndActiveApiRequestParams {
	s.Max = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetMin(v int) *EditAndActiveApiRequestParams {
	s.Min = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetName(v string) *EditAndActiveApiRequestParams {
	s.Name = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetRequire(v bool) *EditAndActiveApiRequestParams {
	s.Require = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetSite(v string) *EditAndActiveApiRequestParams {
	s.Site = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetType(v string) *EditAndActiveApiRequestParams {
	s.Type = &v
	return s
}

func (s *EditAndActiveApiRequestParams) SetValue(v string) *EditAndActiveApiRequestParams {
	s.Value = &v
	return s
}

type EditAndActiveApiBody struct {
	// {"en":"Json node level(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Json sub node array(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json子节点数组，类型为Body（Body为Json必传）。"}
	EditAndActiveApiChildren []*EditAndActiveApiChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
}

func (s EditAndActiveApiBody) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiBody) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiBody) SetLevel(v int) *EditAndActiveApiBody {
	s.Level = &v
	return s
}

func (s *EditAndActiveApiBody) SetNodeRequire(v bool) *EditAndActiveApiBody {
	s.NodeRequire = &v
	return s
}

func (s *EditAndActiveApiBody) SetMax(v int) *EditAndActiveApiBody {
	s.Max = &v
	return s
}

func (s *EditAndActiveApiBody) SetMin(v int) *EditAndActiveApiBody {
	s.Min = &v
	return s
}

func (s *EditAndActiveApiBody) SetName(v string) *EditAndActiveApiBody {
	s.Name = &v
	return s
}

func (s *EditAndActiveApiBody) SetEnumeration(v string) *EditAndActiveApiBody {
	s.Enumeration = &v
	return s
}

func (s *EditAndActiveApiBody) SetRequire(v bool) *EditAndActiveApiBody {
	s.Require = &v
	return s
}

func (s *EditAndActiveApiBody) SetType(v string) *EditAndActiveApiBody {
	s.Type = &v
	return s
}

func (s *EditAndActiveApiBody) SetChildren(v []*EditAndActiveApiChildren) *EditAndActiveApiBody {
	s.EditAndActiveApiChildren = v
	return s
}

type EditAndActiveApiChildren struct {
	// {"en":"Json node level(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Json sub node array(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json子节点数组，类型为Body（Body为Json必传）。"}
	EditAndActiveApiChildren []*EditAndActiveApiSecondChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
}

func (s EditAndActiveApiChildren) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiChildren) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiChildren) SetLevel(v int) *EditAndActiveApiChildren {
	s.Level = &v
	return s
}

func (s *EditAndActiveApiChildren) SetNodeRequire(v bool) *EditAndActiveApiChildren {
	s.NodeRequire = &v
	return s
}

func (s *EditAndActiveApiChildren) SetMax(v int) *EditAndActiveApiChildren {
	s.Max = &v
	return s
}

func (s *EditAndActiveApiChildren) SetMin(v int) *EditAndActiveApiChildren {
	s.Min = &v
	return s
}

func (s *EditAndActiveApiChildren) SetName(v string) *EditAndActiveApiChildren {
	s.Name = &v
	return s
}

func (s *EditAndActiveApiChildren) SetEnumeration(v string) *EditAndActiveApiChildren {
	s.Enumeration = &v
	return s
}

func (s *EditAndActiveApiChildren) SetRequire(v bool) *EditAndActiveApiChildren {
	s.Require = &v
	return s
}

func (s *EditAndActiveApiChildren) SetType(v string) *EditAndActiveApiChildren {
	s.Type = &v
	return s
}

func (s *EditAndActiveApiChildren) SetChildren(v []*EditAndActiveApiSecondChildren) *EditAndActiveApiChildren {
	s.EditAndActiveApiChildren = v
	return s
}

type EditAndActiveApiSecondChildren struct {
	// {"en":"Json node level(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(EditAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s EditAndActiveApiSecondChildren) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiSecondChildren) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiSecondChildren) SetLevel(v int) *EditAndActiveApiSecondChildren {
	s.Level = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetNodeRequire(v bool) *EditAndActiveApiSecondChildren {
	s.NodeRequire = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetMax(v int) *EditAndActiveApiSecondChildren {
	s.Max = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetMin(v int) *EditAndActiveApiSecondChildren {
	s.Min = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetName(v string) *EditAndActiveApiSecondChildren {
	s.Name = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetEnumeration(v string) *EditAndActiveApiSecondChildren {
	s.Enumeration = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetRequire(v bool) *EditAndActiveApiSecondChildren {
	s.Require = &v
	return s
}

func (s *EditAndActiveApiSecondChildren) SetType(v string) *EditAndActiveApiSecondChildren {
	s.Type = &v
	return s
}

type EditAndActiveApiResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s EditAndActiveApiResponse) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiResponse) GoString() string {
	return s.String()
}

func (s *EditAndActiveApiResponse) SetCode(v int) *EditAndActiveApiResponse {
	s.Code = &v
	return s
}

func (s *EditAndActiveApiResponse) SetMsg(v string) *EditAndActiveApiResponse {
	s.Msg = &v
	return s
}

func (s *EditAndActiveApiResponse) SetData(v map[string]interface{}) *EditAndActiveApiResponse {
	s.Data = v
	return s
}

type EditAndActiveApiPaths struct {
}

func (s EditAndActiveApiPaths) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiPaths) GoString() string {
	return s.String()
}

type EditAndActiveApiParameters struct {
}

func (s EditAndActiveApiParameters) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiParameters) GoString() string {
	return s.String()
}

type EditAndActiveApiRequestHeader struct {
}

func (s EditAndActiveApiRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiRequestHeader) GoString() string {
	return s.String()
}

type EditAndActiveApiResponseHeader struct {
}

func (s EditAndActiveApiResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s EditAndActiveApiResponseHeader) GoString() string {
	return s.String()
}

type DeployBehaviorAnalyseRequest struct {
	// {"en":"domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule array.", "zh_CN":"规则数组。"}
	Al_rows []*DeployBehaviorAnalyseRow `json:"al_rows,omitempty" xml:"al_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployBehaviorAnalyseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseRequest) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseRequest) SetDomain(v string) *DeployBehaviorAnalyseRequest {
	s.Domain = &v
	return s
}

func (s *DeployBehaviorAnalyseRequest) SetAl_rows(v []*DeployBehaviorAnalyseRow) *DeployBehaviorAnalyseRequest {
	s.Al_rows = v
	return s
}

type DeployBehaviorAnalyseRow struct {
	// {"en":"Rule  id.", "zh_CN":"规则ID。"}
	Rule_id *int `json:"rule_id,omitempty" xml:"rule_id,omitempty"`
	// {"en":"Rule content.", "zh_CN":"规则内容。"}
	Rule_content *DeployBehaviorAnalyseRuleContent `json:"rule_content,omitempty" xml:"rule_content,omitempty" require:"true"`
}

func (s DeployBehaviorAnalyseRow) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseRow) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseRow) SetRule_id(v int) *DeployBehaviorAnalyseRow {
	s.Rule_id = &v
	return s
}

func (s *DeployBehaviorAnalyseRow) SetRule_content(v *DeployBehaviorAnalyseRuleContent) *DeployBehaviorAnalyseRow {
	s.Rule_content = v
	return s
}

type DeployBehaviorAnalyseRuleContent struct {
	// {"en":"Rule  name.", "zh_CN":"规则名称。"}
	Rule_name *string `json:"rule_name,omitempty" xml:"rule_name,omitempty" require:"true"`
	// {"en":"Rule  description.", "zh_CN":"规则描述。"}
	Rule_description *string `json:"rule_description,omitempty" xml:"rule_description,omitempty"`
	// {"en":"Application scen.
	//  0:WEB
	//  1:API", "zh_CN":"应用场景 。
	//  0：WEB
	//  1：API"}
	Application_scen *int `json:"application_scen,omitempty" xml:"application_scen,omitempty" require:"true"`
	// {"en":"Trigger condition statistical period.", "zh_CN":"触发条件-统计周期。"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical dimension.
	//  0:IP
	//  1:IP+User-Agent
	//  2:Client-ID
	//  3:Device Fingerprint", "zh_CN":"触发条件-统计维度。
	//  0：IP
	//  1：IP+UA
	//  2：客户端ID
	//  3：设备指纹"}
	Statistical_item *int `json:"statistical_item,omitempty" xml:"statistical_item,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Log
	//  1:Block
	//  2:Custom Response Content", "zh_CN":"处理动作。
	//  0：监控
	//  1：拦截
	//  2：自定义响应"}
	Action *int `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Request quantity/proportion determination.", "zh_CN":"请求数量/比例判定。"}
	Req_rows []*DeployBehaviorAnalyseReqRows `json:"req_rows,omitempty" xml:"req_rows,omitempty" require:"true" type:"Repeated"`
	// {"en":"Protection path.", "zh_CN":"防护路径。"}
	Fp_rows []*DeployBehaviorAnalysePtRows `json:"fp_rows,omitempty" xml:"fp_rows,omitempty" require:"true" type:"Repeated"`
	// {"en":"Deployment ID. Not required when creating rules, but required when updating rules.", "zh_CN":"部署ID。创建规则时不填，更新规则时必填。"}
	Deploy_id *string `json:"deploy_id,omitempty" xml:"deploy_id,omitempty"`
	// {"en":"The file type of the customized response content. The default value is text/html.", "zh_CN":"自定义响应内容的文件类型，默认值：text/html。"}
	Content_type *string `json:"content_type,omitempty" xml:"content_type,omitempty"`
	// {"en":"Customize the response content. If action=2, response is required.", "zh_CN":"自定义响应内容。若action=2，则response必填。"}
	Response *string `json:"response,omitempty" xml:"response,omitempty"`
	// {"en":"Custom response status code. Value range: [100, 999]. If action=2, customer_code is required.", "zh_CN":"自定义响应状态码。取值范围：[100, 999]。若action=2，则customer_code必填。"}
	Customer_code *int `json:"customer_code,omitempty" xml:"customer_code,omitempty"`
	// {"en":"Exception uri.", "zh_CN":"例外路径。"}
	Wl_uri []*string `json:"wl_uri,omitempty" xml:"wl_uri,omitempty" type:"Repeated"`
}

func (s DeployBehaviorAnalyseRuleContent) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseRuleContent) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseRuleContent) SetRule_name(v string) *DeployBehaviorAnalyseRuleContent {
	s.Rule_name = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetRule_description(v string) *DeployBehaviorAnalyseRuleContent {
	s.Rule_description = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetApplication_scen(v int) *DeployBehaviorAnalyseRuleContent {
	s.Application_scen = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetStatistical_period(v int) *DeployBehaviorAnalyseRuleContent {
	s.Statistical_period = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetStatistical_item(v int) *DeployBehaviorAnalyseRuleContent {
	s.Statistical_item = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetAction(v int) *DeployBehaviorAnalyseRuleContent {
	s.Action = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetReq_rows(v []*DeployBehaviorAnalyseReqRows) *DeployBehaviorAnalyseRuleContent {
	s.Req_rows = v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetFp_rows(v []*DeployBehaviorAnalysePtRows) *DeployBehaviorAnalyseRuleContent {
	s.Fp_rows = v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetDeploy_id(v string) *DeployBehaviorAnalyseRuleContent {
	s.Deploy_id = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetContent_type(v string) *DeployBehaviorAnalyseRuleContent {
	s.Content_type = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetResponse(v string) *DeployBehaviorAnalyseRuleContent {
	s.Response = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetCustomer_code(v int) *DeployBehaviorAnalyseRuleContent {
	s.Customer_code = &v
	return s
}

func (s *DeployBehaviorAnalyseRuleContent) SetWl_uri(v []*string) *DeployBehaviorAnalyseRuleContent {
	s.Wl_uri = v
	return s
}

type DeployBehaviorAnalysePtRows struct {
	// {"en":"Protection path matching method.
	//  3:Equals
	//  4:Regex match
	// 5:Contains", "zh_CN":"防护路径匹配方式。
	//  3：等于
	//  4：正则匹配
	// 5：包含"}
	Protection_scope *int `json:"protection_scope,omitempty" xml:"protection_scope,omitempty" require:"true"`
	// {"en":"Protection path content.", "zh_CN":"防护路径内容。"}
	Protection_content *string `json:"protection_content,omitempty" xml:"protection_content,omitempty" require:"true"`
	// {"en":"Protection type.
	// Path:Path
	// URI:URI", "zh_CN":"防护类型。
	// Path:路径
	// URI:URI"}
	Protection_name *string `json:"protection_name,omitempty" xml:"protection_name,omitempty" require:"true"`
}

func (s DeployBehaviorAnalysePtRows) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalysePtRows) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalysePtRows) SetProtection_scope(v int) *DeployBehaviorAnalysePtRows {
	s.Protection_scope = &v
	return s
}

func (s *DeployBehaviorAnalysePtRows) SetProtection_content(v string) *DeployBehaviorAnalysePtRows {
	s.Protection_content = &v
	return s
}

func (s *DeployBehaviorAnalysePtRows) SetProtection_name(v string) *DeployBehaviorAnalysePtRows {
	s.Protection_name = &v
	return s
}

type DeployBehaviorAnalyseReqRows struct {
	// {"en":"Request quantity determination.If application_scen =  0,req_judge is required.
	//  0:Request Number
	//  1:Request Ratio", "zh_CN":"请求数量判定。若application_scen=0，则req_judge必填。
	//  0：请求数量判定
	//  1：请求比例判定"}
	Req_judge *string `json:"req_judge,omitempty" xml:"req_judge,omitempty"`
	// {"en":"Request type1. If application_scen = 0,req_type1 is required.
	//   0:Total requests
	//  1:Requests of GET method
	//  2:Requests of POST method
	//   3:Requests of image resource
	//  4:Requests of css resource
	//  5:Requests of js resource
	//  6:Requests of other static resource",
	// 	"zh_CN":"请求类型1。若application_scen=0,则req_type1必填。
	//  0：总请求次数
	//  1：GET请求次
	//  2：POST请求次数
	//  3：图片资源请求次:
	//  4：CSS资源请求次数-4
	//  5：JS资源请求次数-5
	//  6：其他静态资源请求次"}
	Req_type1 *string `json:"req_type1,omitempty" xml:"req_type1,omitempty"`
	// {"en":"Request type2. If application_scen = 0 and req_judge=1,req_type2 is required.
	//   0:Total request
	//  1:Requests of GET method
	//  2：Requests of POST method
	//   3:Requests of image resource
	//  4:Requests of css resource
	//  5:Requests of js resource
	//  6:Requests of other static resource",
	// 	"zh_CN":"请求类型2。若application_scen=0且req_judge=1，则req_type2必填。
	//  0：总请求次数
	//  1：GET请求次数
	//  2：POST请求次数
	//  3：图片资源请求次数
	//  4：CSS资源请求次数
	//  5：JS资源请求次数
	//  6：其他静态资源请求次数"}
	Req_type2 *string `json:"req_type2,omitempty" xml:"req_type2,omitempty"`
	// {"en":"Operator.If application_scen = 0,req_isequal is required.
	//  0:>
	//  1:<
	//  2:>=
	//  3:<= ",
	// 	"zh_CN":"运算符。 若application_scen=0，则req_isequal必填。
	//  0：>
	//   1：<
	//  2：>=
	//  3：<= "}
	Req_isequal *string `json:"req_isequal,omitempty" xml:"req_isequal,omitempty"`
	// {"en":"Threshold. If application_scen=0, req_value is required.",
	// 	"zh_CN":"阈值。若application_scen=0，则req_value必填。"}
	Req_value *int `json:"req_value,omitempty" xml:"req_value,omitempty"`
	// {"en":"API Case - request type. If application_scen=1, api_req_type is required.
	//  0:Total requests
	//  1:Other URL requests
	//  2:Custom URL requests:",
	//     "zh_CN":"API场景-请求类型。若application_scen=1，则api_req_type必填。
	//  0：请求总数
	//  1：其他URL请求数
	//  2：自定义url请求数"}
	Api_req_type *string `json:"api_req_type,omitempty" xml:"api_req_type,omitempty"`
	// {"en":"API Case - operator.If api_req_type=2, api_self_isregex is required.
	//  0:Equals
	//  1:Regex match
	// 2:Contains", "zh_CN":"API场景-运算符。若api_req_type=2，则api_self_isregex必填。
	//  0：相等
	//  1：正则匹配
	//  2：包含"}
	Api_self_isregex *string `json:"api_self_isregex,omitempty" xml:"api_self_isregex,omitempty"`
	// {"en":"API Case - Custom URL. If api_req_type=2, api_self_url  is required.", "zh_CN":"API场景-自定义URL。若api_req_type=2，则api_self_url必填。"}
	Api_self_url *string `json:"api_self_url,omitempty" xml:"api_self_url,omitempty"`
	// {"en":"API Case - operator. If application_scen=1, api_req_isequal is required.
	//  0:>
	//  1:<
	//  2:>=
	//  3:<= ",
	// 	"zh_CN":"API场景-运算符。若application_scen=1，则api_req_isequal必填。
	//  0：>
	//   1：<
	//  2：>=
	//  3：<= "}
	Api_req_isequal *string `json:"api_req_isequal,omitempty" xml:"api_req_isequal,omitempty"`
	// {"en":"API Case - threshold. If application_scen=1, api_req_value is required.", "zh_CN":"API-阈值。若application_scen=1，则api_req_value必填。"}
	Api_req_value *int `json:"api_req_value,omitempty" xml:"api_req_value,omitempty"`
	// {"en":"Match type.If api_req_type=2, api_self_url  is required.
	// Path:Path
	// URI:URI", "zh_CN":"匹配类型。若api_req_type=2，则api_self_isregex必填。
	// Path:路径
	// URI:URI"}
	Api_req_name *string `json:"api_req_name,omitempty" xml:"api_req_name,omitempty"`
}

func (s DeployBehaviorAnalyseReqRows) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseReqRows) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseReqRows) SetReq_judge(v string) *DeployBehaviorAnalyseReqRows {
	s.Req_judge = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetReq_type1(v string) *DeployBehaviorAnalyseReqRows {
	s.Req_type1 = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetReq_type2(v string) *DeployBehaviorAnalyseReqRows {
	s.Req_type2 = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetReq_isequal(v string) *DeployBehaviorAnalyseReqRows {
	s.Req_isequal = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetReq_value(v int) *DeployBehaviorAnalyseReqRows {
	s.Req_value = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_req_type(v string) *DeployBehaviorAnalyseReqRows {
	s.Api_req_type = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_self_isregex(v string) *DeployBehaviorAnalyseReqRows {
	s.Api_self_isregex = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_self_url(v string) *DeployBehaviorAnalyseReqRows {
	s.Api_self_url = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_req_isequal(v string) *DeployBehaviorAnalyseReqRows {
	s.Api_req_isequal = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_req_value(v int) *DeployBehaviorAnalyseReqRows {
	s.Api_req_value = &v
	return s
}

func (s *DeployBehaviorAnalyseReqRows) SetApi_req_name(v string) *DeployBehaviorAnalyseReqRows {
	s.Api_req_name = &v
	return s
}

type DeployBehaviorAnalyseResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据"}
	Data *DeployBehaviorAnalyseResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployBehaviorAnalyseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseResponse) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseResponse) SetCode(v string) *DeployBehaviorAnalyseResponse {
	s.Code = &v
	return s
}

func (s *DeployBehaviorAnalyseResponse) SetMessage(v string) *DeployBehaviorAnalyseResponse {
	s.Message = &v
	return s
}

func (s *DeployBehaviorAnalyseResponse) SetData(v *DeployBehaviorAnalyseResult) *DeployBehaviorAnalyseResponse {
	s.Data = v
	return s
}

type DeployBehaviorAnalyseResult struct {
	// {"en":"Deployment version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployBehaviorAnalyseResult) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseResult) GoString() string {
	return s.String()
}

func (s *DeployBehaviorAnalyseResult) SetDeployVersion(v string) *DeployBehaviorAnalyseResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployBehaviorAnalyseResult) SetEstimatetime(v string) *DeployBehaviorAnalyseResult {
	s.Estimatetime = &v
	return s
}

type DeployBehaviorAnalysePaths struct {
}

func (s DeployBehaviorAnalysePaths) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalysePaths) GoString() string {
	return s.String()
}

type DeployBehaviorAnalyseParameters struct {
}

func (s DeployBehaviorAnalyseParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseParameters) GoString() string {
	return s.String()
}

type DeployBehaviorAnalyseRequestHeader struct {
}

func (s DeployBehaviorAnalyseRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseRequestHeader) GoString() string {
	return s.String()
}

type DeployBehaviorAnalyseResponseHeader struct {
}

func (s DeployBehaviorAnalyseResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBehaviorAnalyseResponseHeader) GoString() string {
	return s.String()
}

type GetIntelligentAnalysisListRequest struct {
	// {'en':'Array of domain names.', 'zh_CN':'域名数组。'}
	Domain []*string `json:"domain,omitempty" xml:"domain,omitempty" require:"true" type:"Repeated"`
	// {'en':'Rule id array.', 'zh_CN':'规则id数组。'}
	RuleId []*int `json:"ruleId,omitempty" xml:"ruleId,omitempty" type:"Repeated"`
	// {'en':'Exceptions.', 'zh_CN':'例外内容。'}
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// {'en':'Status:
	//   0: Unprocessed
	//   1: Automatically
	//   2: Manually
	//   3: reject
	//   leave blank and default all.', 'zh_CN':'状态：
	//   0：待处理
	//   1：自动应用
	//   2：手动应用
	//   3：拒绝
	//   置空默认全部。'}
	Status *int `json:"status,omitempty" xml:"status,omitempty"`
	// {"en":"Current page number,1 by default.", "zh_CN":"当前页数，默认1。"}
	PageNum *int32 `json:"pageNum,omitempty" xml:"pageNum,omitempty"`
	// {"en":"Number each page,the maximum 1000,10 by default.", "zh_CN":"每页数量, 最大1000，默认10。"}
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty" maximum:"1000"`
	// {"en":"The language of response data, default value: cn.
	//     cn: Chinese
	//     en: English", "zh_CN":"返回内容的语言版本，默认值：cn。
	//     cn：中文
	//     en：英文"}
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
}

func (s GetIntelligentAnalysisListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListRequest) GoString() string {
	return s.String()
}

func (s *GetIntelligentAnalysisListRequest) SetDomain(v []*string) *GetIntelligentAnalysisListRequest {
	s.Domain = v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetRuleId(v []*int) *GetIntelligentAnalysisListRequest {
	s.RuleId = v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetContent(v string) *GetIntelligentAnalysisListRequest {
	s.Content = &v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetStatus(v int) *GetIntelligentAnalysisListRequest {
	s.Status = &v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetPageNum(v int32) *GetIntelligentAnalysisListRequest {
	s.PageNum = &v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetPageSize(v int32) *GetIntelligentAnalysisListRequest {
	s.PageSize = &v
	return s
}

func (s *GetIntelligentAnalysisListRequest) SetLang(v string) *GetIntelligentAnalysisListRequest {
	s.Lang = &v
	return s
}

type GetIntelligentAnalysisListResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {'en':'return data.', 'zh_CN':'返回值。'}
	Data *GetIntelligentAnalysisListRuleHostingPage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetIntelligentAnalysisListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListResponse) GoString() string {
	return s.String()
}

func (s *GetIntelligentAnalysisListResponse) SetCode(v string) *GetIntelligentAnalysisListResponse {
	s.Code = &v
	return s
}

func (s *GetIntelligentAnalysisListResponse) SetMessage(v string) *GetIntelligentAnalysisListResponse {
	s.Message = &v
	return s
}

func (s *GetIntelligentAnalysisListResponse) SetData(v *GetIntelligentAnalysisListRuleHostingPage) *GetIntelligentAnalysisListResponse {
	s.Data = v
	return s
}

type GetIntelligentAnalysisListRuleHostingPage struct {
	// {"en":"The total number of data.", "zh_CN":"总条数。"}
	Total *int32 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"Total number of pages.", "zh_CN":"总页数。"}
	Pages *int32 `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int32 `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"Number each page.", "zh_CN":"每页数量。"}
	Size *int32 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {'en':'Template information,array.', 'zh_CN':'数据列表，数组。'}
	Records *GetIntelligentAnalysisListRuleHosting `json:"records,omitempty" xml:"records,omitempty" require:"true"`
}

func (s GetIntelligentAnalysisListRuleHostingPage) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListRuleHostingPage) GoString() string {
	return s.String()
}

func (s *GetIntelligentAnalysisListRuleHostingPage) SetTotal(v int32) *GetIntelligentAnalysisListRuleHostingPage {
	s.Total = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHostingPage) SetPages(v int32) *GetIntelligentAnalysisListRuleHostingPage {
	s.Pages = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHostingPage) SetCurrent(v int32) *GetIntelligentAnalysisListRuleHostingPage {
	s.Current = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHostingPage) SetSize(v int32) *GetIntelligentAnalysisListRuleHostingPage {
	s.Size = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHostingPage) SetRecords(v *GetIntelligentAnalysisListRuleHosting) *GetIntelligentAnalysisListRuleHostingPage {
	s.Records = v
	return s
}

type GetIntelligentAnalysisListRuleHosting struct {
	// {'en':'Id.', 'zh_CN':'id。'}
	Id *int `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {'en':'Associated domain name.', 'zh_CN':'关联域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Exception rule id.', 'zh_CN':'例外规则id。'}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {'en':'Exception type.', 'zh_CN':'例外类型。'}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {'en':'Exception content.', 'zh_CN':'例外内容。'}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// {'en':'Describe.', 'zh_CN':'描述。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Status:
	//   0: Unprocessed
	//   1: Automatically
	//   2: Manually
	//   3: reject', 'zh_CN':'状态：
	//   0：待处理
	//   1：自动应用
	//   2：手动应用
	//   3：拒绝'}
	Status *int `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s GetIntelligentAnalysisListRuleHosting) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListRuleHosting) GoString() string {
	return s.String()
}

func (s *GetIntelligentAnalysisListRuleHosting) SetId(v int) *GetIntelligentAnalysisListRuleHosting {
	s.Id = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetDomain(v string) *GetIntelligentAnalysisListRuleHosting {
	s.Domain = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetRuleId(v int) *GetIntelligentAnalysisListRuleHosting {
	s.RuleId = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetType(v string) *GetIntelligentAnalysisListRuleHosting {
	s.Type = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetContent(v string) *GetIntelligentAnalysisListRuleHosting {
	s.Content = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetMsg(v string) *GetIntelligentAnalysisListRuleHosting {
	s.Msg = &v
	return s
}

func (s *GetIntelligentAnalysisListRuleHosting) SetStatus(v int) *GetIntelligentAnalysisListRuleHosting {
	s.Status = &v
	return s
}

type GetIntelligentAnalysisListPaths struct {
}

func (s GetIntelligentAnalysisListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListPaths) GoString() string {
	return s.String()
}

type GetIntelligentAnalysisListParameters struct {
}

func (s GetIntelligentAnalysisListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListParameters) GoString() string {
	return s.String()
}

type GetIntelligentAnalysisListRequestHeader struct {
}

func (s GetIntelligentAnalysisListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListRequestHeader) GoString() string {
	return s.String()
}

type GetIntelligentAnalysisListResponseHeader struct {
}

func (s GetIntelligentAnalysisListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetIntelligentAnalysisListResponseHeader) GoString() string {
	return s.String()
}

type AddCustomizeRuleRequest struct {
	// {"en":"Match Conditions.","zh_CN":"匹配条件。"}
	Condition *AddCustomizeRuleRequestCondition `json:"condition,omitempty" xml:"condition,omitempty" require:"true" type:"Struct"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nDELAY：延迟响应\nBLOCK：拦截\nRESET:断开连接","exampleValue":"NO_USE,LOG,DELAY,BLOCK,RESET"}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule Name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"规则描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"API ID under API business, multiple separated by ; sign.\nWhen the protected target is APIThis field is required.","zh_CN":"API业务下的API ID，多个用 ; 隔开。\n当业务场景为API业务时此字段必填。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：网站业务\nAPI：API业务","exampleValue":"WEB,API"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty" require:"true"`
}

func (s AddCustomizeRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequest) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequest) SetCondition(v *AddCustomizeRuleRequestCondition) *AddCustomizeRuleRequest {
	s.Condition = v
	return s
}

func (s *AddCustomizeRuleRequest) SetAct(v string) *AddCustomizeRuleRequest {
	s.Act = &v
	return s
}

func (s *AddCustomizeRuleRequest) SetDomain(v string) *AddCustomizeRuleRequest {
	s.Domain = &v
	return s
}

func (s *AddCustomizeRuleRequest) SetRuleName(v string) *AddCustomizeRuleRequest {
	s.RuleName = &v
	return s
}

func (s *AddCustomizeRuleRequest) SetDescription(v string) *AddCustomizeRuleRequest {
	s.Description = &v
	return s
}

func (s *AddCustomizeRuleRequest) SetApiId(v string) *AddCustomizeRuleRequest {
	s.ApiId = &v
	return s
}

func (s *AddCustomizeRuleRequest) SetScene(v string) *AddCustomizeRuleRequest {
	s.Scene = &v
	return s
}

type AddCustomizeRuleRequestCondition struct {
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*AddCustomizeRuleRequestConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*AddCustomizeRuleRequestConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" type:"Repeated"`
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*AddCustomizeRuleRequestConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*AddCustomizeRuleRequestConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*AddCustomizeRuleRequestConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI Parameter, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI参数，匹配类型不可重复。\n当业务场景为网站业务时不支持此匹配条件。"}
	UriParamConditions []*AddCustomizeRuleRequestConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*AddCustomizeRuleRequestConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Request Header, match type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*AddCustomizeRuleRequestConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*AddCustomizeRuleRequestConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*AddCustomizeRuleRequestConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*AddCustomizeRuleRequestConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" type:"Repeated"`
}

func (s AddCustomizeRuleRequestCondition) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestCondition) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestCondition) SetMethodConditions(v []*AddCustomizeRuleRequestConditionMethodConditions) *AddCustomizeRuleRequestCondition {
	s.MethodConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetAreaConditions(v []*AddCustomizeRuleRequestConditionAreaConditions) *AddCustomizeRuleRequestCondition {
	s.AreaConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetIpOrIpsConditions(v []*AddCustomizeRuleRequestConditionIpOrIpsConditions) *AddCustomizeRuleRequestCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetUriConditions(v []*AddCustomizeRuleRequestConditionUriConditions) *AddCustomizeRuleRequestCondition {
	s.UriConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetPathConditions(v []*AddCustomizeRuleRequestConditionPathConditions) *AddCustomizeRuleRequestCondition {
	s.PathConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetUriParamConditions(v []*AddCustomizeRuleRequestConditionUriParamConditions) *AddCustomizeRuleRequestCondition {
	s.UriParamConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetUaConditions(v []*AddCustomizeRuleRequestConditionUaConditions) *AddCustomizeRuleRequestCondition {
	s.UaConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetHeaderConditions(v []*AddCustomizeRuleRequestConditionHeaderConditions) *AddCustomizeRuleRequestCondition {
	s.HeaderConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetRefererConditions(v []*AddCustomizeRuleRequestConditionRefererConditions) *AddCustomizeRuleRequestCondition {
	s.RefererConditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetJa3Conditions(v []*AddCustomizeRuleRequestConditionJa3Conditions) *AddCustomizeRuleRequestCondition {
	s.Ja3Conditions = v
	return s
}

func (s *AddCustomizeRuleRequestCondition) SetJa4Conditions(v []*AddCustomizeRuleRequestConditionJa4Conditions) *AddCustomizeRuleRequestCondition {
	s.Ja4Conditions = v
	return s
}

type AddCustomizeRuleRequestConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionMethodConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionMethodConditions) SetRequestMethod(v []*string) *AddCustomizeRuleRequestConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type AddCustomizeRuleRequestConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionAreaConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionAreaConditions) SetAreas(v []*string) *AddCustomizeRuleRequestConditionAreaConditions {
	s.Areas = v
	return s
}

type AddCustomizeRuleRequestConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionIpOrIpsConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionIpOrIpsConditions) SetIpOrIps(v []*string) *AddCustomizeRuleRequestConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type AddCustomizeRuleRequestConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionUriConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionUriConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionUriConditions) SetUri(v []*string) *AddCustomizeRuleRequestConditionUriConditions {
	s.Uri = v
	return s
}

type AddCustomizeRuleRequestConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	AddCustomizeRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionPathConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionPathConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionPathConditions) SetAddCustomizeRulePaths(v []*string) *AddCustomizeRuleRequestConditionPathConditions {
	s.AddCustomizeRulePaths = v
	return s
}

type AddCustomizeRuleRequestConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals,param value case sensitive\nNOT_EQUAL:Does not equal,param value case sensitive\nCONTAIN:Contains,param value case insensitive\nNOT_CONTAIN:Does not contains,param value case insensitive\nREGEX:Regex match,param value case insensitive\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于，参数值大小写敏感\nNOT_EQUAL：不等于，参数值大小写敏感\nCONTAIN：包含，参数值大小写不敏感\nNOT_CONTAIN：不包含，参数值大小写不敏感\nREGEX：正则，参数值大小写不敏感\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name,case sensitive,maximum 100 characters.\nExample: id.","zh_CN":"参数名，大小写敏感，最多100个字符。\n示例：id。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionUriParamConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionUriParamConditions) SetParamName(v string) *AddCustomizeRuleRequestConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionUriParamConditions) SetParamValue(v []*string) *AddCustomizeRuleRequestConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type AddCustomizeRuleRequestConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionUaConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionUaConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionUaConditions) SetUa(v []*string) *AddCustomizeRuleRequestConditionUaConditions {
	s.Ua = v
	return s
}

type AddCustomizeRuleRequestConditionHeaderConditions struct {
	// {"en":"Match type.EQUAL: Equals, request header values case sensitiveNOT_EQUAL: Does not equal, request header values case sensitiveCONTAIN: Contains, request header values case insensitiveNOT_CONTAIN: Does not Contains, request header values case insensitiveNONE: Empty or non-existentREGEX: Regex match, request header values case insensitiveNOT_REGEX: Regular does not match, request header values case insensitiveSTART_WITH: Starts with, request header values case insensitiveEND_WITH: Ends with, request header values case insensitiveWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single characterNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。EQUAL：等于，头部值大小写敏感NOT_EQUAL：不等于，头部值大小写敏感CONTAIN：包含，头部值大小写不敏感NOT_CONTAIN：不包含，头部值大小写不敏感NONE：为空或不存在REGEX：匹配正则，头部值大小写不敏感NOT_REGEX：正则不匹配，头部值大小写不敏感START_WITH：开头是，头部值大小写不敏感END_WITH：结尾是，头部值大小写不敏感WILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符NOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s AddCustomizeRuleRequestConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionHeaderConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionHeaderConditions) SetValueList(v []*string) *AddCustomizeRuleRequestConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *AddCustomizeRuleRequestConditionHeaderConditions) SetKey(v string) *AddCustomizeRuleRequestConditionHeaderConditions {
	s.Key = &v
	return s
}

type AddCustomizeRuleRequestConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s AddCustomizeRuleRequestConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionRefererConditions) SetReferer(v []*string) *AddCustomizeRuleRequestConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *AddCustomizeRuleRequestConditionRefererConditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionRefererConditions {
	s.MatchType = &v
	return s
}

type AddCustomizeRuleRequestConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionJa3Conditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionJa3Conditions) SetJa3List(v []*string) *AddCustomizeRuleRequestConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type AddCustomizeRuleRequestConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s AddCustomizeRuleRequestConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestConditionJa4Conditions) SetMatchType(v string) *AddCustomizeRuleRequestConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *AddCustomizeRuleRequestConditionJa4Conditions) SetJa4List(v []*string) *AddCustomizeRuleRequestConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type AddCustomizeRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s AddCustomizeRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleRequestHeader) SetServiceType(v string) *AddCustomizeRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type AddCustomizeRulePaths struct {
}

func (s AddCustomizeRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRulePaths) GoString() string {
	return s.String()
}

type AddCustomizeRuleParameters struct {
}

func (s AddCustomizeRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleParameters) GoString() string {
	return s.String()
}

type AddCustomizeRuleResponse struct {
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s AddCustomizeRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleResponse) GoString() string {
	return s.String()
}

func (s *AddCustomizeRuleResponse) SetMsg(v string) *AddCustomizeRuleResponse {
	s.Msg = &v
	return s
}

func (s *AddCustomizeRuleResponse) SetCode(v string) *AddCustomizeRuleResponse {
	s.Code = &v
	return s
}

func (s *AddCustomizeRuleResponse) SetData(v string) *AddCustomizeRuleResponse {
	s.Data = &v
	return s
}

type AddCustomizeRuleResponseHeader struct {
}

func (s AddCustomizeRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AddCustomizeRuleResponseHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForCustomRuleRequest struct {
	// {"en":"Rule ID,array.", "zh_CN":"规则ID，数组。"}
	RuleIdList []*int32 `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Domain to remove from the specified rule, array.", "zh_CN":"要从指定自定义规则中移除的域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveDomainsForCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForCustomRuleRequest) SetRuleIdList(v []*int32) *RemoveDomainsForCustomRuleRequest {
	s.RuleIdList = v
	return s
}

func (s *RemoveDomainsForCustomRuleRequest) SetDomainList(v []*string) *RemoveDomainsForCustomRuleRequest {
	s.DomainList = v
	return s
}

type RemoveDomainsForCustomRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s RemoveDomainsForCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForCustomRuleResponse) SetCode(v string) *RemoveDomainsForCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *RemoveDomainsForCustomRuleResponse) SetMessage(v string) *RemoveDomainsForCustomRuleResponse {
	s.Message = &v
	return s
}

type RemoveDomainsForCustomRulePaths struct {
}

func (s RemoveDomainsForCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRulePaths) GoString() string {
	return s.String()
}

type RemoveDomainsForCustomRuleParameters struct {
}

func (s RemoveDomainsForCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRuleParameters) GoString() string {
	return s.String()
}

type RemoveDomainsForCustomRuleRequestHeader struct {
}

func (s RemoveDomainsForCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRuleRequestHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForCustomRuleResponseHeader struct {
}

func (s RemoveDomainsForCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type GetApiListRequest struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	GetApiListPage *string `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页API条数。"}
	Size *string `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"API group,multiple use \";\" split.", "zh_CN":"API分组，多个用;分隔。"}
	ApiGroup *string `json:"apiGroup,omitempty" xml:"apiGroup,omitempty"`
	// {"en":"API name.", "zh_CN":"API名称。"}
	ApiName *string `json:"apiName,omitempty" xml:"apiName,omitempty"`
	// {"en":"Domain,multiple use \";\" split.", "zh_CN":"域名，多个用;分隔。"}
	Domains *string `json:"domains,omitempty" xml:"domains,omitempty"`
	// {"en":"Endpoint path.", "zh_CN":"前端路径。"}
	FrontPath *string `json:"frontPath,omitempty" xml:"frontPath,omitempty"`
	// {"en":"Sort order.
	// desc:Descending
	// asc:Ascending.", "zh_CN":"排序顺序。
	// desc：降序
	// asc：升序。"}
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// {"en":"Sort field.
	// Example: updateTime.", "zh_CN":"排序字段。
	// 例：updateTime。"}
	SortBy *string `json:"sortBy,omitempty" xml:"sortBy,omitempty"`
}

func (s GetApiListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApiListRequest) GoString() string {
	return s.String()
}

func (s *GetApiListRequest) SetPage(v string) *GetApiListRequest {
	s.GetApiListPage = &v
	return s
}

func (s *GetApiListRequest) SetSize(v string) *GetApiListRequest {
	s.Size = &v
	return s
}

func (s *GetApiListRequest) SetApiGroup(v string) *GetApiListRequest {
	s.ApiGroup = &v
	return s
}

func (s *GetApiListRequest) SetApiName(v string) *GetApiListRequest {
	s.ApiName = &v
	return s
}

func (s *GetApiListRequest) SetDomains(v string) *GetApiListRequest {
	s.Domains = &v
	return s
}

func (s *GetApiListRequest) SetFrontPath(v string) *GetApiListRequest {
	s.FrontPath = &v
	return s
}

func (s *GetApiListRequest) SetOrder(v string) *GetApiListRequest {
	s.Order = &v
	return s
}

func (s *GetApiListRequest) SetSortBy(v string) *GetApiListRequest {
	s.SortBy = &v
	return s
}

type GetApiListResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"List of API datas.", "zh_CN":"数据。"}
	Data *GetApiListPage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetApiListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApiListResponse) GoString() string {
	return s.String()
}

func (s *GetApiListResponse) SetCode(v int) *GetApiListResponse {
	s.Code = &v
	return s
}

func (s *GetApiListResponse) SetMsg(v string) *GetApiListResponse {
	s.Msg = &v
	return s
}

func (s *GetApiListResponse) SetData(v *GetApiListPage) *GetApiListResponse {
	s.Data = v
	return s
}

type GetApiListPage struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"The total number of pages.", "zh_CN":"总页数。"}
	Pages *int `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页记录条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"The total number of records.", "zh_CN":"总条数。"}
	Total *int `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"Records.", "zh_CN":"记录。"}
	Records []*GetApiListApiInfo `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetApiListPage) String() string {
	return tea.Prettify(s)
}

func (s GetApiListPage) GoString() string {
	return s.String()
}

func (s *GetApiListPage) SetCurrent(v int) *GetApiListPage {
	s.Current = &v
	return s
}

func (s *GetApiListPage) SetPages(v int) *GetApiListPage {
	s.Pages = &v
	return s
}

func (s *GetApiListPage) SetSize(v int) *GetApiListPage {
	s.Size = &v
	return s
}

func (s *GetApiListPage) SetTotal(v int) *GetApiListPage {
	s.Total = &v
	return s
}

func (s *GetApiListPage) SetRecords(v []*GetApiListApiInfo) *GetApiListPage {
	s.Records = v
	return s
}

type GetApiListApiInfo struct {
	// {"en":"Case sensitive,default value:0.
	// 0:False
	// 1:True.", "zh_CN":"大小写敏感，默认值：0。
	//  0：否
	// 1：是。"}
	ApiCase *int `json:"apiCase,omitempty" xml:"apiCase,omitempty" require:"true"`
	// {"en":"API privacy,default value:PUBLIC.
	// PUBLIC:Public,the consumer does not need to associate with the API, and can access the public API assets only by passing the authentication.
	// PRIVATE:Private,you need to create a consumer and associate with the API to access private API assets.", "zh_CN":"API隐私，默认值：PUBLIC。
	// PUBLIC：公开，消费方无需绑定API，仅鉴权通过即可访问公开API资产。
	// PRIVATE：私有，需要创建消费方并绑定API，方可访问私有API资产。"}
	ApiConceal *string `json:"apiConceal,omitempty" xml:"apiConceal,omitempty" require:"true"`
	// {"en":"API type,default value:NORMAL.
	// NORMAL:Normal API,the path does not contain query string parameters,such as http://www.test.com/api.
	// WHEN_CASE:When case,the path contains query string parameters,such as http://www.test.com/api?action=1 and http://www.test.com/api?action=2 are two different APIs.", "zh_CN":"API类型，默认值：NORMAL。
	// NORMAL：普通接口，路径中不包含query string参数的普通接口，如http://www.test.com/api。
	// WHEN_CASE：when_case接口，路径中包含query string参数，如http://www.test.com/api?action=1与http://www.test.com/api?action=2 是两个不同的接口。"}
	ApiType *string `json:"apiType,omitempty" xml:"apiType,omitempty" require:"true"`
	// {"en":"API group", "zh_CN":"API分组。"}
	ApiGroup *string `json:"apiGroup,omitempty" xml:"apiGroup,omitempty" require:"true"`
	// {"en":"API name", "zh_CN":"API名称。"}
	ApiName *string `json:"apiName,omitempty" xml:"apiName,omitempty" require:"true"`
	// {"en":"Parameter limit configuration.", "zh_CN":"参数限制。"}
	ApiParamsLimitList []*GetApiListApiParamsLimit `json:"apiParamsLimitList,omitempty" xml:"apiParamsLimitList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Authentication configuration.", "zh_CN":"鉴权配置。"}
	GetApiListAuthConfig *GetApiListAuthConfig `json:"authConfig,omitempty" xml:"authConfig,omitempty" require:"true"`
	// {"en":"Authentication key.", "zh_CN":"鉴权秘钥。"}
	AuthKey *string `json:"authKey,omitempty" xml:"authKey,omitempty" require:"true"`
	// {"en":"Create time,format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Deployment status, DEPLOYED:Deployment succeeded
	// DEPLOYING:Deploying
	// UNDEPLOY:Not deployed
	// DEPLOY_FAIL:Deployment failed.", "zh_CN":"部署状态，DEPLOYED：部署成功
	// DEPLOYING：部署中
	// UNDEPLOY：未部署
	// DEPLOY_FAIL：部署失败。"}
	DeployStatus *string `json:"deployStatus,omitempty" xml:"deployStatus,omitempty" require:"true"`
	// {"en":"Domain,multiple use \";\" split.", "zh_CN":"域名，多个用;隔开。"}
	Domains *string `json:"domains,omitempty" xml:"domains,omitempty" require:"true"`
	// {"en":"Endpoint path.", "zh_CN":"前端路径。"}
	FrontPath *string `json:"frontPath,omitempty" xml:"frontPath,omitempty" require:"true"`
	// {"en":"Match parameters in the path,default value:0.
	// 0:False
	// 1:True
	// ", "zh_CN":"前端路径类型，默认值：0。
	//  0：否
	// 1：是
	// "}
	FrontPathType *int `json:"frontPathType,omitempty" xml:"frontPathType,omitempty" require:"true"`
	// {"en":"API ID", "zh_CN":"API ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Path matching type,default value:DICT.
	// DICT:Complete matching
	//  REGEX:Regular matching", "zh_CN":"路径匹配类型，默认值：DICT。
	// DICT：完整匹配
	//  REGEX：正则匹配"}
	PathMatchType *string `json:"pathMatchType,omitempty" xml:"pathMatchType,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// {"en":"Request body limit configuration.", "zh_CN":"请求Body限制配置。"}
	GetApiListRequestBodyConfig *GetApiListRequestBodyConfig `json:"requestBodyConfig,omitempty" xml:"requestBodyConfig,omitempty" require:"true"`
	// {"en":"Request Methods,multiple use \";\" split,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，多个用;隔开，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true"`
	// {"en":"API status,ACTIVE:Active
	// STOP:Deactivate.", "zh_CN":"API状态，ACTIVE：激活
	// STOP：停用"}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {"en":"Update time,format: yyyy-MM-dd HH:mm:ss..", "zh_CN":"修改时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"Version.", "zh_CN":"版本。"}
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s GetApiListApiInfo) String() string {
	return tea.Prettify(s)
}

func (s GetApiListApiInfo) GoString() string {
	return s.String()
}

func (s *GetApiListApiInfo) SetApiCase(v int) *GetApiListApiInfo {
	s.ApiCase = &v
	return s
}

func (s *GetApiListApiInfo) SetApiConceal(v string) *GetApiListApiInfo {
	s.ApiConceal = &v
	return s
}

func (s *GetApiListApiInfo) SetApiType(v string) *GetApiListApiInfo {
	s.ApiType = &v
	return s
}

func (s *GetApiListApiInfo) SetApiGroup(v string) *GetApiListApiInfo {
	s.ApiGroup = &v
	return s
}

func (s *GetApiListApiInfo) SetApiName(v string) *GetApiListApiInfo {
	s.ApiName = &v
	return s
}

func (s *GetApiListApiInfo) SetApiParamsLimitList(v []*GetApiListApiParamsLimit) *GetApiListApiInfo {
	s.ApiParamsLimitList = v
	return s
}

func (s *GetApiListApiInfo) SetAuthConfig(v *GetApiListAuthConfig) *GetApiListApiInfo {
	s.GetApiListAuthConfig = v
	return s
}

func (s *GetApiListApiInfo) SetAuthKey(v string) *GetApiListApiInfo {
	s.AuthKey = &v
	return s
}

func (s *GetApiListApiInfo) SetCreateTime(v string) *GetApiListApiInfo {
	s.CreateTime = &v
	return s
}

func (s *GetApiListApiInfo) SetDeployStatus(v string) *GetApiListApiInfo {
	s.DeployStatus = &v
	return s
}

func (s *GetApiListApiInfo) SetDomains(v string) *GetApiListApiInfo {
	s.Domains = &v
	return s
}

func (s *GetApiListApiInfo) SetFrontPath(v string) *GetApiListApiInfo {
	s.FrontPath = &v
	return s
}

func (s *GetApiListApiInfo) SetFrontPathType(v int) *GetApiListApiInfo {
	s.FrontPathType = &v
	return s
}

func (s *GetApiListApiInfo) SetId(v string) *GetApiListApiInfo {
	s.Id = &v
	return s
}

func (s *GetApiListApiInfo) SetPathMatchType(v string) *GetApiListApiInfo {
	s.PathMatchType = &v
	return s
}

func (s *GetApiListApiInfo) SetRemark(v string) *GetApiListApiInfo {
	s.Remark = &v
	return s
}

func (s *GetApiListApiInfo) SetRequestBodyConfig(v *GetApiListRequestBodyConfig) *GetApiListApiInfo {
	s.GetApiListRequestBodyConfig = v
	return s
}

func (s *GetApiListApiInfo) SetRequestMethod(v string) *GetApiListApiInfo {
	s.RequestMethod = &v
	return s
}

func (s *GetApiListApiInfo) SetStatus(v string) *GetApiListApiInfo {
	s.Status = &v
	return s
}

func (s *GetApiListApiInfo) SetUpdateTime(v string) *GetApiListApiInfo {
	s.UpdateTime = &v
	return s
}

func (s *GetApiListApiInfo) SetVersion(v string) *GetApiListApiInfo {
	s.Version = &v
	return s
}

type GetApiListAuthConfig struct {
	// {"en":"Authentication parameter name.", "zh_CN":"鉴权参数名称。"}
	AuthParamName *string `json:"authParamName,omitempty" xml:"authParamName,omitempty"`
	// {"en":"Authentication parameter location.", "zh_CN":"鉴权参数位置。"}
	AuthParamSite *string `json:"authParamSite,omitempty" xml:"authParamSite,omitempty"`
	// {"en":"Authentication method.", "zh_CN":"鉴权方法。"}
	AuthType *string `json:"authType,omitempty" xml:"authType,omitempty"`
	// {"en":"Authentication Token Validity Period(second)", "zh_CN":"鉴权有效期（s）。"}
	AuthValidityTime *int `json:"authValidityTime,omitempty" xml:"authValidityTime,omitempty"`
}

func (s GetApiListAuthConfig) String() string {
	return tea.Prettify(s)
}

func (s GetApiListAuthConfig) GoString() string {
	return s.String()
}

func (s *GetApiListAuthConfig) SetAuthParamName(v string) *GetApiListAuthConfig {
	s.AuthParamName = &v
	return s
}

func (s *GetApiListAuthConfig) SetAuthParamSite(v string) *GetApiListAuthConfig {
	s.AuthParamSite = &v
	return s
}

func (s *GetApiListAuthConfig) SetAuthType(v string) *GetApiListAuthConfig {
	s.AuthType = &v
	return s
}

func (s *GetApiListAuthConfig) SetAuthValidityTime(v int) *GetApiListAuthConfig {
	s.AuthValidityTime = &v
	return s
}

type GetApiListRequestBodyConfig struct {
	// {"en":"Maximum body limit(bytes).", "zh_CN":"Body最大限制(bytes)。"}
	BodyLimitMax *int `json:"bodyLimitMax,omitempty" xml:"bodyLimitMax,omitempty"`
	// {"en":"HTTP content type of the response.", "zh_CN":"内容类型Content-Type。"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// {"en":"Maximum nesting depth.", "zh_CN":"最大嵌套层数。"}
	NestMax *int `json:"nestMax,omitempty" xml:"nestMax,omitempty"`
	// {"en":"Maximum number of parameters for JSON.", "zh_CN":"Json最大参数个数。"}
	ParamsCountMax *int `json:"paramsCountMax,omitempty" xml:"paramsCountMax,omitempty"`
	// {"en":"Parameter limit switch.", "zh_CN":"参数限制开关。"}
	ParamsLimitSwitch *bool `json:"paramsLimitSwitch,omitempty" xml:"paramsLimitSwitch,omitempty"`
	// {"en":"Query string parameter detection mode.", "zh_CN":"query string参数检测模式。"}
	ParamsProcessingModel *string `json:"paramsProcessingModel,omitempty" xml:"paramsProcessingModel,omitempty"`
	// {"en":"Request body limit switch.", "zh_CN":"请求Body限制开关。"}
	RequestBodyLimitSwitch *bool `json:"requestBodyLimitSwitch,omitempty" xml:"requestBodyLimitSwitch,omitempty"`
	// {"en":"The action to execute when a rule is matched,default value:2.
	// 1:Block
	// 2:Log
	// 3:Sign", "zh_CN":"处理动作，默认值：2。
	// 1：拦截
	// 2：监控
	// 3：标记"}
	RequestProcessingAction *string `json:"requestProcessingAction,omitempty" xml:"requestProcessingAction,omitempty"`
}

func (s GetApiListRequestBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s GetApiListRequestBodyConfig) GoString() string {
	return s.String()
}

func (s *GetApiListRequestBodyConfig) SetBodyLimitMax(v int) *GetApiListRequestBodyConfig {
	s.BodyLimitMax = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetContentType(v string) *GetApiListRequestBodyConfig {
	s.ContentType = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetNestMax(v int) *GetApiListRequestBodyConfig {
	s.NestMax = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetParamsCountMax(v int) *GetApiListRequestBodyConfig {
	s.ParamsCountMax = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetParamsLimitSwitch(v bool) *GetApiListRequestBodyConfig {
	s.ParamsLimitSwitch = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetParamsProcessingModel(v string) *GetApiListRequestBodyConfig {
	s.ParamsProcessingModel = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetRequestBodyLimitSwitch(v bool) *GetApiListRequestBodyConfig {
	s.RequestBodyLimitSwitch = &v
	return s
}

func (s *GetApiListRequestBodyConfig) SetRequestProcessingAction(v string) *GetApiListRequestBodyConfig {
	s.RequestProcessingAction = &v
	return s
}

type GetApiListApiParamsLimit struct {
	// {"en":"API ID", "zh_CN":"API ID。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty" require:"true"`
	// {"en":"Body parameter.", "zh_CN":"Body参数。"}
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// {"en":"Whether to define body parameter.", "zh_CN":"否定义Body参数。"}
	BodyFlag *bool `json:"bodyFlag,omitempty" xml:"bodyFlag,omitempty" require:"true"`
	// {"en":"Body parameter type,default value:FORM.
	// FORM:Form
	// JSON_XML:Json format definition", "zh_CN":"Body参数类型，默认值：FORM。
	// FORM：Form表单
	// JSON_XML：Json格式定义"}
	BodyType *string `json:"bodyType,omitempty" xml:"bodyType,omitempty" require:"true"`
	// {"en":"Create time,format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Data ID.", "zh_CN":"数据ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Parameter limit.", "zh_CN":"参数限制。"}
	ParamsLimit *string `json:"paramsLimit,omitempty" xml:"paramsLimit,omitempty" require:"true"`
	// {"en":"Request method,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true"`
	// {"en":"Update time,format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"修改时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s GetApiListApiParamsLimit) String() string {
	return tea.Prettify(s)
}

func (s GetApiListApiParamsLimit) GoString() string {
	return s.String()
}

func (s *GetApiListApiParamsLimit) SetApiId(v string) *GetApiListApiParamsLimit {
	s.ApiId = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetBody(v string) *GetApiListApiParamsLimit {
	s.Body = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetBodyFlag(v bool) *GetApiListApiParamsLimit {
	s.BodyFlag = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetBodyType(v string) *GetApiListApiParamsLimit {
	s.BodyType = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetCreateTime(v string) *GetApiListApiParamsLimit {
	s.CreateTime = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetId(v string) *GetApiListApiParamsLimit {
	s.Id = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetParamsLimit(v string) *GetApiListApiParamsLimit {
	s.ParamsLimit = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetRequestMethod(v string) *GetApiListApiParamsLimit {
	s.RequestMethod = &v
	return s
}

func (s *GetApiListApiParamsLimit) SetUpdateTime(v string) *GetApiListApiParamsLimit {
	s.UpdateTime = &v
	return s
}

type GetApiListPaths struct {
}

func (s GetApiListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetApiListPaths) GoString() string {
	return s.String()
}

type GetApiListParameters struct {
}

func (s GetApiListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetApiListParameters) GoString() string {
	return s.String()
}

type GetApiListRequestHeader struct {
}

func (s GetApiListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiListRequestHeader) GoString() string {
	return s.String()
}

type GetApiListResponseHeader struct {
}

func (s GetApiListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiListResponseHeader) GoString() string {
	return s.String()
}

type GetCustomRuleListRequest struct {
	// {"en":"Rule name, support fuzzy queries.", "zh_CN":"规则名称，支持模糊查询。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Off
	//     1: Block
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	ModeList []*int32 `json:"modeList,omitempty" xml:"modeList,omitempty" type:"Repeated"`
	// {"en":"Current page number,1 by default.", "zh_CN":"当前页数，默认1。"}
	PageNum *int32 `json:"pageNum,omitempty" xml:"pageNum,omitempty"`
	// {"en":"Number each page,the maximum 1000,10 by default.", "zh_CN":"每页数量, 最大1000，默认10。"}
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty" maximum:"1000"`
}

func (s GetCustomRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListRequest) GoString() string {
	return s.String()
}

func (s *GetCustomRuleListRequest) SetName(v string) *GetCustomRuleListRequest {
	s.Name = &v
	return s
}

func (s *GetCustomRuleListRequest) SetDomainList(v []*string) *GetCustomRuleListRequest {
	s.DomainList = v
	return s
}

func (s *GetCustomRuleListRequest) SetModeList(v []*int32) *GetCustomRuleListRequest {
	s.ModeList = v
	return s
}

func (s *GetCustomRuleListRequest) SetPageNum(v int32) *GetCustomRuleListRequest {
	s.PageNum = &v
	return s
}

func (s *GetCustomRuleListRequest) SetPageSize(v int32) *GetCustomRuleListRequest {
	s.PageSize = &v
	return s
}

type GetCustomRuleListResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data *GetCustomRuleListCustomRulePage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetCustomRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetCustomRuleListResponse) SetCode(v string) *GetCustomRuleListResponse {
	s.Code = &v
	return s
}

func (s *GetCustomRuleListResponse) SetMessage(v string) *GetCustomRuleListResponse {
	s.Message = &v
	return s
}

func (s *GetCustomRuleListResponse) SetData(v *GetCustomRuleListCustomRulePage) *GetCustomRuleListResponse {
	s.Data = v
	return s
}

type GetCustomRuleListCustomRulePage struct {
	// {"en":"The total number of data.", "zh_CN":"总条数。"}
	Total *int32 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"Total number of pages.", "zh_CN":"总页数。"}
	Pages *int32 `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int32 `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"Number each page.", "zh_CN":"每页数量。"}
	Size *int32 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"Template information,array.", "zh_CN":"数据列表，数组。"}
	Records []*GetCustomRuleListCustomRule `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetCustomRuleListCustomRulePage) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListCustomRulePage) GoString() string {
	return s.String()
}

func (s *GetCustomRuleListCustomRulePage) SetTotal(v int32) *GetCustomRuleListCustomRulePage {
	s.Total = &v
	return s
}

func (s *GetCustomRuleListCustomRulePage) SetPages(v int32) *GetCustomRuleListCustomRulePage {
	s.Pages = &v
	return s
}

func (s *GetCustomRuleListCustomRulePage) SetCurrent(v int32) *GetCustomRuleListCustomRulePage {
	s.Current = &v
	return s
}

func (s *GetCustomRuleListCustomRulePage) SetSize(v int32) *GetCustomRuleListCustomRulePage {
	s.Size = &v
	return s
}

func (s *GetCustomRuleListCustomRulePage) SetRecords(v []*GetCustomRuleListCustomRule) *GetCustomRuleListCustomRulePage {
	s.Records = v
	return s
}

type GetCustomRuleListCustomRule struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Off
	//     1: Block
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Regular expressions.", "zh_CN":"正则表达式。"}
	RuleReg *string `json:"ruleReg,omitempty" xml:"ruleReg,omitempty" require:"true"`
	// {"en":"Rule description.", "zh_CN":"规则描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Matching area,array,
	//     url:URL(without param)
	//     urlParam:URL Param
	//     headers:Headers
	//     body:Body
	//     response:Response
	//     fileExt:Upload File Extension
	//     fileContent:Upload File Content", "zh_CN":"匹配区域，数组，
	//     url：URL（不含参数）
	//     urlParam：URL参数
	//     headers：请求头
	//     body：请求体
	//     response：响应体
	//     fileExt：上传文件后缀
	//     fileContent：上传文件内容"}
	MatchZoneMerge []*string `json:"matchZoneMerge,omitempty" xml:"matchZoneMerge,omitempty" require:"true" type:"Repeated"`
	// {"en":"Status codek,English half width comma splicing.
	//     2: 2xx
	//     3: 3xx
	//     4: 4xx
	//     5: 5xx", "zh_CN":"状态码，英文半角逗号分隔。
	//     2：2xx
	//     3：3xx
	//     4：4xx
	//     5：5xx"}
	StatusCode *string `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetCustomRuleListCustomRule) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListCustomRule) GoString() string {
	return s.String()
}

func (s *GetCustomRuleListCustomRule) SetRuleId(v int32) *GetCustomRuleListCustomRule {
	s.RuleId = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetRuleName(v string) *GetCustomRuleListCustomRule {
	s.RuleName = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetMode(v int32) *GetCustomRuleListCustomRule {
	s.Mode = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetRuleReg(v string) *GetCustomRuleListCustomRule {
	s.RuleReg = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetMsg(v string) *GetCustomRuleListCustomRule {
	s.Msg = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetMatchZoneMerge(v []*string) *GetCustomRuleListCustomRule {
	s.MatchZoneMerge = v
	return s
}

func (s *GetCustomRuleListCustomRule) SetStatusCode(v string) *GetCustomRuleListCustomRule {
	s.StatusCode = &v
	return s
}

func (s *GetCustomRuleListCustomRule) SetDomainList(v []*string) *GetCustomRuleListCustomRule {
	s.DomainList = v
	return s
}

type GetCustomRuleListPaths struct {
}

func (s GetCustomRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListPaths) GoString() string {
	return s.String()
}

type GetCustomRuleListParameters struct {
}

func (s GetCustomRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListParameters) GoString() string {
	return s.String()
}

type GetCustomRuleListRequestHeader struct {
}

func (s GetCustomRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListRequestHeader) GoString() string {
	return s.String()
}

type GetCustomRuleListResponseHeader struct {
}

func (s GetCustomRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetCustomRuleListResponseHeader) GoString() string {
	return s.String()
}

type DeleteQuotaRuleRequest struct {
	// {"en":"List of quota rule ID to delete.", "zh_CN":"要删除的配额规则ID列表。"}
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteQuotaRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteQuotaRuleRequest) SetIds(v []*string) *DeleteQuotaRuleRequest {
	s.Ids = v
	return s
}

type DeleteQuotaRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"List of deleted quota rule name.", "zh_CN":"被删除的配额规则名称列表。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteQuotaRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteQuotaRuleResponse) SetCode(v int) *DeleteQuotaRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteQuotaRuleResponse) SetMsg(v string) *DeleteQuotaRuleResponse {
	s.Msg = &v
	return s
}

func (s *DeleteQuotaRuleResponse) SetData(v []*string) *DeleteQuotaRuleResponse {
	s.Data = v
	return s
}

type DeleteQuotaRulePaths struct {
}

func (s DeleteQuotaRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRulePaths) GoString() string {
	return s.String()
}

type DeleteQuotaRuleParameters struct {
}

func (s DeleteQuotaRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRuleParameters) GoString() string {
	return s.String()
}

type DeleteQuotaRuleRequestHeader struct {
}

func (s DeleteQuotaRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRuleRequestHeader) GoString() string {
	return s.String()
}

type DeleteQuotaRuleResponseHeader struct {
}

func (s DeleteQuotaRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteQuotaRuleResponseHeader) GoString() string {
	return s.String()
}

type QueryExactRuleListByDomainRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Related domain.", "zh_CN":"关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryExactRuleListByDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainRequest) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListByDomainRequest) SetServiceType(v string) *QueryExactRuleListByDomainRequest {
	s.ServiceType = &v
	return s
}

func (s *QueryExactRuleListByDomainRequest) SetDomainList(v []*string) *QueryExactRuleListByDomainRequest {
	s.DomainList = v
	return s
}

type QueryExactRuleListByDomainResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *QueryExactRuleListByDomainResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryExactRuleListByDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainResponse) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListByDomainResponse) SetCode(v string) *QueryExactRuleListByDomainResponse {
	s.Code = &v
	return s
}

func (s *QueryExactRuleListByDomainResponse) SetMessage(v string) *QueryExactRuleListByDomainResponse {
	s.Message = &v
	return s
}

func (s *QueryExactRuleListByDomainResponse) SetData(v *QueryExactRuleListByDomainResp) *QueryExactRuleListByDomainResponse {
	s.Data = v
	return s
}

type QueryExactRuleListByDomainResp struct {
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule Name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule Description.", "zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Action.
	//  0:Bypass
	// 1:Block
	//  2:Log ", "zh_CN":"处理动作。
	//  0：放行
	//  1：拦截
	//  2：监控"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Match QueryExactRuleListByDomainCondition.", "zh_CN":"匹配条件。"}
	DeployContent []*QueryExactRuleListByDomainCondition `json:"deployContent,omitempty" xml:"deployContent,omitempty" require:"true" type:"Repeated"`
}

func (s QueryExactRuleListByDomainResp) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainResp) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListByDomainResp) SetRuleId(v string) *QueryExactRuleListByDomainResp {
	s.RuleId = &v
	return s
}

func (s *QueryExactRuleListByDomainResp) SetRuleName(v string) *QueryExactRuleListByDomainResp {
	s.RuleName = &v
	return s
}

func (s *QueryExactRuleListByDomainResp) SetRuleDescription(v string) *QueryExactRuleListByDomainResp {
	s.RuleDescription = &v
	return s
}

func (s *QueryExactRuleListByDomainResp) SetAction(v string) *QueryExactRuleListByDomainResp {
	s.Action = &v
	return s
}

func (s *QueryExactRuleListByDomainResp) SetDeployContent(v []*QueryExactRuleListByDomainCondition) *QueryExactRuleListByDomainResp {
	s.DeployContent = v
	return s
}

type QueryExactRuleListByDomainCondition struct {
	// {"en":"Matching condition type.
	//  0:IP
	//  1:IP Segment
	//  2:URI
	//  3:User-Agent
	//  4:Cookie
	//  5:Referer
	//  6:HTTP Header
	//  7:Area
	//  8:HTTP Method
	//  9:Path  ", "zh_CN":"匹配条件类型。0：IP
	//  1：IP段
	//  2：URI
	//  3：User-agent
	//  4：Cookie
	//  5：Referer
	//  6：HTTP Header
	//   7：区域
	//  8：请求方法
	//  9：路径 "}
	MatchCondition *string `json:"matchCondition,omitempty" xml:"matchCondition,omitempty" require:"true"`
	// {"en":"Matching condition operation.
	//  0:=
	//  1:!=
	//  2:Empty or doesn't exist
	//  3:=(Regex)
	//  4:!=(Regex) ", "zh_CN":"匹配条件操作。
	//  0：=
	//  1：!=
	//  2：为空或不存在
	//  3：=正则
	//  4：!=正则 "}
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// {"en":"First QueryExactRuleListByDomainCondition.", "zh_CN":"第一匹配条件值。"}
	FirstCondition *string `json:"firstCondition,omitempty" xml:"firstCondition,omitempty"`
	// {"en":"Second QueryExactRuleListByDomainCondition.", "zh_CN":"第二匹配条件值。"}
	SecondCondition *string `json:"secondCondition,omitempty" xml:"secondCondition,omitempty"`
}

func (s QueryExactRuleListByDomainCondition) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainCondition) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListByDomainCondition) SetMatchCondition(v string) *QueryExactRuleListByDomainCondition {
	s.MatchCondition = &v
	return s
}

func (s *QueryExactRuleListByDomainCondition) SetOperator(v string) *QueryExactRuleListByDomainCondition {
	s.Operator = &v
	return s
}

func (s *QueryExactRuleListByDomainCondition) SetFirstCondition(v string) *QueryExactRuleListByDomainCondition {
	s.FirstCondition = &v
	return s
}

func (s *QueryExactRuleListByDomainCondition) SetSecondCondition(v string) *QueryExactRuleListByDomainCondition {
	s.SecondCondition = &v
	return s
}

type QueryExactRuleListByDomainPaths struct {
}

func (s QueryExactRuleListByDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainPaths) GoString() string {
	return s.String()
}

type QueryExactRuleListByDomainParameters struct {
}

func (s QueryExactRuleListByDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainParameters) GoString() string {
	return s.String()
}

type QueryExactRuleListByDomainRequestHeader struct {
}

func (s QueryExactRuleListByDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainRequestHeader) GoString() string {
	return s.String()
}

type QueryExactRuleListByDomainResponseHeader struct {
}

func (s QueryExactRuleListByDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListByDomainResponseHeader) GoString() string {
	return s.String()
}

type UpdateDomainBuiltInRulesRequest struct {
	// {"en":"data","zh_CN":"data"}
	Data []*UpdateDomainBuiltInRulesRequestData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDomainBuiltInRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesRequest) GoString() string {
	return s.String()
}

func (s *UpdateDomainBuiltInRulesRequest) SetData(v []*UpdateDomainBuiltInRulesRequestData) *UpdateDomainBuiltInRulesRequest {
	s.Data = v
	return s
}

type UpdateDomainBuiltInRulesRequestData struct {
	// {"en":"domain","zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"ruleId","zh_CN":"规则ID"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Security level, default enabled: 'DEFAULT_ ENABLE ', enable during attack:' ATTACK_ ENABLE ', basic off:' BASE_ Close ', permanently closed:' Close '","zh_CN":"安全级别，默认启用:'DEFAULT_ENABLE'，攻击时启用：'ATTACK_ENABLE'，基本关闭：'BASE_CLOSE'，永久关闭:'CLOSE'","exampleValue":"DEFAULT_ENABLE,ATTACK_ENABLE,BASE_CLOSE,CLOSE"}
	SecurityLevel *string `json:"securityLevel,omitempty" xml:"securityLevel,omitempty" require:"true"`
	// {"en":"mode: BLOCK: 'Protect(Default)', RR: 'Protect(Managed)', LOG: 'Monitor'","zh_CN":"模式: BLOCK:'防护(默认)，拦截' ,RR:'防护(托管)', LOG:'观察'","exampleValue":"BLOCK,RR,LOG"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s UpdateDomainBuiltInRulesRequestData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesRequestData) GoString() string {
	return s.String()
}

func (s *UpdateDomainBuiltInRulesRequestData) SetDomain(v string) *UpdateDomainBuiltInRulesRequestData {
	s.Domain = &v
	return s
}

func (s *UpdateDomainBuiltInRulesRequestData) SetRuleId(v string) *UpdateDomainBuiltInRulesRequestData {
	s.RuleId = &v
	return s
}

func (s *UpdateDomainBuiltInRulesRequestData) SetSecurityLevel(v string) *UpdateDomainBuiltInRulesRequestData {
	s.SecurityLevel = &v
	return s
}

func (s *UpdateDomainBuiltInRulesRequestData) SetAction(v string) *UpdateDomainBuiltInRulesRequestData {
	s.Action = &v
	return s
}

type UpdateDomainBuiltInRulesRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateDomainBuiltInRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateDomainBuiltInRulesRequestHeader) SetServiceType(v string) *UpdateDomainBuiltInRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateDomainBuiltInRulesPaths struct {
}

func (s UpdateDomainBuiltInRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesPaths) GoString() string {
	return s.String()
}

type UpdateDomainBuiltInRulesParameters struct {
}

func (s UpdateDomainBuiltInRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesParameters) GoString() string {
	return s.String()
}

type UpdateDomainBuiltInRulesResponse struct {
	// {"en":"code","zh_CN":"code"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"msg","zh_CN":"msg"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateDomainBuiltInRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesResponse) GoString() string {
	return s.String()
}

func (s *UpdateDomainBuiltInRulesResponse) SetCode(v int) *UpdateDomainBuiltInRulesResponse {
	s.Code = &v
	return s
}

func (s *UpdateDomainBuiltInRulesResponse) SetMsg(v string) *UpdateDomainBuiltInRulesResponse {
	s.Msg = &v
	return s
}

type UpdateDomainBuiltInRulesResponseHeader struct {
}

func (s UpdateDomainBuiltInRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBuiltInRulesResponseHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceDeleteRequest struct {
	// {"en":"id（cname）", "zh_CN":"id（查询cname）"}
	Ids *string `json:"ids,omitempty" xml:"ids,omitempty" require:"true"`
}

func (s WssMPNetworkServiceDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeleteRequest) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceDeleteRequest) SetIds(v string) *WssMPNetworkServiceDeleteRequest {
	s.Ids = &v
	return s
}

type WssMPNetworkServiceDeleteResponse struct {
	// {"en":"200:success other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s WssMPNetworkServiceDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeleteResponse) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceDeleteResponse) SetCode(v string) *WssMPNetworkServiceDeleteResponse {
	s.Code = &v
	return s
}

func (s *WssMPNetworkServiceDeleteResponse) SetMsg(v string) *WssMPNetworkServiceDeleteResponse {
	s.Msg = &v
	return s
}

type WssMPNetworkServiceDeletePaths struct {
}

func (s WssMPNetworkServiceDeletePaths) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeletePaths) GoString() string {
	return s.String()
}

type WssMPNetworkServiceDeleteParameters struct {
}

func (s WssMPNetworkServiceDeleteParameters) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeleteParameters) GoString() string {
	return s.String()
}

type WssMPNetworkServiceDeleteRequestHeader struct {
}

func (s WssMPNetworkServiceDeleteRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeleteRequestHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceDeleteResponseHeader struct {
}

func (s WssMPNetworkServiceDeleteResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceDeleteResponseHeader) GoString() string {
	return s.String()
}

type UpdateBotFunctionSwitchRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Client-based Detection function switch.
	// ON: Enabled
	// OFF: Disabled', 'zh_CN':'客户端风险检测功能开关。
	// ON：开启
	// OFF：关闭'}
	SceneAnalyseSwitch *string `json:"sceneAnalyseSwitch,omitempty" xml:"sceneAnalyseSwitch,omitempty"`
	// {'en':'Workflow Detection function switch.
	// ON: Enabled
	// OFF: Disabled', 'zh_CN':'业务流检测功能开关。
	// ON：开启
	// OFF：关闭'}
	BehaviorAnalyseSwitch *string `json:"behaviorAnalyseSwitch,omitempty" xml:"behaviorAnalyseSwitch,omitempty"`
}

func (s UpdateBotFunctionSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchRequest) GoString() string {
	return s.String()
}

func (s *UpdateBotFunctionSwitchRequest) SetDomain(v string) *UpdateBotFunctionSwitchRequest {
	s.Domain = &v
	return s
}

func (s *UpdateBotFunctionSwitchRequest) SetSceneAnalyseSwitch(v string) *UpdateBotFunctionSwitchRequest {
	s.SceneAnalyseSwitch = &v
	return s
}

func (s *UpdateBotFunctionSwitchRequest) SetBehaviorAnalyseSwitch(v string) *UpdateBotFunctionSwitchRequest {
	s.BehaviorAnalyseSwitch = &v
	return s
}

type UpdateBotFunctionSwitchResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateBotFunctionSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchResponse) GoString() string {
	return s.String()
}

func (s *UpdateBotFunctionSwitchResponse) SetCode(v string) *UpdateBotFunctionSwitchResponse {
	s.Code = &v
	return s
}

func (s *UpdateBotFunctionSwitchResponse) SetMsg(v string) *UpdateBotFunctionSwitchResponse {
	s.Msg = &v
	return s
}

type UpdateBotFunctionSwitchPaths struct {
}

func (s UpdateBotFunctionSwitchPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchPaths) GoString() string {
	return s.String()
}

type UpdateBotFunctionSwitchParameters struct {
}

func (s UpdateBotFunctionSwitchParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchParameters) GoString() string {
	return s.String()
}

type UpdateBotFunctionSwitchRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateBotFunctionSwitchRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateBotFunctionSwitchRequestHeader) SetServiceType(v string) *UpdateBotFunctionSwitchRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateBotFunctionSwitchResponseHeader struct {
}

func (s UpdateBotFunctionSwitchResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBotFunctionSwitchResponseHeader) GoString() string {
	return s.String()
}

type ListRecommendationsRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"WAF rule ID list.","zh_CN":"WAF规则ID列表。"}
	RuleIdList []*int `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
}

func (s ListRecommendationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsRequest) GoString() string {
	return s.String()
}

func (s *ListRecommendationsRequest) SetDomainList(v []*string) *ListRecommendationsRequest {
	s.DomainList = v
	return s
}

func (s *ListRecommendationsRequest) SetRuleIdList(v []*int) *ListRecommendationsRequest {
	s.RuleIdList = v
	return s
}

type ListRecommendationsRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListRecommendationsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListRecommendationsRequestHeader) SetServiceType(v string) *ListRecommendationsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListRecommendationsPaths struct {
}

func (s ListRecommendationsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsPaths) GoString() string {
	return s.String()
}

type ListRecommendationsParameters struct {
}

func (s ListRecommendationsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsParameters) GoString() string {
	return s.String()
}

type ListRecommendationsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListRecommendationsResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListRecommendationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsResponse) GoString() string {
	return s.String()
}

func (s *ListRecommendationsResponse) SetCode(v string) *ListRecommendationsResponse {
	s.Code = &v
	return s
}

func (s *ListRecommendationsResponse) SetMsg(v string) *ListRecommendationsResponse {
	s.Msg = &v
	return s
}

func (s *ListRecommendationsResponse) SetData(v []*ListRecommendationsResponseData) *ListRecommendationsResponse {
	s.Data = v
	return s
}

type ListRecommendationsResponseData struct {
	// {"en":"Rule suggestion ID.","zh_CN":"规则建议ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Matching conditions.\nip: IP\npath: Path\nuri: URI\nurlParamName: URI Parameter Name\nurlParamValue: URI Parameter Value\nuserAgent: User Agent\nhttpHeaderName: Request Header Name\nhttpHeaderValue: Request Header Value\ncookie: Cookie\nbody: Body\nbodyParamName: Body Parameter Name\nbodyParamValue: Body Parameter Value","zh_CN":"匹配条件。\nip：IP\npath：路径\nuri：URI\nurlParamName：URI参数名\nurlParamValue：URI参数值\nuserAgent：User Agent\nhttpHeaderName：请求头部名称\nhttpHeaderValue：请求头部值\ncookie：Cookie\nbody：Body\nbodyParamName：Body参数名\nbodyParamValue：Body参数值","exampleValue":"ip,path,uri,urlParamName,urlParamValue,userAgent,httpHeaderName,httpHeaderValue,cookie,body,bodyParamName,bodyParamValue"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Match type,Currently only EQUAL,IP can only be EQUAL.\nEQUAL: Equal\nCONTAIN: Contains\nREGEX: Regular match","zh_CN":"匹配类型，当前只有EQUAL，IP只能是EQUAL。\nEQUAL：等于\nCONTAIN：包含\nREGEX：正则匹配","exampleValue":"EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Rule exceptions,CONTAIN and REGEX are not case sensitive.","zh_CN":"规则例外内容，包含和正则匹配大小写不敏感。"}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// {"en":"Status.\nTODO: Pending\nREJECTED: Rejected","zh_CN":"状态。\nTODO：待处理\nREJECTED：已拒绝","exampleValue":"TODO,REJECTED"}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {"en":"Update time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s ListRecommendationsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsResponseData) GoString() string {
	return s.String()
}

func (s *ListRecommendationsResponseData) SetId(v string) *ListRecommendationsResponseData {
	s.Id = &v
	return s
}

func (s *ListRecommendationsResponseData) SetDomain(v string) *ListRecommendationsResponseData {
	s.Domain = &v
	return s
}

func (s *ListRecommendationsResponseData) SetRuleId(v int) *ListRecommendationsResponseData {
	s.RuleId = &v
	return s
}

func (s *ListRecommendationsResponseData) SetType(v string) *ListRecommendationsResponseData {
	s.Type = &v
	return s
}

func (s *ListRecommendationsResponseData) SetMatchType(v string) *ListRecommendationsResponseData {
	s.MatchType = &v
	return s
}

func (s *ListRecommendationsResponseData) SetContent(v string) *ListRecommendationsResponseData {
	s.Content = &v
	return s
}

func (s *ListRecommendationsResponseData) SetStatus(v string) *ListRecommendationsResponseData {
	s.Status = &v
	return s
}

func (s *ListRecommendationsResponseData) SetUpdateTime(v string) *ListRecommendationsResponseData {
	s.UpdateTime = &v
	return s
}

type ListRecommendationsResponseHeader struct {
}

func (s ListRecommendationsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListRecommendationsResponseHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForRuleExceptionRequest struct {
	// {"en":"Exception ID, array.", "zh_CN":"例外ID，数组。"}
	TemplateIdList []*int32 `json:"templateIdList,omitempty" xml:"templateIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"The domains which the rule exception is to be associated, array.", "zh_CN":"要关联规则例外的域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s AssociateDomainsForRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForRuleExceptionRequest) SetTemplateIdList(v []*int32) *AssociateDomainsForRuleExceptionRequest {
	s.TemplateIdList = v
	return s
}

func (s *AssociateDomainsForRuleExceptionRequest) SetDomainList(v []*string) *AssociateDomainsForRuleExceptionRequest {
	s.DomainList = v
	return s
}

type AssociateDomainsForRuleExceptionResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s AssociateDomainsForRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForRuleExceptionResponse) SetCode(v string) *AssociateDomainsForRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *AssociateDomainsForRuleExceptionResponse) SetMessage(v string) *AssociateDomainsForRuleExceptionResponse {
	s.Message = &v
	return s
}

type AssociateDomainsForRuleExceptionPaths struct {
}

func (s AssociateDomainsForRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionPaths) GoString() string {
	return s.String()
}

type AssociateDomainsForRuleExceptionParameters struct {
}

func (s AssociateDomainsForRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionParameters) GoString() string {
	return s.String()
}

type AssociateDomainsForRuleExceptionRequestHeader struct {
}

func (s AssociateDomainsForRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForRuleExceptionResponseHeader struct {
}

func (s AssociateDomainsForRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type GetBotFunctionSwitchRequest struct {
	// {'en':'Hostname list.', 'zh_CN':'域名列表。'}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetBotFunctionSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchRequest) GoString() string {
	return s.String()
}

func (s *GetBotFunctionSwitchRequest) SetDomainList(v []*string) *GetBotFunctionSwitchRequest {
	s.DomainList = v
	return s
}

type GetBotFunctionSwitchResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Data.', 'zh_CN':'出参数据。'}
	Data []*GetBotFunctionSwitchBotManageConfigVO `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetBotFunctionSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchResponse) GoString() string {
	return s.String()
}

func (s *GetBotFunctionSwitchResponse) SetCode(v string) *GetBotFunctionSwitchResponse {
	s.Code = &v
	return s
}

func (s *GetBotFunctionSwitchResponse) SetMsg(v string) *GetBotFunctionSwitchResponse {
	s.Msg = &v
	return s
}

func (s *GetBotFunctionSwitchResponse) SetData(v []*GetBotFunctionSwitchBotManageConfigVO) *GetBotFunctionSwitchResponse {
	s.Data = v
	return s
}

type GetBotFunctionSwitchBotManageConfigVO struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Client-based Detection function switch.
	// ON:Enabled
	// OFF:Disabled', 'zh_CN':'客户端风险检测功能开关。
	// ON：开启
	// OFF：关闭'}
	SceneAnalyseSwitch *string `json:"sceneAnalyseSwitch,omitempty" xml:"sceneAnalyseSwitch,omitempty" require:"true"`
	// {'en':'Workflow Detection function switch.
	// ON:Enabled
	// OFF:Disabled', 'zh_CN':'业务流检测功能开关。
	// ON：开启
	// OFF：关闭'}
	BehaviorAnalyseSwitch *string `json:"behaviorAnalyseSwitch,omitempty" xml:"behaviorAnalyseSwitch,omitempty" require:"true"`
}

func (s GetBotFunctionSwitchBotManageConfigVO) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchBotManageConfigVO) GoString() string {
	return s.String()
}

func (s *GetBotFunctionSwitchBotManageConfigVO) SetDomain(v string) *GetBotFunctionSwitchBotManageConfigVO {
	s.Domain = &v
	return s
}

func (s *GetBotFunctionSwitchBotManageConfigVO) SetSceneAnalyseSwitch(v string) *GetBotFunctionSwitchBotManageConfigVO {
	s.SceneAnalyseSwitch = &v
	return s
}

func (s *GetBotFunctionSwitchBotManageConfigVO) SetBehaviorAnalyseSwitch(v string) *GetBotFunctionSwitchBotManageConfigVO {
	s.BehaviorAnalyseSwitch = &v
	return s
}

type GetBotFunctionSwitchPaths struct {
}

func (s GetBotFunctionSwitchPaths) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchPaths) GoString() string {
	return s.String()
}

type GetBotFunctionSwitchParameters struct {
}

func (s GetBotFunctionSwitchParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchParameters) GoString() string {
	return s.String()
}

type GetBotFunctionSwitchRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetBotFunctionSwitchRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchRequestHeader) GoString() string {
	return s.String()
}

func (s *GetBotFunctionSwitchRequestHeader) SetServiceType(v string) *GetBotFunctionSwitchRequestHeader {
	s.ServiceType = &v
	return s
}

type GetBotFunctionSwitchResponseHeader struct {
}

func (s GetBotFunctionSwitchResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBotFunctionSwitchResponseHeader) GoString() string {
	return s.String()
}

type UsingExistingHostnameToAddNewHostnameRequest struct {
	// {"en":"Referenced domain.","zh_CN":"被参照域名。"}
	SourceDomain *string `json:"sourceDomain,omitempty" xml:"sourceDomain,omitempty" require:"true"`
	// {"en":"Target domains, up to 100 domains.","zh_CN":"目标域名，最多100个域名。"}
	TargetDomains []*string `json:"targetDomains,omitempty" xml:"targetDomains,omitempty" require:"true" type:"Repeated"`
}

func (s UsingExistingHostnameToAddNewHostnameRequest) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnameRequest) GoString() string {
	return s.String()
}

func (s *UsingExistingHostnameToAddNewHostnameRequest) SetSourceDomain(v string) *UsingExistingHostnameToAddNewHostnameRequest {
	s.SourceDomain = &v
	return s
}

func (s *UsingExistingHostnameToAddNewHostnameRequest) SetTargetDomains(v []*string) *UsingExistingHostnameToAddNewHostnameRequest {
	s.TargetDomains = v
	return s
}

type UsingExistingHostnameToAddNewHostnameRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UsingExistingHostnameToAddNewHostnameRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnameRequestHeader) GoString() string {
	return s.String()
}

func (s *UsingExistingHostnameToAddNewHostnameRequestHeader) SetServiceType(v string) *UsingExistingHostnameToAddNewHostnameRequestHeader {
	s.ServiceType = &v
	return s
}

type UsingExistingHostnameToAddNewHostnamePaths struct {
}

func (s UsingExistingHostnameToAddNewHostnamePaths) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnamePaths) GoString() string {
	return s.String()
}

type UsingExistingHostnameToAddNewHostnameParameters struct {
}

func (s UsingExistingHostnameToAddNewHostnameParameters) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnameParameters) GoString() string {
	return s.String()
}

type UsingExistingHostnameToAddNewHostnameResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UsingExistingHostnameToAddNewHostnameResponse) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnameResponse) GoString() string {
	return s.String()
}

func (s *UsingExistingHostnameToAddNewHostnameResponse) SetCode(v string) *UsingExistingHostnameToAddNewHostnameResponse {
	s.Code = &v
	return s
}

func (s *UsingExistingHostnameToAddNewHostnameResponse) SetMsg(v string) *UsingExistingHostnameToAddNewHostnameResponse {
	s.Msg = &v
	return s
}

type UsingExistingHostnameToAddNewHostnameResponseHeader struct {
}

func (s UsingExistingHostnameToAddNewHostnameResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UsingExistingHostnameToAddNewHostnameResponseHeader) GoString() string {
	return s.String()
}

type GetApiAssetListRequest struct {
	// {"en":"List of domain.","zh_CN":"域名列表。"}
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
	// {"en":"Endpoint path.","zh_CN":"前端路径。"}
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// {"en":"The current page number.","zh_CN":"当前页。"}
	PageNum *int `json:"pageNum,omitempty" xml:"pageNum,omitempty" require:"true"`
	// {"en":"The number of records per page.","zh_CN":"页大小。"}
	PageSize *int `json:"pageSize,omitempty" xml:"pageSize,omitempty" require:"true"`
}

func (s GetApiAssetListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListRequest) GoString() string {
	return s.String()
}

func (s *GetApiAssetListRequest) SetDomains(v []*string) *GetApiAssetListRequest {
	s.Domains = v
	return s
}

func (s *GetApiAssetListRequest) SetPath(v string) *GetApiAssetListRequest {
	s.Path = &v
	return s
}

func (s *GetApiAssetListRequest) SetPageNum(v int) *GetApiAssetListRequest {
	s.PageNum = &v
	return s
}

func (s *GetApiAssetListRequest) SetPageSize(v int) *GetApiAssetListRequest {
	s.PageSize = &v
	return s
}

type GetApiAssetListRequestHeader struct {
}

func (s GetApiAssetListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListRequestHeader) GoString() string {
	return s.String()
}

type GetApiAssetListPaths struct {
}

func (s GetApiAssetListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListPaths) GoString() string {
	return s.String()
}

type GetApiAssetListParameters struct {
}

func (s GetApiAssetListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListParameters) GoString() string {
	return s.String()
}

type GetApiAssetListResponse struct {
	// {"en":"Return 200 means success.","zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.","zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"数据。"}
	Data *GetApiAssetListResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetApiAssetListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListResponse) GoString() string {
	return s.String()
}

func (s *GetApiAssetListResponse) SetCode(v int) *GetApiAssetListResponse {
	s.Code = &v
	return s
}

func (s *GetApiAssetListResponse) SetMsg(v string) *GetApiAssetListResponse {
	s.Msg = &v
	return s
}

func (s *GetApiAssetListResponse) SetData(v *GetApiAssetListResponseData) *GetApiAssetListResponse {
	s.Data = v
	return s
}

type GetApiAssetListResponseData struct {
	// {"en":"The current page number.","zh_CN":"当前页码。"}
	Current *int `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"The total number of pages.","zh_CN":"总页数。"}
	Pages *int `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The number of records per page.","zh_CN":"每页记录条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"The total number of records.","zh_CN":"总条数。"}
	Total *int `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"List of API asset discoverys.","zh_CN":"记录。"}
	Records []*GetApiAssetListResponseDataRecords `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetApiAssetListResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListResponseData) GoString() string {
	return s.String()
}

func (s *GetApiAssetListResponseData) SetCurrent(v int) *GetApiAssetListResponseData {
	s.Current = &v
	return s
}

func (s *GetApiAssetListResponseData) SetPages(v int) *GetApiAssetListResponseData {
	s.Pages = &v
	return s
}

func (s *GetApiAssetListResponseData) SetSize(v int) *GetApiAssetListResponseData {
	s.Size = &v
	return s
}

func (s *GetApiAssetListResponseData) SetTotal(v int) *GetApiAssetListResponseData {
	s.Total = &v
	return s
}

func (s *GetApiAssetListResponseData) SetRecords(v []*GetApiAssetListResponseDataRecords) *GetApiAssetListResponseData {
	s.Records = v
	return s
}

type GetApiAssetListResponseDataRecords struct {
	// {"en":"Asset discovery ID.","zh_CN":"资产发现ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Endpoint path.","zh_CN":"前端路径。"}
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// {"en":"Sensitive data labels.","zh_CN":"敏感标签。"}
	SensitiveLabels []*string `json:"sensitiveLabels,omitempty" xml:"sensitiveLabels,omitempty" require:"true" type:"Repeated"`
	// {"en":"First discovery time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"首次发现时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Last discovery time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"最新出现时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"The number of requests in 24 hours.","zh_CN":"24小时请求量。"}
	ReqCnt24H *int64 `json:"reqCnt24H,omitempty" xml:"reqCnt24H,omitempty" require:"true"`
}

func (s GetApiAssetListResponseDataRecords) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListResponseDataRecords) GoString() string {
	return s.String()
}

func (s *GetApiAssetListResponseDataRecords) SetId(v string) *GetApiAssetListResponseDataRecords {
	s.Id = &v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetDomain(v string) *GetApiAssetListResponseDataRecords {
	s.Domain = &v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetPath(v string) *GetApiAssetListResponseDataRecords {
	s.Path = &v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetSensitiveLabels(v []*string) *GetApiAssetListResponseDataRecords {
	s.SensitiveLabels = v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetCreateTime(v string) *GetApiAssetListResponseDataRecords {
	s.CreateTime = &v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetUpdateTime(v string) *GetApiAssetListResponseDataRecords {
	s.UpdateTime = &v
	return s
}

func (s *GetApiAssetListResponseDataRecords) SetReqCnt24H(v int64) *GetApiAssetListResponseDataRecords {
	s.ReqCnt24H = &v
	return s
}

type GetApiAssetListResponseHeader struct {
}

func (s GetApiAssetListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetListResponseHeader) GoString() string {
	return s.String()
}

type ListHistoricalHostnamesRequest struct {
	// {"en":"Start time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"开始时间，格式：yyyy-MM-dd HH:mm:ss。"}
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty" require:"true"`
	// {"en":"End time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"结束时间，格式：yyyy-MM-dd HH:mm:ss。"}
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_timezone","en":"Timezone,default value: GTM+8.","zh_CN":"时区，默认：GTM+8。"}
	Timezone *string `json:"timezone,omitempty" xml:"timezone,omitempty"`
}

func (s ListHistoricalHostnamesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesRequest) GoString() string {
	return s.String()
}

func (s *ListHistoricalHostnamesRequest) SetStartTime(v string) *ListHistoricalHostnamesRequest {
	s.StartTime = &v
	return s
}

func (s *ListHistoricalHostnamesRequest) SetEndTime(v string) *ListHistoricalHostnamesRequest {
	s.EndTime = &v
	return s
}

func (s *ListHistoricalHostnamesRequest) SetTimezone(v string) *ListHistoricalHostnamesRequest {
	s.Timezone = &v
	return s
}

type ListHistoricalHostnamesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListHistoricalHostnamesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListHistoricalHostnamesRequestHeader) SetServiceType(v string) *ListHistoricalHostnamesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListHistoricalHostnamesPaths struct {
}

func (s ListHistoricalHostnamesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesPaths) GoString() string {
	return s.String()
}

type ListHistoricalHostnamesParameters struct {
}

func (s ListHistoricalHostnamesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesParameters) GoString() string {
	return s.String()
}

type ListHistoricalHostnamesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListHistoricalHostnamesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesResponse) GoString() string {
	return s.String()
}

func (s *ListHistoricalHostnamesResponse) SetCode(v string) *ListHistoricalHostnamesResponse {
	s.Code = &v
	return s
}

func (s *ListHistoricalHostnamesResponse) SetMsg(v string) *ListHistoricalHostnamesResponse {
	s.Msg = &v
	return s
}

func (s *ListHistoricalHostnamesResponse) SetData(v []*string) *ListHistoricalHostnamesResponse {
	s.Data = v
	return s
}

type ListHistoricalHostnamesResponseHeader struct {
}

func (s ListHistoricalHostnamesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalHostnamesResponseHeader) GoString() string {
	return s.String()
}

type DeleteWhitelistRulesRequest struct {
	// {"en":"Rule ID List.", "zh_CN":"规则ID列表。"}
	IdList []*string `json:"idList,omitempty" xml:"idList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteWhitelistRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteWhitelistRulesRequest) SetIdList(v []*string) *DeleteWhitelistRulesRequest {
	s.IdList = v
	return s
}

type DeleteWhitelistRulesResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.", "zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteWhitelistRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteWhitelistRulesResponse) SetCode(v string) *DeleteWhitelistRulesResponse {
	s.Code = &v
	return s
}

func (s *DeleteWhitelistRulesResponse) SetMsg(v string) *DeleteWhitelistRulesResponse {
	s.Msg = &v
	return s
}

type DeleteWhitelistRulesPaths struct {
}

func (s DeleteWhitelistRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesPaths) GoString() string {
	return s.String()
}

type DeleteWhitelistRulesParameters struct {
}

func (s DeleteWhitelistRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesParameters) GoString() string {
	return s.String()
}

type DeleteWhitelistRulesRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteWhitelistRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteWhitelistRulesRequestHeader) SetServiceType(v string) *DeleteWhitelistRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteWhitelistRulesResponseHeader struct {
}

func (s DeleteWhitelistRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteWhitelistRulesResponseHeader) GoString() string {
	return s.String()
}

type DeleteCustomRuleRequest struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
}

func (s DeleteCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomRuleRequest) SetRuleId(v int32) *DeleteCustomRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteCustomRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s DeleteCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomRuleResponse) SetCode(v string) *DeleteCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteCustomRuleResponse) SetMessage(v string) *DeleteCustomRuleResponse {
	s.Message = &v
	return s
}

type DeleteCustomRulePaths struct {
}

func (s DeleteCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRulePaths) GoString() string {
	return s.String()
}

type DeleteCustomRuleParameters struct {
}

func (s DeleteCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRuleParameters) GoString() string {
	return s.String()
}

type DeleteCustomRuleRequestHeader struct {
}

func (s DeleteCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRuleRequestHeader) GoString() string {
	return s.String()
}

type DeleteCustomRuleResponseHeader struct {
}

func (s DeleteCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type CreateQuotaRuleRequest struct {
	// {"en":"Control action, default value: INTERCEPT.
	// INTERCEPT: Block
	// MONITOR: Log", "zh_CN":"控制动作，默认值：INTERCEPT。
	// INTERCEPT：拦截
	// MONITOR：监控"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *int `json:"limitDuration,omitempty" xml:"limitDuration,omitempty" require:"true"`
	// {"en":"Detailing unit.
	// h: Hour
	// d: Day
	// w: Week
	// m: Month", "zh_CN":"时长单位。
	// h：小时
	// d：天
	// w：周
	// m：月"}
	LimitUnit *string `json:"limitUnit,omitempty" xml:"limitUnit,omitempty"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"Consumer quota threshold.", "zh_CN":"消费方配额阈值。"}
	ThresholdValue *int `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty" require:"true"`
}

func (s CreateQuotaRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateQuotaRuleRequest) SetControlAction(v string) *CreateQuotaRuleRequest {
	s.ControlAction = &v
	return s
}

func (s *CreateQuotaRuleRequest) SetLimitDuration(v int) *CreateQuotaRuleRequest {
	s.LimitDuration = &v
	return s
}

func (s *CreateQuotaRuleRequest) SetLimitUnit(v string) *CreateQuotaRuleRequest {
	s.LimitUnit = &v
	return s
}

func (s *CreateQuotaRuleRequest) SetPolicyName(v string) *CreateQuotaRuleRequest {
	s.PolicyName = &v
	return s
}

func (s *CreateQuotaRuleRequest) SetRemark(v string) *CreateQuotaRuleRequest {
	s.Remark = &v
	return s
}

func (s *CreateQuotaRuleRequest) SetThresholdValue(v int) *CreateQuotaRuleRequest {
	s.ThresholdValue = &v
	return s
}

type CreateQuotaRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateQuotaRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateQuotaRuleResponse) SetCode(v int) *CreateQuotaRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateQuotaRuleResponse) SetMsg(v string) *CreateQuotaRuleResponse {
	s.Msg = &v
	return s
}

func (s *CreateQuotaRuleResponse) SetData(v map[string]interface{}) *CreateQuotaRuleResponse {
	s.Data = v
	return s
}

type CreateQuotaRulePaths struct {
}

func (s CreateQuotaRulePaths) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRulePaths) GoString() string {
	return s.String()
}

type CreateQuotaRuleParameters struct {
}

func (s CreateQuotaRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRuleParameters) GoString() string {
	return s.String()
}

type CreateQuotaRuleRequestHeader struct {
}

func (s CreateQuotaRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRuleRequestHeader) GoString() string {
	return s.String()
}

type CreateQuotaRuleResponseHeader struct {
}

func (s CreateQuotaRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRuleResponseHeader) GoString() string {
	return s.String()
}

type ListWhitelistRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Rule name, fuzzy query.","zh_CN":"规则名称，模糊查询。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s ListWhitelistRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesRequest) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesRequest) SetDomainList(v []*string) *ListWhitelistRulesRequest {
	s.DomainList = v
	return s
}

func (s *ListWhitelistRulesRequest) SetRuleName(v string) *ListWhitelistRulesRequest {
	s.RuleName = &v
	return s
}

type ListWhitelistRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListWhitelistRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesRequestHeader) SetServiceType(v string) *ListWhitelistRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListWhitelistRulesPaths struct {
}

func (s ListWhitelistRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesPaths) GoString() string {
	return s.String()
}

type ListWhitelistRulesParameters struct {
}

func (s ListWhitelistRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesParameters) GoString() string {
	return s.String()
}

type ListWhitelistRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListWhitelistRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponse) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponse) SetCode(v string) *ListWhitelistRulesResponse {
	s.Code = &v
	return s
}

func (s *ListWhitelistRulesResponse) SetMsg(v string) *ListWhitelistRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListWhitelistRulesResponse) SetData(v []*ListWhitelistRulesResponseData) *ListWhitelistRulesResponse {
	s.Data = v
	return s
}

type ListWhitelistRulesResponseData struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"Match conditions, at least one, at most five.","zh_CN":"匹配条件，至少一个，至多五个。"}
	Conditions *ListWhitelistRulesResponseDataConditions `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Struct"`
	// {"en":"Creation date, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Update date, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s ListWhitelistRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseData) SetId(v string) *ListWhitelistRulesResponseData {
	s.Id = &v
	return s
}

func (s *ListWhitelistRulesResponseData) SetDomain(v string) *ListWhitelistRulesResponseData {
	s.Domain = &v
	return s
}

func (s *ListWhitelistRulesResponseData) SetRuleName(v string) *ListWhitelistRulesResponseData {
	s.RuleName = &v
	return s
}

func (s *ListWhitelistRulesResponseData) SetDescription(v string) *ListWhitelistRulesResponseData {
	s.Description = &v
	return s
}

func (s *ListWhitelistRulesResponseData) SetConditions(v *ListWhitelistRulesResponseDataConditions) *ListWhitelistRulesResponseData {
	s.Conditions = v
	return s
}

func (s *ListWhitelistRulesResponseData) SetCreateTime(v string) *ListWhitelistRulesResponseData {
	s.CreateTime = &v
	return s
}

func (s *ListWhitelistRulesResponseData) SetUpdateTime(v string) *ListWhitelistRulesResponseData {
	s.UpdateTime = &v
	return s
}

type ListWhitelistRulesResponseDataConditions struct {
	// {"en":"IP/CIDR match conditions.","zh_CN":"IP/IP段匹配条件。"}
	IpOrIpsConditions []*ListWhitelistRulesResponseDataConditionsIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path match conditions.","zh_CN":"路径匹配条件。"}
	PathConditions []*ListWhitelistRulesResponseDataConditionsPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI match conditions.","zh_CN":"URI匹配条件。"}
	UriConditions []*ListWhitelistRulesResponseDataConditionsUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User agent match conditions.","zh_CN":"User-Agent 匹配条件。"}
	UaConditions []*ListWhitelistRulesResponseDataConditionsUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer match conditions.","zh_CN":"Referer 匹配条件。"}
	RefererConditions []*ListWhitelistRulesResponseDataConditionsRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request header match conditions.","zh_CN":"请求头匹配条件。"}
	HeaderConditions []*ListWhitelistRulesResponseDataConditionsHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditions) SetIpOrIpsConditions(v []*ListWhitelistRulesResponseDataConditionsIpOrIpsConditions) *ListWhitelistRulesResponseDataConditions {
	s.IpOrIpsConditions = v
	return s
}

func (s *ListWhitelistRulesResponseDataConditions) SetPathConditions(v []*ListWhitelistRulesResponseDataConditionsPathConditions) *ListWhitelistRulesResponseDataConditions {
	s.PathConditions = v
	return s
}

func (s *ListWhitelistRulesResponseDataConditions) SetUriConditions(v []*ListWhitelistRulesResponseDataConditionsUriConditions) *ListWhitelistRulesResponseDataConditions {
	s.UriConditions = v
	return s
}

func (s *ListWhitelistRulesResponseDataConditions) SetUaConditions(v []*ListWhitelistRulesResponseDataConditionsUaConditions) *ListWhitelistRulesResponseDataConditions {
	s.UaConditions = v
	return s
}

func (s *ListWhitelistRulesResponseDataConditions) SetRefererConditions(v []*ListWhitelistRulesResponseDataConditionsRefererConditions) *ListWhitelistRulesResponseDataConditions {
	s.RefererConditions = v
	return s
}

func (s *ListWhitelistRulesResponseDataConditions) SetHeaderConditions(v []*ListWhitelistRulesResponseDataConditionsHeaderConditions) *ListWhitelistRulesResponseDataConditions {
	s.HeaderConditions = v
	return s
}

type ListWhitelistRulesResponseDataConditionsIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsIpOrIpsConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsIpOrIpsConditions) SetIpOrIps(v []*string) *ListWhitelistRulesResponseDataConditionsIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type ListWhitelistRulesResponseDataConditionsPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.","zh_CN":"路径。"}
	ListWhitelistRulesPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsPathConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsPathConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsPathConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsPathConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsPathConditions) SetListWhitelistRulesPaths(v []*string) *ListWhitelistRulesResponseDataConditionsPathConditions {
	s.ListWhitelistRulesPaths = v
	return s
}

type ListWhitelistRulesResponseDataConditionsUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.","zh_CN":"URI。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsUriConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsUriConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsUriConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsUriConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsUriConditions) SetUri(v []*string) *ListWhitelistRulesResponseDataConditionsUriConditions {
	s.Uri = v
	return s
}

type ListWhitelistRulesResponseDataConditionsUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.","zh_CN":"User-Agent。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsUaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsUaConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsUaConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsUaConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsUaConditions) SetUa(v []*string) *ListWhitelistRulesResponseDataConditionsUaConditions {
	s.Ua = v
	return s
}

type ListWhitelistRulesResponseDataConditionsRefererConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Referer.","zh_CN":"Referer。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsRefererConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsRefererConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsRefererConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsRefererConditions) SetReferer(v []*string) *ListWhitelistRulesResponseDataConditionsRefererConditions {
	s.Referer = v
	return s
}

type ListWhitelistRulesResponseDataConditionsHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request header key.","zh_CN":"头部名称。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// {"en":"List of request header values.","zh_CN":"头部值列表。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
}

func (s ListWhitelistRulesResponseDataConditionsHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseDataConditionsHeaderConditions) GoString() string {
	return s.String()
}

func (s *ListWhitelistRulesResponseDataConditionsHeaderConditions) SetMatchType(v string) *ListWhitelistRulesResponseDataConditionsHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsHeaderConditions) SetKey(v string) *ListWhitelistRulesResponseDataConditionsHeaderConditions {
	s.Key = &v
	return s
}

func (s *ListWhitelistRulesResponseDataConditionsHeaderConditions) SetValueList(v []*string) *ListWhitelistRulesResponseDataConditionsHeaderConditions {
	s.ValueList = v
	return s
}

type ListWhitelistRulesResponseHeader struct {
}

func (s ListWhitelistRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWhitelistRulesResponseHeader) GoString() string {
	return s.String()
}

type DeleteCustomizeRuleRequest struct {
	// {'en':'Rule ID List.', 'zh_CN':'规则ID列表。'}
	IdList []*string `json:"idList,omitempty" xml:"idList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteCustomizeRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomizeRuleRequest) SetIdList(v []*string) *DeleteCustomizeRuleRequest {
	s.IdList = v
	return s
}

type DeleteCustomizeRuleResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteCustomizeRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomizeRuleResponse) SetCode(v string) *DeleteCustomizeRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteCustomizeRuleResponse) SetMsg(v string) *DeleteCustomizeRuleResponse {
	s.Msg = &v
	return s
}

type DeleteCustomizeRulePaths struct {
}

func (s DeleteCustomizeRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRulePaths) GoString() string {
	return s.String()
}

type DeleteCustomizeRuleParameters struct {
}

func (s DeleteCustomizeRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRuleParameters) GoString() string {
	return s.String()
}

type DeleteCustomizeRuleRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteCustomizeRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteCustomizeRuleRequestHeader) SetServiceType(v string) *DeleteCustomizeRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteCustomizeRuleResponseHeader struct {
}

func (s DeleteCustomizeRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizeRuleResponseHeader) GoString() string {
	return s.String()
}

type EditConsumerRequest struct {
	// {"en":"Consumer ID.", "zh_CN":"消费方ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Consumer name.", "zh_CN":"消费方名称。"}
	ConsumerName *string `json:"consumerName,omitempty" xml:"consumerName,omitempty" require:"true"`
	// {"en":"Consumer group.", "zh_CN":"消费方分组。"}
	ConsumerGroup *string `json:"consumerGroup,omitempty" xml:"consumerGroup,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s EditConsumerRequest) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerRequest) GoString() string {
	return s.String()
}

func (s *EditConsumerRequest) SetId(v string) *EditConsumerRequest {
	s.Id = &v
	return s
}

func (s *EditConsumerRequest) SetConsumerName(v string) *EditConsumerRequest {
	s.ConsumerName = &v
	return s
}

func (s *EditConsumerRequest) SetConsumerGroup(v string) *EditConsumerRequest {
	s.ConsumerGroup = &v
	return s
}

func (s *EditConsumerRequest) SetRemark(v string) *EditConsumerRequest {
	s.Remark = &v
	return s
}

type EditConsumerResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s EditConsumerResponse) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerResponse) GoString() string {
	return s.String()
}

func (s *EditConsumerResponse) SetCode(v int) *EditConsumerResponse {
	s.Code = &v
	return s
}

func (s *EditConsumerResponse) SetMsg(v string) *EditConsumerResponse {
	s.Msg = &v
	return s
}

func (s *EditConsumerResponse) SetData(v map[string]interface{}) *EditConsumerResponse {
	s.Data = v
	return s
}

type EditConsumerPaths struct {
}

func (s EditConsumerPaths) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerPaths) GoString() string {
	return s.String()
}

type EditConsumerParameters struct {
}

func (s EditConsumerParameters) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerParameters) GoString() string {
	return s.String()
}

type EditConsumerRequestHeader struct {
}

func (s EditConsumerRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerRequestHeader) GoString() string {
	return s.String()
}

type EditConsumerResponseHeader struct {
}

func (s EditConsumerResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s EditConsumerResponseHeader) GoString() string {
	return s.String()
}

type GetDomainAPISecurityConfigurationRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetDomainAPISecurityConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetDomainAPISecurityConfigurationRequest) SetDomainList(v []*string) *GetDomainAPISecurityConfigurationRequest {
	s.DomainList = v
	return s
}

type GetDomainAPISecurityConfigurationRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetDomainAPISecurityConfigurationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationRequestHeader) GoString() string {
	return s.String()
}

func (s *GetDomainAPISecurityConfigurationRequestHeader) SetServiceType(v string) *GetDomainAPISecurityConfigurationRequestHeader {
	s.ServiceType = &v
	return s
}

type GetDomainAPISecurityConfigurationPaths struct {
}

func (s GetDomainAPISecurityConfigurationPaths) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationPaths) GoString() string {
	return s.String()
}

type GetDomainAPISecurityConfigurationParameters struct {
}

func (s GetDomainAPISecurityConfigurationParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationParameters) GoString() string {
	return s.String()
}

type GetDomainAPISecurityConfigurationResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*GetDomainAPISecurityConfigurationResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetDomainAPISecurityConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetDomainAPISecurityConfigurationResponse) SetCode(v string) *GetDomainAPISecurityConfigurationResponse {
	s.Code = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponse) SetMsg(v string) *GetDomainAPISecurityConfigurationResponse {
	s.Msg = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponse) SetData(v []*GetDomainAPISecurityConfigurationResponseData) *GetDomainAPISecurityConfigurationResponse {
	s.Data = v
	return s
}

type GetDomainAPISecurityConfigurationResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"API ID.","zh_CN":"API ID。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty" require:"true"`
	// {"en":"API name.","zh_CN":"API名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"API group.","zh_CN":"API分组。"}
	GroupName *string `json:"groupName,omitempty" xml:"groupName,omitempty" require:"true"`
	// {"en":"Endpoint path.","zh_CN":"端点路径。"}
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE: Not Used\nLOG: Log\nBLOCK: Deny","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nBLOCK：拦截","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s GetDomainAPISecurityConfigurationResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationResponseData) GoString() string {
	return s.String()
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetDomain(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.Domain = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetApiId(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.ApiId = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetName(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.Name = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetGroupName(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.GroupName = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetPath(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.Path = &v
	return s
}

func (s *GetDomainAPISecurityConfigurationResponseData) SetAction(v string) *GetDomainAPISecurityConfigurationResponseData {
	s.Action = &v
	return s
}

type GetDomainAPISecurityConfigurationResponseHeader struct {
}

func (s GetDomainAPISecurityConfigurationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetDomainAPISecurityConfigurationResponseHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForCustomRuleRequest struct {
	// {"en":"Rule ID,array", "zh_CN":"规则ID，数组"}
	RuleIdList []*int32 `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"The domains which the custom rule is to be associated, array.", "zh_CN":"要关联自定义规则的域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s AssociateDomainsForCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForCustomRuleRequest) SetRuleIdList(v []*int32) *AssociateDomainsForCustomRuleRequest {
	s.RuleIdList = v
	return s
}

func (s *AssociateDomainsForCustomRuleRequest) SetDomainList(v []*string) *AssociateDomainsForCustomRuleRequest {
	s.DomainList = v
	return s
}

type AssociateDomainsForCustomRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s AssociateDomainsForCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForCustomRuleResponse) SetCode(v string) *AssociateDomainsForCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *AssociateDomainsForCustomRuleResponse) SetMessage(v string) *AssociateDomainsForCustomRuleResponse {
	s.Message = &v
	return s
}

type AssociateDomainsForCustomRulePaths struct {
}

func (s AssociateDomainsForCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRulePaths) GoString() string {
	return s.String()
}

type AssociateDomainsForCustomRuleParameters struct {
}

func (s AssociateDomainsForCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRuleParameters) GoString() string {
	return s.String()
}

type AssociateDomainsForCustomRuleRequestHeader struct {
}

func (s AssociateDomainsForCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRuleRequestHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForCustomRuleResponseHeader struct {
}

func (s AssociateDomainsForCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type DeployCrawlerGoodRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Public Bots.", "zh_CN":"公开类型Bot。"}
	Edgebot_crawler_good *DeployCrawlerGoodIntelligence `json:"edgebot_crawler_good,omitempty" xml:"edgebot_crawler_good,omitempty" require:"true"`
	// {"en":"User-Agent DeployCrawlerGoodIntelligence.", "zh_CN":"User-Agent情报。"}
	Edgebot_user_agent *DeployCrawlerGoodUserAgent `json:"edgebot_user_agent,omitempty" xml:"edgebot_user_agent,omitempty" require:"true"`
	// {"en":"IP DeployCrawlerGoodIntelligence.", "zh_CN":"IP情报。"}
	Edgebot_bot_intelligence *DeployCrawlerGoodIntelligence `json:"edgebot_bot_intelligence,omitempty" xml:"edgebot_bot_intelligence,omitempty" require:"true"`
}

func (s DeployCrawlerGoodRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodRequest) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodRequest) SetDomain(v string) *DeployCrawlerGoodRequest {
	s.Domain = &v
	return s
}

func (s *DeployCrawlerGoodRequest) SetEdgebot_crawler_good(v *DeployCrawlerGoodIntelligence) *DeployCrawlerGoodRequest {
	s.Edgebot_crawler_good = v
	return s
}

func (s *DeployCrawlerGoodRequest) SetEdgebot_user_agent(v *DeployCrawlerGoodUserAgent) *DeployCrawlerGoodRequest {
	s.Edgebot_user_agent = v
	return s
}

func (s *DeployCrawlerGoodRequest) SetEdgebot_bot_intelligence(v *DeployCrawlerGoodIntelligence) *DeployCrawlerGoodRequest {
	s.Edgebot_bot_intelligence = v
	return s
}

type DeployCrawlerGoodIntelligence struct {
	// {"en":"Single BOT record.", "zh_CN":"单条Bot记录。"}
	Pg_rows []*DeployCrawlerGoodPgRows `json:"pg_rows,omitempty" xml:"pg_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployCrawlerGoodIntelligence) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodIntelligence) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodIntelligence) SetPg_rows(v []*DeployCrawlerGoodPgRows) *DeployCrawlerGoodIntelligence {
	s.Pg_rows = v
	return s
}

type DeployCrawlerGoodUserAgent struct {
	// {"en":"Record of single Bots.", "zh_CN":"单条Bot记录。"}
	Pg_rows []*DeployCrawlerGoodPgRowsAgent `json:"pg_rows,omitempty" xml:"pg_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployCrawlerGoodUserAgent) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodUserAgent) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodUserAgent) SetPg_rows(v []*DeployCrawlerGoodPgRowsAgent) *DeployCrawlerGoodUserAgent {
	s.Pg_rows = v
	return s
}

type DeployCrawlerGoodPgRowsAgent struct {
	// {"en":"BOT name.", "zh_CN":"Bot标识。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Off
	//  1:Block
	//  2:Log
	//  3:Bypass", "zh_CN":"处理动作。
	//  0：关闭
	//  1：拦截
	//  2：告警
	//  3：放行"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"HTTP library.
	//  Python;Python-requests;Python-urllib;PHP;Ruby;GO HttpClient;Guzzle Http Client;Libcurl;Apache ;HttpClient;Jakarta Commons HttpClient;Axios;Other",
	//     "zh_CN":"HTTP库。
	//  Python;Python-requests;Python-urllib;PHP;Ruby;GO HttpClient;Guzzle Http Client;Libcurl;Apache ;HttpClient;Jakarta Commons HttpClient;Axios;Other"}
	Check []*string `json:"check,omitempty" xml:"check,omitempty" type:"Repeated"`
}

func (s DeployCrawlerGoodPgRowsAgent) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodPgRowsAgent) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodPgRowsAgent) SetName(v string) *DeployCrawlerGoodPgRowsAgent {
	s.Name = &v
	return s
}

func (s *DeployCrawlerGoodPgRowsAgent) SetEnable(v int) *DeployCrawlerGoodPgRowsAgent {
	s.Enable = &v
	return s
}

func (s *DeployCrawlerGoodPgRowsAgent) SetCheck(v []*string) *DeployCrawlerGoodPgRowsAgent {
	s.Check = v
	return s
}

type DeployCrawlerGoodPgRows struct {
	// {"en":"BOT name.", "zh_CN":"Bot标识。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Off
	//  1:Block
	//  2:Log
	//  3:Bypass", "zh_CN":"处理动作。
	//  0：关闭
	//  1：拦截
	//  2：告警
	//  3：放行"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
}

func (s DeployCrawlerGoodPgRows) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodPgRows) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodPgRows) SetName(v string) *DeployCrawlerGoodPgRows {
	s.Name = &v
	return s
}

func (s *DeployCrawlerGoodPgRows) SetEnable(v int) *DeployCrawlerGoodPgRows {
	s.Enable = &v
	return s
}

type DeployCrawlerGoodResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *DeployCrawlerGoodResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployCrawlerGoodResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodResponse) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodResponse) SetCode(v string) *DeployCrawlerGoodResponse {
	s.Code = &v
	return s
}

func (s *DeployCrawlerGoodResponse) SetMessage(v string) *DeployCrawlerGoodResponse {
	s.Message = &v
	return s
}

func (s *DeployCrawlerGoodResponse) SetData(v *DeployCrawlerGoodResult) *DeployCrawlerGoodResponse {
	s.Data = v
	return s
}

type DeployCrawlerGoodResult struct {
	// {"en":"Deployment Version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployCrawlerGoodResult) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodResult) GoString() string {
	return s.String()
}

func (s *DeployCrawlerGoodResult) SetDeployVersion(v string) *DeployCrawlerGoodResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployCrawlerGoodResult) SetEstimatetime(v string) *DeployCrawlerGoodResult {
	s.Estimatetime = &v
	return s
}

type DeployCrawlerGoodPaths struct {
}

func (s DeployCrawlerGoodPaths) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodPaths) GoString() string {
	return s.String()
}

type DeployCrawlerGoodParameters struct {
}

func (s DeployCrawlerGoodParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodParameters) GoString() string {
	return s.String()
}

type DeployCrawlerGoodRequestHeader struct {
}

func (s DeployCrawlerGoodRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodRequestHeader) GoString() string {
	return s.String()
}

type DeployCrawlerGoodResponseHeader struct {
}

func (s DeployCrawlerGoodResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployCrawlerGoodResponseHeader) GoString() string {
	return s.String()
}

type QueryDomainListByRuleNameRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule name array.", "zh_CN":"规则名数组。"}
	RuleNameList []*string `json:"ruleNameList,omitempty" xml:"ruleNameList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDomainListByRuleNameRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameRequest) GoString() string {
	return s.String()
}

func (s *QueryDomainListByRuleNameRequest) SetServiceType(v string) *QueryDomainListByRuleNameRequest {
	s.ServiceType = &v
	return s
}

func (s *QueryDomainListByRuleNameRequest) SetRuleNameList(v []*string) *QueryDomainListByRuleNameRequest {
	s.RuleNameList = v
	return s
}

type QueryDomainListByRuleNameResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *QueryDomainListByRuleNameResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryDomainListByRuleNameResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameResponse) GoString() string {
	return s.String()
}

func (s *QueryDomainListByRuleNameResponse) SetCode(v string) *QueryDomainListByRuleNameResponse {
	s.Code = &v
	return s
}

func (s *QueryDomainListByRuleNameResponse) SetMessage(v string) *QueryDomainListByRuleNameResponse {
	s.Message = &v
	return s
}

func (s *QueryDomainListByRuleNameResponse) SetData(v *QueryDomainListByRuleNameResp) *QueryDomainListByRuleNameResponse {
	s.Data = v
	return s
}

type QueryDomainListByRuleNameResp struct {
	// {"en":"Number of records.", "zh_CN":"记录数。"}
	TotalNum *string `json:"totalNum,omitempty" xml:"totalNum,omitempty" require:"true"`
	// {"en":"Rule array.", "zh_CN":"规则数组。"}
	List []*QueryDomainListByRuleNameRespItem `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDomainListByRuleNameResp) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameResp) GoString() string {
	return s.String()
}

func (s *QueryDomainListByRuleNameResp) SetTotalNum(v string) *QueryDomainListByRuleNameResp {
	s.TotalNum = &v
	return s
}

func (s *QueryDomainListByRuleNameResp) SetList(v []*QueryDomainListByRuleNameRespItem) *QueryDomainListByRuleNameResp {
	s.List = v
	return s
}

type QueryDomainListByRuleNameRespItem struct {
	// {"en":"Rule association domain.", "zh_CN":"规则关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
}

func (s QueryDomainListByRuleNameRespItem) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameRespItem) GoString() string {
	return s.String()
}

func (s *QueryDomainListByRuleNameRespItem) SetDomainList(v []*string) *QueryDomainListByRuleNameRespItem {
	s.DomainList = v
	return s
}

func (s *QueryDomainListByRuleNameRespItem) SetRuleId(v string) *QueryDomainListByRuleNameRespItem {
	s.RuleId = &v
	return s
}

func (s *QueryDomainListByRuleNameRespItem) SetRuleName(v string) *QueryDomainListByRuleNameRespItem {
	s.RuleName = &v
	return s
}

type QueryDomainListByRuleNamePaths struct {
}

func (s QueryDomainListByRuleNamePaths) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNamePaths) GoString() string {
	return s.String()
}

type QueryDomainListByRuleNameParameters struct {
}

func (s QueryDomainListByRuleNameParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameParameters) GoString() string {
	return s.String()
}

type QueryDomainListByRuleNameRequestHeader struct {
}

func (s QueryDomainListByRuleNameRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameRequestHeader) GoString() string {
	return s.String()
}

type QueryDomainListByRuleNameResponseHeader struct {
}

func (s QueryDomainListByRuleNameResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListByRuleNameResponseHeader) GoString() string {
	return s.String()
}

type GetThreatIntelligenceDomainConfigRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetThreatIntelligenceDomainConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigRequest) GoString() string {
	return s.String()
}

func (s *GetThreatIntelligenceDomainConfigRequest) SetDomainList(v []*string) *GetThreatIntelligenceDomainConfigRequest {
	s.DomainList = v
	return s
}

type GetThreatIntelligenceDomainConfigRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetThreatIntelligenceDomainConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigRequestHeader) GoString() string {
	return s.String()
}

func (s *GetThreatIntelligenceDomainConfigRequestHeader) SetServiceType(v string) *GetThreatIntelligenceDomainConfigRequestHeader {
	s.ServiceType = &v
	return s
}

type GetThreatIntelligenceDomainConfigPaths struct {
}

func (s GetThreatIntelligenceDomainConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigPaths) GoString() string {
	return s.String()
}

type GetThreatIntelligenceDomainConfigParameters struct {
}

func (s GetThreatIntelligenceDomainConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigParameters) GoString() string {
	return s.String()
}

type GetThreatIntelligenceDomainConfigResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*GetThreatIntelligenceDomainConfigResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetThreatIntelligenceDomainConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigResponse) GoString() string {
	return s.String()
}

func (s *GetThreatIntelligenceDomainConfigResponse) SetCode(v string) *GetThreatIntelligenceDomainConfigResponse {
	s.Code = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponse) SetMsg(v string) *GetThreatIntelligenceDomainConfigResponse {
	s.Msg = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponse) SetData(v []*GetThreatIntelligenceDomainConfigResponseData) *GetThreatIntelligenceDomainConfigResponse {
	s.Data = v
	return s
}

type GetThreatIntelligenceDomainConfigResponseData struct {
	// {"en":"Category ID.","zh_CN":"分类ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Category.","zh_CN":"大类。"}
	InfoCate *string `json:"infoCate,omitempty" xml:"infoCate,omitempty" require:"true"`
	// {"en":"SubCategory.","zh_CN":"小类。"}
	SecondCate *string `json:"secondCate,omitempty" xml:"secondCate,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE: Not Used\nLOG: Log\nBLOCK: Deny","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nBLOCK：拦截","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s GetThreatIntelligenceDomainConfigResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigResponseData) GoString() string {
	return s.String()
}

func (s *GetThreatIntelligenceDomainConfigResponseData) SetId(v string) *GetThreatIntelligenceDomainConfigResponseData {
	s.Id = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponseData) SetDomain(v string) *GetThreatIntelligenceDomainConfigResponseData {
	s.Domain = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponseData) SetInfoCate(v string) *GetThreatIntelligenceDomainConfigResponseData {
	s.InfoCate = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponseData) SetSecondCate(v string) *GetThreatIntelligenceDomainConfigResponseData {
	s.SecondCate = &v
	return s
}

func (s *GetThreatIntelligenceDomainConfigResponseData) SetAction(v string) *GetThreatIntelligenceDomainConfigResponseData {
	s.Action = &v
	return s
}

type GetThreatIntelligenceDomainConfigResponseHeader struct {
}

func (s GetThreatIntelligenceDomainConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetThreatIntelligenceDomainConfigResponseHeader) GoString() string {
	return s.String()
}

type RemoveProtectedDomainRequest struct {
}

func (s RemoveProtectedDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainRequest) GoString() string {
	return s.String()
}

type RemoveProtectedDomainRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s RemoveProtectedDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainRequestHeader) GoString() string {
	return s.String()
}

func (s *RemoveProtectedDomainRequestHeader) SetServiceType(v string) *RemoveProtectedDomainRequestHeader {
	s.ServiceType = &v
	return s
}

type RemoveProtectedDomainPaths struct {
}

func (s RemoveProtectedDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainPaths) GoString() string {
	return s.String()
}

type RemoveProtectedDomainParameters struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s RemoveProtectedDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainParameters) GoString() string {
	return s.String()
}

func (s *RemoveProtectedDomainParameters) SetDomain(v string) *RemoveProtectedDomainParameters {
	s.Domain = &v
	return s
}

type RemoveProtectedDomainResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s RemoveProtectedDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainResponse) GoString() string {
	return s.String()
}

func (s *RemoveProtectedDomainResponse) SetCode(v string) *RemoveProtectedDomainResponse {
	s.Code = &v
	return s
}

func (s *RemoveProtectedDomainResponse) SetMsg(v string) *RemoveProtectedDomainResponse {
	s.Msg = &v
	return s
}

type RemoveProtectedDomainResponseHeader struct {
}

func (s RemoveProtectedDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveProtectedDomainResponseHeader) GoString() string {
	return s.String()
}

type UpdateBlockPageSettingRequest struct {
	// {"en":"Domain, array.", "zh_CN":"域名，数组。"}
	Config []*UpdateBlockPageSettingDomainInfo `json:"config,omitempty" xml:"config,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateBlockPageSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateBlockPageSettingRequest) SetConfig(v []*UpdateBlockPageSettingDomainInfo) *UpdateBlockPageSettingRequest {
	s.Config = v
	return s
}

type UpdateBlockPageSettingResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s UpdateBlockPageSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateBlockPageSettingResponse) SetCode(v string) *UpdateBlockPageSettingResponse {
	s.Code = &v
	return s
}

func (s *UpdateBlockPageSettingResponse) SetMessage(v string) *UpdateBlockPageSettingResponse {
	s.Message = &v
	return s
}

type UpdateBlockPageSettingDomainInfo struct {
	// {"en":"domain name", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Configuration for Block page setting.", "zh_CN":"自定义拦截页面配置"}
	UpdateBlockPageSettingBlockPage *UpdateBlockPageSettingBlockPage `json:"blockPage,omitempty" xml:"blockPage,omitempty" require:"true"`
}

func (s UpdateBlockPageSettingDomainInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingDomainInfo) GoString() string {
	return s.String()
}

func (s *UpdateBlockPageSettingDomainInfo) SetDomain(v string) *UpdateBlockPageSettingDomainInfo {
	s.Domain = &v
	return s
}

func (s *UpdateBlockPageSettingDomainInfo) SetBlockPage(v *UpdateBlockPageSettingBlockPage) *UpdateBlockPageSettingDomainInfo {
	s.UpdateBlockPageSettingBlockPage = v
	return s
}

type UpdateBlockPageSettingBlockPage struct {
	// {"en":"Switch
	//     0: close
	//     1: open", "zh_CN":"开关。
	//     0：关
	//     1：开"}
	SwitchConf *int32 `json:"switch,omitempty" xml:"switch,omitempty" require:"true"`
	// {"en":"Status code, default 403", "zh_CN":"状态码，默认403"}
	StatusCode *string `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// {"en":"Content-type, default text/html, support multiple,english half Angle comma splices.", "zh_CN":"Content-Type，默认text/html，多个以英文半角逗号分隔。"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// {"en":"Customized response content.", "zh_CN":"自定义响应内容。"}
	ResponseContent *string `json:"responseContent,omitempty" xml:"responseContent,omitempty" require:"true"`
}

func (s UpdateBlockPageSettingBlockPage) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingBlockPage) GoString() string {
	return s.String()
}

func (s *UpdateBlockPageSettingBlockPage) SetSwitchConf(v int32) *UpdateBlockPageSettingBlockPage {
	s.SwitchConf = &v
	return s
}

func (s *UpdateBlockPageSettingBlockPage) SetStatusCode(v string) *UpdateBlockPageSettingBlockPage {
	s.StatusCode = &v
	return s
}

func (s *UpdateBlockPageSettingBlockPage) SetContentType(v string) *UpdateBlockPageSettingBlockPage {
	s.ContentType = &v
	return s
}

func (s *UpdateBlockPageSettingBlockPage) SetResponseContent(v string) *UpdateBlockPageSettingBlockPage {
	s.ResponseContent = &v
	return s
}

type UpdateBlockPageSettingPaths struct {
}

func (s UpdateBlockPageSettingPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingPaths) GoString() string {
	return s.String()
}

type UpdateBlockPageSettingParameters struct {
}

func (s UpdateBlockPageSettingParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingParameters) GoString() string {
	return s.String()
}

type UpdateBlockPageSettingRequestHeader struct {
}

func (s UpdateBlockPageSettingRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingRequestHeader) GoString() string {
	return s.String()
}

type UpdateBlockPageSettingResponseHeader struct {
}

func (s UpdateBlockPageSettingResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockPageSettingResponseHeader) GoString() string {
	return s.String()
}

type GetRuleExceptionListRequest struct {
	// {"en":"Exception name, support fuzzy queries.", "zh_CN":"例外名称，支持模糊查询。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"Exception action,array,
	//     0: Bypass
	//     2: Log", "zh_CN":"例外动作，数组。
	//     0：放行
	//     2：监控"}
	ModeList []*int32 `json:"modeList,omitempty" xml:"modeList,omitempty" type:"Repeated"`
	// {"en":"Effective scope
	//     2: Specific rule ID
	//     3: Specific attack types", "zh_CN":"生效范围
	//     2：特定规则ID
	//     3：特定攻击类型"}
	RangeType *int32 `json:"rangeType,omitempty" xml:"rangeType,omitempty"`
	// {"en":"Effective rule ID.", "zh_CN":"生效的规则ID。"}
	RuleIds []*int32 `json:"ruleIds,omitempty" xml:"ruleIds,omitempty" type:"Repeated"`
	// {"en":"Effective attack types,
	//     RFC: Protocol compliance
	//     WAF_SQLI: SQL Injection
	//     WAF_XSS: X-Site Scripting
	//     WAF_RFI: File Inclusion
	//     WAF_DIR_TRAVERSAL: Directory Traversal
	//     WAF_SHELL_BACKDOOR: Webshell Uploading
	//     WAF_SERVER_ERROR_LEAKAGE: Server Sensitive Info Leakage
	//     WAF_FILE_UPLOAD: File Uploading
	//     WAF_CMDI: Command Injection
	//     WAF_XPATH_LDAP_SSI: XPATH/LADP/SSI Injection
	//     WAF_SCANNER: Malicious Scan
	//     WAF_FILE_DOWNLOAD: Unauthorized Download
	//     WAF_THIRDCOMP: 3rd Party Component Exploit
	//     WAF_XXE: XML Injection
	//     WAF_SSRF: Server-side Request Forge
	//     WAF_CUSTOM_RULE: Custom Rule", "zh_CN":"生效的攻击类型，
	//     RFC：协议合规
	//     WAF_SQLI：SQL注入
	//     WAF_XSS：XSS跨站
	//     WAF_RFI：文件包含
	//     WAF_DIR_TRAVERSAL：目录遍历
	//     WAF_SHELL_BACKDOOR：木马后门
	//     WAF_SERVER_ERROR_LEAKAGE：服务器信息泄漏
	//     WAF_FILE_UPLOAD：文件上传
	//     WAF_CMDI：命令注入
	//     WAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入
	//     WAF_SCANNER：扫描器
	//     WAF_FILE_DOWNLOAD：非法下载
	//     WAF_THIRDCOMP：第三方组件漏洞
	//     WAF_XXE：XML注入
	//     WAF_SSRF：服务端请求伪造
	//     WAF_CUSTOM_RULE：自定义规则"}
	AttackTypes []*string `json:"attackTypes,omitempty" xml:"attackTypes,omitempty" type:"Repeated"`
	// {"en":"Current page number,1 by default.", "zh_CN":"当前页数，默认1。"}
	PageNum *int32 `json:"pageNum,omitempty" xml:"pageNum,omitempty"`
	// {"en":"Number each page,the maximum 1000,10 by default.", "zh_CN":"每页数量, 最大1000，默认10。"}
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty" maximum:"1000"`
}

func (s GetRuleExceptionListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListRequest) GoString() string {
	return s.String()
}

func (s *GetRuleExceptionListRequest) SetName(v string) *GetRuleExceptionListRequest {
	s.Name = &v
	return s
}

func (s *GetRuleExceptionListRequest) SetDomainList(v []*string) *GetRuleExceptionListRequest {
	s.DomainList = v
	return s
}

func (s *GetRuleExceptionListRequest) SetModeList(v []*int32) *GetRuleExceptionListRequest {
	s.ModeList = v
	return s
}

func (s *GetRuleExceptionListRequest) SetRangeType(v int32) *GetRuleExceptionListRequest {
	s.RangeType = &v
	return s
}

func (s *GetRuleExceptionListRequest) SetRuleIds(v []*int32) *GetRuleExceptionListRequest {
	s.RuleIds = v
	return s
}

func (s *GetRuleExceptionListRequest) SetAttackTypes(v []*string) *GetRuleExceptionListRequest {
	s.AttackTypes = v
	return s
}

func (s *GetRuleExceptionListRequest) SetPageNum(v int32) *GetRuleExceptionListRequest {
	s.PageNum = &v
	return s
}

func (s *GetRuleExceptionListRequest) SetPageSize(v int32) *GetRuleExceptionListRequest {
	s.PageSize = &v
	return s
}

type GetRuleExceptionListResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data *GetRuleExceptionListRuleWhitePage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetRuleExceptionListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListResponse) GoString() string {
	return s.String()
}

func (s *GetRuleExceptionListResponse) SetCode(v string) *GetRuleExceptionListResponse {
	s.Code = &v
	return s
}

func (s *GetRuleExceptionListResponse) SetMessage(v string) *GetRuleExceptionListResponse {
	s.Message = &v
	return s
}

func (s *GetRuleExceptionListResponse) SetData(v *GetRuleExceptionListRuleWhitePage) *GetRuleExceptionListResponse {
	s.Data = v
	return s
}

type GetRuleExceptionListRuleWhitePage struct {
	// {"en":"The total number of data.", "zh_CN":"总条数。"}
	Total *int32 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"Total number of pages.", "zh_CN":"总页数。"}
	Pages *int32 `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int32 `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"Number each page.", "zh_CN":"每页数量。"}
	Size *int32 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"Template information,array.", "zh_CN":"数据列表，数组。"}
	Records []*GetRuleExceptionListRuleWhite `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetRuleExceptionListRuleWhitePage) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListRuleWhitePage) GoString() string {
	return s.String()
}

func (s *GetRuleExceptionListRuleWhitePage) SetTotal(v int32) *GetRuleExceptionListRuleWhitePage {
	s.Total = &v
	return s
}

func (s *GetRuleExceptionListRuleWhitePage) SetPages(v int32) *GetRuleExceptionListRuleWhitePage {
	s.Pages = &v
	return s
}

func (s *GetRuleExceptionListRuleWhitePage) SetCurrent(v int32) *GetRuleExceptionListRuleWhitePage {
	s.Current = &v
	return s
}

func (s *GetRuleExceptionListRuleWhitePage) SetSize(v int32) *GetRuleExceptionListRuleWhitePage {
	s.Size = &v
	return s
}

func (s *GetRuleExceptionListRuleWhitePage) SetRecords(v []*GetRuleExceptionListRuleWhite) *GetRuleExceptionListRuleWhitePage {
	s.Records = v
	return s
}

type GetRuleExceptionListRuleWhite struct {
	// {"en":"Exception ID.", "zh_CN":"例外ID。"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Exception name.", "zh_CN":"例外名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Exception action.
	//     0: Pass
	//     2: Alert", "zh_CN":"例外动作。
	//     0：放行
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Description.", "zh_CN":"描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Effective scope.
	//     1: All rule
	//     2: Specific rule ids
	//     3: Specific attack types", "zh_CN":"生效范围。
	//     1：全部规则
	//     2：特定规则ID
	//     3：特定攻击类型"}
	RangeType *int32 `json:"rangeType,omitempty" xml:"rangeType,omitempty" require:"true"`
	// {"en":"Effective rule ID.", "zh_CN":"生效的规则ID。"}
	RuleIds []*int32 `json:"ruleIds,omitempty" xml:"ruleIds,omitempty" require:"true" type:"Repeated"`
	// {"en":"Effective attack types,
	//     RFC: Protocol compliance
	//     WAF_SQLI: SQL Injection
	//     WAF_XSS: X-Site Scripting
	//     WAF_RFI: File Inclusion
	//     WAF_DIR_TRAVERSAL: Directory Traversal
	//     WAF_SHELL_BACKDOOR: Webshell Uploading
	//     WAF_SERVER_ERROR_LEAKAGE: Server Sensitive Info Leakage
	//     WAF_FILE_UPLOAD: File Uploading
	//     WAF_CMDI: Command Injection
	//     WAF_XPATH_LDAP_SSI: XPATH/LADP/SSI Injection
	//     WAF_SCANNER: Malicious Scan
	//     WAF_FILE_DOWNLOAD: Unauthorized Download
	//     WAF_THIRDCOMP: 3rd Party Component Exploit
	//     WAF_XXE: XML Injection
	//     WAF_SSRF: Server-side Request Forge
	//     WAF_CUSTOM_RULE: Custom Rule", "zh_CN":"生效的攻击类型，
	//     RFC：协议合规
	//     WAF_SQLI：SQL注入
	//     WAF_XSS：XSS跨站
	//     WAF_RFI：文件包含
	//     WAF_DIR_TRAVERSAL：目录遍历
	//     WAF_SHELL_BACKDOOR：木马后门
	//     WAF_SERVER_ERROR_LEAKAGE：服务器信息泄漏
	//     WAF_FILE_UPLOAD：文件上传
	//     WAF_CMDI：命令注入
	//     WAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入
	//     WAF_SCANNER：扫描器
	//     WAF_FILE_DOWNLOAD：非法下载
	//     WAF_THIRDCOMP：第三方组件漏洞
	//     WAF_XXE：XML注入
	//     WAF_SSRF：服务端请求伪造
	//     WAF_CUSTOM_RULE：自定义规则"}
	AttackTypes []*string `json:"attackTypes,omitempty" xml:"attackTypes,omitempty" require:"true" type:"Repeated"`
	// {"en":"Matching conditions,array,Currently only one is supported.", "zh_CN":"匹配条件，数组，目前只支持一个。"}
	TemplateRuleWhiteConditions []*GetRuleExceptionListRuleWhiteCondition `json:"templateRuleWhiteConditions,omitempty" xml:"templateRuleWhiteConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetRuleExceptionListRuleWhite) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListRuleWhite) GoString() string {
	return s.String()
}

func (s *GetRuleExceptionListRuleWhite) SetId(v int32) *GetRuleExceptionListRuleWhite {
	s.Id = &v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetName(v string) *GetRuleExceptionListRuleWhite {
	s.Name = &v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetMode(v int32) *GetRuleExceptionListRuleWhite {
	s.Mode = &v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetMsg(v string) *GetRuleExceptionListRuleWhite {
	s.Msg = &v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetRangeType(v int32) *GetRuleExceptionListRuleWhite {
	s.RangeType = &v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetRuleIds(v []*int32) *GetRuleExceptionListRuleWhite {
	s.RuleIds = v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetAttackTypes(v []*string) *GetRuleExceptionListRuleWhite {
	s.AttackTypes = v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetTemplateRuleWhiteConditions(v []*GetRuleExceptionListRuleWhiteCondition) *GetRuleExceptionListRuleWhite {
	s.TemplateRuleWhiteConditions = v
	return s
}

func (s *GetRuleExceptionListRuleWhite) SetDomainList(v []*string) *GetRuleExceptionListRuleWhite {
	s.DomainList = v
	return s
}

type GetRuleExceptionListRuleWhiteCondition struct {
	// {"en":"Type
	//     path: Path
	//     uri: URI
	//     urlParamName: URL Parameter Name
	//     urlParamValue: URL Parameter Value
	//     clientIP: IP
	//     userAgent: User Agent
	//     httpHeaderName: HTTP Header Name
	//     httpHeaderValue: HTTP Header Value
	//     cookie: Cookie
	//     bodyParamName: Body Parameter Name
	//     bodyParamValue: Body Parameter Value
	//     body: Body", "zh_CN":"类型
	//     path：路径
	//     uri：URI
	//     urlParamName：URL Parameter Name
	//     urlParamValue：URL Parameter Value
	//     clientIP：IP
	//     userAgent：User Agent
	//     httpHeaderName：HTTP Header Name
	//     httpHeaderValue：HTTP Header Value
	//     cookie：Cookie
	//     bodyParamName：Body Parameter Name
	//     bodyParamValue：Body Parameter Value
	//     body：Body"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Regular or not.
	//     0:yes
	//     1:no", "zh_CN":"是否正则。
	//     0：否
	//     1：是"}
	IsReg *int32 `json:"isReg,omitempty" xml:"isReg,omitempty" require:"true"`
	// {"en":"The exception configuration. Except for Body, multiple values can be set at the same time.The clientIP type uses English half-corner commas to separate multiple values, and other types use newlines to separate multiple values.", "zh_CN":"例外内容，除了body类型以外，支持多个，clientIP类型用英文半角逗号分隔，其他类型用换行符分隔"}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s GetRuleExceptionListRuleWhiteCondition) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListRuleWhiteCondition) GoString() string {
	return s.String()
}

func (s *GetRuleExceptionListRuleWhiteCondition) SetType(v string) *GetRuleExceptionListRuleWhiteCondition {
	s.Type = &v
	return s
}

func (s *GetRuleExceptionListRuleWhiteCondition) SetIsReg(v int32) *GetRuleExceptionListRuleWhiteCondition {
	s.IsReg = &v
	return s
}

func (s *GetRuleExceptionListRuleWhiteCondition) SetContent(v string) *GetRuleExceptionListRuleWhiteCondition {
	s.Content = &v
	return s
}

type GetRuleExceptionListPaths struct {
}

func (s GetRuleExceptionListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListPaths) GoString() string {
	return s.String()
}

type GetRuleExceptionListParameters struct {
}

func (s GetRuleExceptionListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListParameters) GoString() string {
	return s.String()
}

type GetRuleExceptionListRequestHeader struct {
}

func (s GetRuleExceptionListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListRequestHeader) GoString() string {
	return s.String()
}

type GetRuleExceptionListResponseHeader struct {
}

func (s GetRuleExceptionListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetRuleExceptionListResponseHeader) GoString() string {
	return s.String()
}

type QueryAccessControlRuleListRequest struct {
	// {"en":"QueryAccessControlRuleListRule name.", "zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Domain List.", "zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s QueryAccessControlRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListRequest) GoString() string {
	return s.String()
}

func (s *QueryAccessControlRuleListRequest) SetRuleName(v string) *QueryAccessControlRuleListRequest {
	s.RuleName = &v
	return s
}

func (s *QueryAccessControlRuleListRequest) SetDomainList(v []*string) *QueryAccessControlRuleListRequest {
	s.DomainList = v
	return s
}

type QueryAccessControlRuleListResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *QueryAccessControlRuleListParams `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryAccessControlRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListResponse) GoString() string {
	return s.String()
}

func (s *QueryAccessControlRuleListResponse) SetCode(v string) *QueryAccessControlRuleListResponse {
	s.Code = &v
	return s
}

func (s *QueryAccessControlRuleListResponse) SetMessage(v string) *QueryAccessControlRuleListResponse {
	s.Message = &v
	return s
}

func (s *QueryAccessControlRuleListResponse) SetData(v *QueryAccessControlRuleListParams) *QueryAccessControlRuleListResponse {
	s.Data = v
	return s
}

type QueryAccessControlRuleListParams struct {
	// {"en":"QueryAccessControlRuleListRule name.", "zh_CN":"规则名称。"}
	QueryAccessControlRuleListParams []*QueryAccessControlRuleListRule `json:"params,omitempty" xml:"params,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAccessControlRuleListParams) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListParams) GoString() string {
	return s.String()
}

func (s *QueryAccessControlRuleListParams) SetParams(v []*QueryAccessControlRuleListRule) *QueryAccessControlRuleListParams {
	s.QueryAccessControlRuleListParams = v
	return s
}

type QueryAccessControlRuleListRule struct {
	// {"en":"QueryAccessControlRuleListRule name.", "zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"QueryAccessControlRuleListRule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Descript.", "zh_CN":"描述。"}
	RuleDescript *string `json:"ruleDescript,omitempty" xml:"ruleDescript,omitempty"`
	// {"en":"QueryAccessControlRuleListRule of value.", "zh_CN":"规则值。"}
	RuleValue *string `json:"ruleValue,omitempty" xml:"ruleValue,omitempty" require:"true"`
	// {"en":"QueryAccessControlRuleListRule Match.
	//  0:IP
	//  1:IP segment", "zh_CN":"规则匹配。
	//  0：IP
	//  1：IP段"}
	RuleMatch *string `json:"ruleMatch,omitempty" xml:"ruleMatch,omitempty" require:"true"`
	// {"en":"QueryAccessControlRuleListRule type.
	//  0:whitelist
	//  1:blacklist
	//  2:url whitelist
	//  3:url blacklist
	//  4:ua whitelist
	//     5:ua blacklist,6:header whitelist
	//  7:header blacklist
	//  8:area whitelist
	//  9:area blacklist",
	//     "zh_CN":"规则类型。
	//  0：IP白名单
	//  1：IP黑名单
	//  2：url白名单
	//  3：url黑名单
	//  4：ua白名单
	//  5：ua黑名单
	//     6：header白名单
	//  7：header黑名单
	//  8：区域白名单
	//  9：区域黑名单"}
	RuleType *string `json:"ruleType,omitempty" xml:"ruleType,omitempty" require:"true"`
	// {"en":"Domain multiple';'connect.", "zh_CN":"域名多个';'拼接。"}
	DomainList *string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true"`
}

func (s QueryAccessControlRuleListRule) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListRule) GoString() string {
	return s.String()
}

func (s *QueryAccessControlRuleListRule) SetRuleName(v string) *QueryAccessControlRuleListRule {
	s.RuleName = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetRuleId(v string) *QueryAccessControlRuleListRule {
	s.RuleId = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetRuleDescript(v string) *QueryAccessControlRuleListRule {
	s.RuleDescript = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetRuleValue(v string) *QueryAccessControlRuleListRule {
	s.RuleValue = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetRuleMatch(v string) *QueryAccessControlRuleListRule {
	s.RuleMatch = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetRuleType(v string) *QueryAccessControlRuleListRule {
	s.RuleType = &v
	return s
}

func (s *QueryAccessControlRuleListRule) SetDomainList(v string) *QueryAccessControlRuleListRule {
	s.DomainList = &v
	return s
}

type QueryAccessControlRuleListPaths struct {
}

func (s QueryAccessControlRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListPaths) GoString() string {
	return s.String()
}

type QueryAccessControlRuleListParameters struct {
}

func (s QueryAccessControlRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListParameters) GoString() string {
	return s.String()
}

type QueryAccessControlRuleListRequestHeader struct {
}

func (s QueryAccessControlRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListRequestHeader) GoString() string {
	return s.String()
}

type QueryAccessControlRuleListResponseHeader struct {
}

func (s QueryAccessControlRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryAccessControlRuleListResponseHeader) GoString() string {
	return s.String()
}

type UpdateUaBotsSelectBotNamesRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Modified Bot category data.', 'zh_CN':'修改的Bot类别数据。'}
	UpdateList []*UpdateUaBotsSelectBotNamesBotPublicBotsDTO `json:"updateList,omitempty" xml:"updateList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateUaBotsSelectBotNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesRequest) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsSelectBotNamesRequest) SetDomain(v string) *UpdateUaBotsSelectBotNamesRequest {
	s.Domain = &v
	return s
}

func (s *UpdateUaBotsSelectBotNamesRequest) SetUpdateList(v []*UpdateUaBotsSelectBotNamesBotPublicBotsDTO) *UpdateUaBotsSelectBotNamesRequest {
	s.UpdateList = v
	return s
}

type UpdateUaBotsSelectBotNamesResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateUaBotsSelectBotNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesResponse) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsSelectBotNamesResponse) SetCode(v string) *UpdateUaBotsSelectBotNamesResponse {
	s.Code = &v
	return s
}

func (s *UpdateUaBotsSelectBotNamesResponse) SetMsg(v string) *UpdateUaBotsSelectBotNamesResponse {
	s.Msg = &v
	return s
}

type UpdateUaBotsSelectBotNamesBotPublicBotsDTO struct {
	// {'en':'User-Agent based detection category.
	//  http_version: HTTP Library', 'zh_CN':'UA特征检测类别。
	//  http_version：HTTP 库'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty"`
	// {'en':'Checked Bot subcategory values(Please refer to the documentation: UA Bot Dictionary), multiple separated by ; sign, an empty value means all are unchecked.', 'zh_CN':'勾选的Bot小类值(请参照说明文档：UA Bot字典)，多个以 ; 号分隔，值为空表示全部不勾选。'}
	SelectBotNames *string `json:"selectBotNames,omitempty" xml:"selectBotNames,omitempty"`
}

func (s UpdateUaBotsSelectBotNamesBotPublicBotsDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesBotPublicBotsDTO) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsSelectBotNamesBotPublicBotsDTO) SetBotCategory(v string) *UpdateUaBotsSelectBotNamesBotPublicBotsDTO {
	s.BotCategory = &v
	return s
}

func (s *UpdateUaBotsSelectBotNamesBotPublicBotsDTO) SetSelectBotNames(v string) *UpdateUaBotsSelectBotNamesBotPublicBotsDTO {
	s.SelectBotNames = &v
	return s
}

type UpdateUaBotsSelectBotNamesPaths struct {
}

func (s UpdateUaBotsSelectBotNamesPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesPaths) GoString() string {
	return s.String()
}

type UpdateUaBotsSelectBotNamesParameters struct {
}

func (s UpdateUaBotsSelectBotNamesParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesParameters) GoString() string {
	return s.String()
}

type UpdateUaBotsSelectBotNamesRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateUaBotsSelectBotNamesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsSelectBotNamesRequestHeader) SetServiceType(v string) *UpdateUaBotsSelectBotNamesRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateUaBotsSelectBotNamesResponseHeader struct {
}

func (s UpdateUaBotsSelectBotNamesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsSelectBotNamesResponseHeader) GoString() string {
	return s.String()
}

type GetConsumerListRequest struct {
	// {"en":"Consumer ID.", "zh_CN":"消费方ID。"}
	ConsumerId *string `json:"consumerId,omitempty" xml:"consumerId,omitempty"`
	// {"en":"Consumer name.", "zh_CN":"消费方名称。"}
	ConsumerName *string `json:"consumerName,omitempty" xml:"consumerName,omitempty"`
	// {"en":"Consumer group, multiple use ; split.", "zh_CN":"消费方分组，多个用分号隔开。"}
	ConsumerGroup *string `json:"consumerGroup,omitempty" xml:"consumerGroup,omitempty"`
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	GetConsumerListPage *string `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页消费方条数。"}
	Size *string `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s GetConsumerListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListRequest) GoString() string {
	return s.String()
}

func (s *GetConsumerListRequest) SetConsumerId(v string) *GetConsumerListRequest {
	s.ConsumerId = &v
	return s
}

func (s *GetConsumerListRequest) SetConsumerName(v string) *GetConsumerListRequest {
	s.ConsumerName = &v
	return s
}

func (s *GetConsumerListRequest) SetConsumerGroup(v string) *GetConsumerListRequest {
	s.ConsumerGroup = &v
	return s
}

func (s *GetConsumerListRequest) SetPage(v string) *GetConsumerListRequest {
	s.GetConsumerListPage = &v
	return s
}

func (s *GetConsumerListRequest) SetSize(v string) *GetConsumerListRequest {
	s.Size = &v
	return s
}

type GetConsumerListResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data *GetConsumerListPage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetConsumerListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListResponse) GoString() string {
	return s.String()
}

func (s *GetConsumerListResponse) SetCode(v int) *GetConsumerListResponse {
	s.Code = &v
	return s
}

func (s *GetConsumerListResponse) SetMsg(v string) *GetConsumerListResponse {
	s.Msg = &v
	return s
}

func (s *GetConsumerListResponse) SetData(v *GetConsumerListPage) *GetConsumerListResponse {
	s.Data = v
	return s
}

type GetConsumerListPage struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"The total number of pages.", "zh_CN":"总页数。"}
	Pages *int `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页消费方条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"The total number of records.", "zh_CN":"总条数。"}
	Total *int `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"List of consumer.", "zh_CN":"消费方列表。"}
	Records []*GetConsumerListConsumerInfo `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetConsumerListPage) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListPage) GoString() string {
	return s.String()
}

func (s *GetConsumerListPage) SetCurrent(v int) *GetConsumerListPage {
	s.Current = &v
	return s
}

func (s *GetConsumerListPage) SetPages(v int) *GetConsumerListPage {
	s.Pages = &v
	return s
}

func (s *GetConsumerListPage) SetSize(v int) *GetConsumerListPage {
	s.Size = &v
	return s
}

func (s *GetConsumerListPage) SetTotal(v int) *GetConsumerListPage {
	s.Total = &v
	return s
}

func (s *GetConsumerListPage) SetRecords(v []*GetConsumerListConsumerInfo) *GetConsumerListPage {
	s.Records = v
	return s
}

type GetConsumerListConsumerInfo struct {
	// {"en":"Consumer ID.", "zh_CN":"消费方ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Consumer name.", "zh_CN":"消费方名称。"}
	ConsumerName *string `json:"consumerName,omitempty" xml:"consumerName,omitempty" require:"true"`
	// {"en":"Consumer group.", "zh_CN":"消费方分组。"}
	ConsumerGroup *string `json:"consumerGroup,omitempty" xml:"consumerGroup,omitempty" require:"true"`
	// {"en":"The total number of authorized API.", "zh_CN":"已授权的API数。"}
	AuthApiCount *int `json:"authApiCount,omitempty" xml:"authApiCount,omitempty" require:"true"`
	// {"en":"Create time, format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s GetConsumerListConsumerInfo) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListConsumerInfo) GoString() string {
	return s.String()
}

func (s *GetConsumerListConsumerInfo) SetId(v string) *GetConsumerListConsumerInfo {
	s.Id = &v
	return s
}

func (s *GetConsumerListConsumerInfo) SetConsumerName(v string) *GetConsumerListConsumerInfo {
	s.ConsumerName = &v
	return s
}

func (s *GetConsumerListConsumerInfo) SetConsumerGroup(v string) *GetConsumerListConsumerInfo {
	s.ConsumerGroup = &v
	return s
}

func (s *GetConsumerListConsumerInfo) SetAuthApiCount(v int) *GetConsumerListConsumerInfo {
	s.AuthApiCount = &v
	return s
}

func (s *GetConsumerListConsumerInfo) SetCreateTime(v string) *GetConsumerListConsumerInfo {
	s.CreateTime = &v
	return s
}

func (s *GetConsumerListConsumerInfo) SetRemark(v string) *GetConsumerListConsumerInfo {
	s.Remark = &v
	return s
}

type GetConsumerListPaths struct {
}

func (s GetConsumerListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListPaths) GoString() string {
	return s.String()
}

type GetConsumerListParameters struct {
}

func (s GetConsumerListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListParameters) GoString() string {
	return s.String()
}

type GetConsumerListRequestHeader struct {
}

func (s GetConsumerListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListRequestHeader) GoString() string {
	return s.String()
}

type GetConsumerListResponseHeader struct {
}

func (s GetConsumerListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerListResponseHeader) GoString() string {
	return s.String()
}

type CreateConsumerRequest struct {
	// {"en":"Consumer name.", "zh_CN":"消费方名称。"}
	ConsumerName *string `json:"consumerName,omitempty" xml:"consumerName,omitempty" require:"true"`
	// {"en":"Consumer group.", "zh_CN":"消费方分组。"}
	ConsumerGroup *string `json:"consumerGroup,omitempty" xml:"consumerGroup,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CreateConsumerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerRequest) SetConsumerName(v string) *CreateConsumerRequest {
	s.ConsumerName = &v
	return s
}

func (s *CreateConsumerRequest) SetConsumerGroup(v string) *CreateConsumerRequest {
	s.ConsumerGroup = &v
	return s
}

func (s *CreateConsumerRequest) SetRemark(v string) *CreateConsumerRequest {
	s.Remark = &v
	return s
}

type CreateConsumerResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateConsumerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerResponse) SetCode(v int) *CreateConsumerResponse {
	s.Code = &v
	return s
}

func (s *CreateConsumerResponse) SetMsg(v string) *CreateConsumerResponse {
	s.Msg = &v
	return s
}

func (s *CreateConsumerResponse) SetData(v map[string]interface{}) *CreateConsumerResponse {
	s.Data = v
	return s
}

type CreateConsumerPaths struct {
}

func (s CreateConsumerPaths) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerPaths) GoString() string {
	return s.String()
}

type CreateConsumerParameters struct {
}

func (s CreateConsumerParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerParameters) GoString() string {
	return s.String()
}

type CreateConsumerRequestHeader struct {
}

func (s CreateConsumerRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerRequestHeader) GoString() string {
	return s.String()
}

type CreateConsumerResponseHeader struct {
}

func (s CreateConsumerResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerResponseHeader) GoString() string {
	return s.String()
}

type GetBehaviorAnalyseRequest struct {
	// {"en":"domain.", "zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseRequest) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseRequest) SetDomain(v string) *GetBehaviorAnalyseRequest {
	s.Domain = &v
	return s
}

type GetBehaviorAnalyseResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"GetBehaviorAnalyseData returned.", "zh_CN":"返回数据。"}
	GetBehaviorAnalyseData *GetBehaviorAnalyseData `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseResponse) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseResponse) SetCode(v string) *GetBehaviorAnalyseResponse {
	s.Code = &v
	return s
}

func (s *GetBehaviorAnalyseResponse) SetMessage(v string) *GetBehaviorAnalyseResponse {
	s.Message = &v
	return s
}

func (s *GetBehaviorAnalyseResponse) SetData(v *GetBehaviorAnalyseData) *GetBehaviorAnalyseResponse {
	s.GetBehaviorAnalyseData = v
	return s
}

type GetBehaviorAnalyseData struct {
	// {"en":"Behavior analyse.", "zh_CN":"业务流分析。"}
	Edgebot_behavior_analyse *GetBehaviorAnalyseAlRows `json:"edgebot_behavior_analyse,omitempty" xml:"edgebot_behavior_analyse,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseData) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseData) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseData) SetEdgebot_behavior_analyse(v *GetBehaviorAnalyseAlRows) *GetBehaviorAnalyseData {
	s.Edgebot_behavior_analyse = v
	return s
}

type GetBehaviorAnalyseAlRows struct {
	// {"en":"Rule array.", "zh_CN":"规则数组。"}
	Al_rows []*GetBehaviorAnalyseRow `json:"al_rows,omitempty" xml:"al_rows,omitempty" require:"true" type:"Repeated"`
}

func (s GetBehaviorAnalyseAlRows) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseAlRows) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseAlRows) SetAl_rows(v []*GetBehaviorAnalyseRow) *GetBehaviorAnalyseAlRows {
	s.Al_rows = v
	return s
}

type GetBehaviorAnalyseRow struct {
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	Rule_id *string `json:"rule_id,omitempty" xml:"rule_id,omitempty" require:"true"`
	// {"en":"Rule content.", "zh_CN":"规则内容。"}
	Rule_content *GetBehaviorAnalyseRuleContent `json:"rule_content,omitempty" xml:"rule_content,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseRow) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseRow) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseRow) SetRule_id(v string) *GetBehaviorAnalyseRow {
	s.Rule_id = &v
	return s
}

func (s *GetBehaviorAnalyseRow) SetRule_content(v *GetBehaviorAnalyseRuleContent) *GetBehaviorAnalyseRow {
	s.Rule_content = v
	return s
}

type GetBehaviorAnalyseRuleContent struct {
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	Rule_name *string `json:"rule_name,omitempty" xml:"rule_name,omitempty" require:"true"`
	// {"en":"Rule description.", "zh_CN":"规则描述。"}
	Rule_description *string `json:"rule_description,omitempty" xml:"rule_description,omitempty" require:"true"`
	// {"en":"Application scen.
	//  0:WEB
	//  1:API", "zh_CN":"应用场景 。
	//  0：WEB
	//  1：API"}
	Application_scen *int `json:"application_scen,omitempty" xml:"application_scen,omitempty" require:"true"`
	// {"en":"Trigger condition statistical period.", "zh_CN":"触发条件-统计周期。"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical dimension.
	//  0:IP
	//  1:IP+User-Agent
	//  2:Client-ID
	//  3:Device Fingerprint", "zh_CN":"触发条件-统计维度。
	//  0：IP
	//  1：IP+UA
	//  2：客户端ID
	//  3：设备指纹"}
	Statistical_item *int `json:"statistical_item,omitempty" xml:"statistical_item,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Log
	//  1:Block
	//  2:Custom Response Content", "zh_CN":"处理动作。
	//  0：监控
	//  1：拦截
	//  2：自定义响应"}
	Action *int `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Request quantity/proportion determination.", "zh_CN":"请求数量/比例判定。"}
	Req_rows []*GetBehaviorAnalyseReqRow `json:"req_rows,omitempty" xml:"req_rows,omitempty" require:"true" type:"Repeated"`
	// {"en":"Protection path.", "zh_CN":"防护路径。"}
	Fp_rows []*GetBehaviorAnalyseFpRow `json:"fp_rows,omitempty" xml:"fp_rows,omitempty" require:"true" type:"Repeated"`
	// {"en":"Custom response content.", "zh_CN":"自定义响应内容。"}
	Response *string `json:"response,omitempty" xml:"response,omitempty" require:"true"`
	// {"en":"Custom response status code. Value range: [100, 999].", "zh_CN":"自定义响应状态码。"}
	Customer_code *string `json:"customer_code,omitempty" xml:"customer_code,omitempty" require:"true"`
	// {"en":"Deploy id.", "zh_CN":"部署ID。"}
	Deploy_id *string `json:"deploy_id,omitempty" xml:"deploy_id,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseRuleContent) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseRuleContent) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseRuleContent) SetRule_name(v string) *GetBehaviorAnalyseRuleContent {
	s.Rule_name = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetRule_description(v string) *GetBehaviorAnalyseRuleContent {
	s.Rule_description = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetApplication_scen(v int) *GetBehaviorAnalyseRuleContent {
	s.Application_scen = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetStatistical_period(v int) *GetBehaviorAnalyseRuleContent {
	s.Statistical_period = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetStatistical_item(v int) *GetBehaviorAnalyseRuleContent {
	s.Statistical_item = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetAction(v int) *GetBehaviorAnalyseRuleContent {
	s.Action = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetReq_rows(v []*GetBehaviorAnalyseReqRow) *GetBehaviorAnalyseRuleContent {
	s.Req_rows = v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetFp_rows(v []*GetBehaviorAnalyseFpRow) *GetBehaviorAnalyseRuleContent {
	s.Fp_rows = v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetResponse(v string) *GetBehaviorAnalyseRuleContent {
	s.Response = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetCustomer_code(v string) *GetBehaviorAnalyseRuleContent {
	s.Customer_code = &v
	return s
}

func (s *GetBehaviorAnalyseRuleContent) SetDeploy_id(v string) *GetBehaviorAnalyseRuleContent {
	s.Deploy_id = &v
	return s
}

type GetBehaviorAnalyseFpRow struct {
	// {"en":"Protection path matching method.
	//  3:Equals
	//  4:Regex match
	// 5:Contains", "zh_CN":"防护路径匹配方式。
	//  3：等于
	//  4：正则匹配
	// 5：包含"}
	Protection_scope *int `json:"protection_scope,omitempty" xml:"protection_scope,omitempty" require:"true"`
	// {"en":"Protection path content.", "zh_CN":"防护路径内容。"}
	Protection_content *string `json:"protection_content,omitempty" xml:"protection_content,omitempty" require:"true"`
	// {"en":"Protection type.
	// Path:Path
	// URI:URI", "zh_CN":"防护类型。
	// Path:路径
	// URI:URI"}
	Protection_name *string `json:"protection_name,omitempty" xml:"protection_name,omitempty" require:"true"`
}

func (s GetBehaviorAnalyseFpRow) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseFpRow) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseFpRow) SetProtection_scope(v int) *GetBehaviorAnalyseFpRow {
	s.Protection_scope = &v
	return s
}

func (s *GetBehaviorAnalyseFpRow) SetProtection_content(v string) *GetBehaviorAnalyseFpRow {
	s.Protection_content = &v
	return s
}

func (s *GetBehaviorAnalyseFpRow) SetProtection_name(v string) *GetBehaviorAnalyseFpRow {
	s.Protection_name = &v
	return s
}

type GetBehaviorAnalyseReqRow struct {
	// {"en":"Request quantity determination.
	//  0:Request Number
	//  1:Request Ratio", "zh_CN":"请求数量判定。
	//  0：请求数量判定
	//  1：请求比例判定"}
	Req_judge *string `json:"req_judge,omitempty" xml:"req_judge,omitempty"`
	// {"en":"Request type1.
	//   0:Total requests
	//  1:Requests of GET method
	//  2:Requests of POST method
	//   3:Requests of image resource
	//  4:Requests of css resource
	//  5:Requests of js resource
	//  6:Requests of other static resource",
	// 	"zh_CN":"请求类型1。
	//  0：总请求次数
	//  1：GET请求次
	//  2：POST请求次数
	//  3：图片资源请求次:
	//  4：CSS资源请求次数-4
	//  5：JS资源请求次数-5
	//  6：其他静态资源请求次"}
	Req_type1 *string `json:"req_type1,omitempty" xml:"req_type1,omitempty"`
	// {"en":"Request type2.
	//   0:Total requests
	//  1:Requests of GET method
	//  2:Requests of POST method
	//   3:Requests of image resource
	//  4:Requests of css resource
	//  5:Requests of js resource
	//  6:Requests of other static resource",
	// 	"zh_CN":"请求类型2。
	//  0：总请求次数
	//  1：GET请求次数
	//  2：POST请求次数
	//  3：图片资源请求次数
	//  4：CSS资源请求次数
	//  5：JS资源请求次数
	//  6：其他静态资源请求次数"}
	Req_type2 *string `json:"req_type2,omitempty" xml:"req_type2,omitempty"`
	// {"en":"Operator.
	//  0:>
	//  1:<
	//  2:>=
	//  3:<= ",
	// 	"zh_CN":"运算符。
	//  0：>
	//   1：<
	//  2：>=
	//  3：<= "}
	Req_isequal *string `json:"req_isequal,omitempty" xml:"req_isequal,omitempty"`
	// {"en":"Threshold. ", "zh_CN":"阈值。"}
	Req_value *int `json:"req_value,omitempty" xml:"req_value,omitempty"`
	// {"en":"API Case - request type.
	//  0:Total requests
	//  1:Other URL requests
	//  2:Custom URL requests:",
	//     "zh_CN":"API场景-请求类型。
	//  0：请求总数
	//  1：其他URL请求数
	//  2：自定义url请求数"}
	Api_req_type *string `json:"api_req_type,omitempty" xml:"api_req_type,omitempty"`
	// {"en":"API Case - operator.
	//  0:Equals
	//  1:Regex match
	// 2:Contains", "zh_CN":"API场景-运算符。
	//  0：相等
	//  1：正则匹配
	//  2：包含"}
	Api_self_isregex *string `json:"api_self_isregex,omitempty" xml:"api_self_isregex,omitempty"`
	// {"en":"API Case - Custom URL. ", "zh_CN":"API场景-自定义URL。"}
	Api_self_url *string `json:"api_self_url,omitempty" xml:"api_self_url,omitempty"`
	// {"en":"API Case - Operator.
	//  0:>
	//  1:<
	//  2:>=
	//  3:<= ", "zh_CN":"API场景-运算符
	//  0：>
	//   1：<
	//  2：>=
	//  3：<= "}
	Api_req_isequal *string `json:"api_req_isequal,omitempty" xml:"api_req_isequal,omitempty"`
	// {"en":"API Case - threshold. ", "zh_CN":"API-阈值。"}
	Api_req_value *int `json:"api_req_value,omitempty" xml:"api_req_value,omitempty"`
	// {"en":"Match type.
	// Path:Path
	// URI:URI", "zh_CN":"匹配类型。
	// Path:路径
	// URI:URI"}
	Api_req_name *string `json:"api_req_name,omitempty" xml:"api_req_name,omitempty"`
}

func (s GetBehaviorAnalyseReqRow) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseReqRow) GoString() string {
	return s.String()
}

func (s *GetBehaviorAnalyseReqRow) SetReq_judge(v string) *GetBehaviorAnalyseReqRow {
	s.Req_judge = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetReq_type1(v string) *GetBehaviorAnalyseReqRow {
	s.Req_type1 = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetReq_type2(v string) *GetBehaviorAnalyseReqRow {
	s.Req_type2 = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetReq_isequal(v string) *GetBehaviorAnalyseReqRow {
	s.Req_isequal = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetReq_value(v int) *GetBehaviorAnalyseReqRow {
	s.Req_value = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_req_type(v string) *GetBehaviorAnalyseReqRow {
	s.Api_req_type = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_self_isregex(v string) *GetBehaviorAnalyseReqRow {
	s.Api_self_isregex = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_self_url(v string) *GetBehaviorAnalyseReqRow {
	s.Api_self_url = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_req_isequal(v string) *GetBehaviorAnalyseReqRow {
	s.Api_req_isequal = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_req_value(v int) *GetBehaviorAnalyseReqRow {
	s.Api_req_value = &v
	return s
}

func (s *GetBehaviorAnalyseReqRow) SetApi_req_name(v string) *GetBehaviorAnalyseReqRow {
	s.Api_req_name = &v
	return s
}

type GetBehaviorAnalysePaths struct {
}

func (s GetBehaviorAnalysePaths) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalysePaths) GoString() string {
	return s.String()
}

type GetBehaviorAnalyseParameters struct {
}

func (s GetBehaviorAnalyseParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseParameters) GoString() string {
	return s.String()
}

type GetBehaviorAnalyseRequestHeader struct {
}

func (s GetBehaviorAnalyseRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseRequestHeader) GoString() string {
	return s.String()
}

type GetBehaviorAnalyseResponseHeader struct {
}

func (s GetBehaviorAnalyseResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBehaviorAnalyseResponseHeader) GoString() string {
	return s.String()
}

type ListRateLimitingRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Rule name, fuzzy query.","zh_CN":"规则名称，模糊查询。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s ListRateLimitingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesRequest) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesRequest) SetDomainList(v []*string) *ListRateLimitingRulesRequest {
	s.DomainList = v
	return s
}

func (s *ListRateLimitingRulesRequest) SetRuleName(v string) *ListRateLimitingRulesRequest {
	s.RuleName = &v
	return s
}

type ListRateLimitingRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListRateLimitingRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesRequestHeader) SetServiceType(v string) *ListRateLimitingRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListRateLimitingRulesPaths struct {
}

func (s ListRateLimitingRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesPaths) GoString() string {
	return s.String()
}

type ListRateLimitingRulesParameters struct {
}

func (s ListRateLimitingRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesParameters) GoString() string {
	return s.String()
}

type ListRateLimitingRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListRateLimitingRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponse) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponse) SetCode(v string) *ListRateLimitingRulesResponse {
	s.Code = &v
	return s
}

func (s *ListRateLimitingRulesResponse) SetMsg(v string) *ListRateLimitingRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListRateLimitingRulesResponse) SetData(v []*ListRateLimitingRulesResponseData) *ListRateLimitingRulesResponse {
	s.Data = v
	return s
}

type ListRateLimitingRulesResponseData struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule Name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"规则描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：网站业务\nAPI：API业务"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty" require:"true"`
	// {"en":"Count on.\nREQUEST:Request\nRESPONSE:Response","zh_CN":"统计阶段。\nREQUEST：请求\nRESPONSE：响应"}
	StatisticalStage *string `json:"statisticalStage,omitempty" xml:"statisticalStage,omitempty" require:"true"`
	// {"en":"Client identifier.\nIP:Client IP\nIP_UA:Client IP and User-Agent\nCOOKIE:Cookie\nIP_COOKIE:Client IP and Cookie\nHEADER:Request Header\nIP_HEADER:Client IP and Request Header","zh_CN":"统计粒度。\nIP：客户端IP\nIP_UA：客户端IP和User-Agent\nCOOKIE：Cookie\nIP_COOKIE：客户端IP和Cookie\nHEADER：请求头\nIP_HEADER：客户端IP和请求头"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty" require:"true"`
	// {"en":"Statistical key value .","zh_CN":"统计key值。"}
	StatisticsKey *string `json:"statisticsKey,omitempty" xml:"statisticsKey,omitempty" require:"true"`
	// {"en":"Statistics period, unit: seconds.","zh_CN":"统计周期，单位：秒。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty" require:"true"`
	// {"en":"Trigger threshold, unit: times.","zh_CN":"触发阈值，单位：次。"}
	TriggerThreshold *int `json:"triggerThreshold,omitempty" xml:"triggerThreshold,omitempty" require:"true"`
	// {"en":"Action duration, unit: seconds.","zh_CN":"处理动作持续时间，单位：秒。"}
	InterceptTime *int `json:"interceptTime,omitempty" xml:"interceptTime,omitempty" require:"true"`
	// {"en":"Cycle effective status.\nPERMANENT:All time\nWITHOUT:Excluded time\nWITHIN:Selected time","zh_CN":"周期生效状态。\nPERMANENT：永久生效\nWITHOUT：周期内不生效\nWITHIN：周期内生效"}
	EffectiveStatus *string `json:"effectiveStatus,omitempty" xml:"effectiveStatus,omitempty" require:"true"`
	// {"en":"Effective time period.","zh_CN":"规则生效周期。"}
	RateLimitEffective *ListRateLimitingRulesResponseDataRateLimitEffective `json:"rateLimitEffective,omitempty" xml:"rateLimitEffective,omitempty" require:"true" type:"Struct"`
	// {"en":"API ID under API business, multiple separated by ; sign.","zh_CN":"API业务下的API ID，多个用 ; 隔开。"}
	AssetApiId *string `json:"assetApiId,omitempty" xml:"assetApiId,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nCOOKIE:Cookie verification\nJS_CHECK:Javascript verification\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection\nCustom response ID:Custom response ID","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nCOOKIE：Cookie校验\nJS_CHECK：JavaScript校验\nDELAY：延迟响应\nBLOCK：拦截\nRESET：断开连接\n自定义响应ID：自定义响应ID"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Matching conditions.","zh_CN":"匹配条件。"}
	RateLimitRuleCondition *ListRateLimitingRulesResponseDataRateLimitRuleCondition `json:"rateLimitRuleCondition,omitempty" xml:"rateLimitRuleCondition,omitempty" require:"true" type:"Struct"`
	// {"en":"Update time.","zh_CN":"更新时间。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s ListRateLimitingRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseData) SetId(v string) *ListRateLimitingRulesResponseData {
	s.Id = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetDomain(v string) *ListRateLimitingRulesResponseData {
	s.Domain = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetRuleName(v string) *ListRateLimitingRulesResponseData {
	s.RuleName = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetDescription(v string) *ListRateLimitingRulesResponseData {
	s.Description = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetScene(v string) *ListRateLimitingRulesResponseData {
	s.Scene = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetStatisticalStage(v string) *ListRateLimitingRulesResponseData {
	s.StatisticalStage = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetStatisticalItem(v string) *ListRateLimitingRulesResponseData {
	s.StatisticalItem = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetStatisticsKey(v string) *ListRateLimitingRulesResponseData {
	s.StatisticsKey = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetStatisticalPeriod(v int) *ListRateLimitingRulesResponseData {
	s.StatisticalPeriod = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetTriggerThreshold(v int) *ListRateLimitingRulesResponseData {
	s.TriggerThreshold = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetInterceptTime(v int) *ListRateLimitingRulesResponseData {
	s.InterceptTime = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetEffectiveStatus(v string) *ListRateLimitingRulesResponseData {
	s.EffectiveStatus = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetRateLimitEffective(v *ListRateLimitingRulesResponseDataRateLimitEffective) *ListRateLimitingRulesResponseData {
	s.RateLimitEffective = v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetAssetApiId(v string) *ListRateLimitingRulesResponseData {
	s.AssetApiId = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetAction(v string) *ListRateLimitingRulesResponseData {
	s.Action = &v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetRateLimitRuleCondition(v *ListRateLimitingRulesResponseDataRateLimitRuleCondition) *ListRateLimitingRulesResponseData {
	s.RateLimitRuleCondition = v
	return s
}

func (s *ListRateLimitingRulesResponseData) SetUpdateTime(v string) *ListRateLimitingRulesResponseData {
	s.UpdateTime = &v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitEffective struct {
	// {"en":"Effective.\nMON:Monday\nTUE:Tuesday\nWED:Wednesday\nTHU:Thursday\nFRI:Friday\nSAT:Saturday\nSUN:Sunday","zh_CN":"周期。\nMON：星期一\nTUE：星期二\nWED：星期三\nTHU：星期四\nFRI：星期五\nSAT：星期六\nSUN：星期天"}
	Effective []*string `json:"effective,omitempty" xml:"effective,omitempty" require:"true" type:"Repeated"`
	// {"en":"Start time, format: HH:mm.","zh_CN":"开始时间，格式：HH:mm。"}
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// {"en":"End time, format: HH:mm.","zh_CN":"结束时间，格式：HH:mm。"}
	End *string `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_timezone","en":"Timezone,default value: GTM+8.","zh_CN":"时区，默认：GTM+8。"}
	Timezone *string `json:"timezone,omitempty" xml:"timezone,omitempty" require:"true"`
}

func (s ListRateLimitingRulesResponseDataRateLimitEffective) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitEffective) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitEffective) SetEffective(v []*string) *ListRateLimitingRulesResponseDataRateLimitEffective {
	s.Effective = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitEffective) SetStart(v string) *ListRateLimitingRulesResponseDataRateLimitEffective {
	s.Start = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitEffective) SetEnd(v string) *ListRateLimitingRulesResponseDataRateLimitEffective {
	s.End = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitEffective) SetTimezone(v string) *ListRateLimitingRulesResponseDataRateLimitEffective {
	s.Timezone = &v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleCondition struct {
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI Parameter, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI参数，匹配类型不可重复。\n当业务场景为网站业务时不支持此匹配条件。"}
	UriParamConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Header, match type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"HTTP/S, match type cannot be repeated.","zh_CN":"应用层协议，匹配类型不可重复。"}
	SchemeConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions `json:"schemeConditions,omitempty" xml:"schemeConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Response Code, match type cannot be repeated.","zh_CN":"状态码，匹配类型不可重复。"}
	StatusCodeConditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions `json:"statusCodeConditions,omitempty" xml:"statusCodeConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleCondition) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetIpOrIpsConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetPathConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.PathConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetUriConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.UriConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetUriParamConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.UriParamConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetUaConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.UaConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetMethodConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.MethodConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetRefererConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.RefererConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetHeaderConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.HeaderConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetAreaConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.AreaConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetSchemeConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.SchemeConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetStatusCodeConditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.StatusCodeConditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetJa3Conditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.Ja3Conditions = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleCondition) SetJa4Conditions(v []*ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions) *ListRateLimitingRulesResponseDataRateLimitRuleCondition {
	s.Ja4Conditions = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions) SetIpOrIps(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	ListRateLimitingRulesPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions) SetListRateLimitingRulesPaths(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionPathConditions {
	s.ListRateLimitingRulesPaths = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions) SetUri(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriConditions {
	s.Uri = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals,param value case sensitive\nNOT_EQUAL:Does not equal,param value case sensitive\nCONTAIN:Contains,param value case insensitive\nNOT_CONTAIN:Does not contains,param value case insensitive\nREGEX:Regex match,param value case insensitive\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于，参数值大小写敏感\nNOT_EQUAL：不等于，参数值大小写敏感\nCONTAIN：包含，参数值大小写不敏感\nNOT_CONTAIN：不包含，参数值大小写不敏感\nREGEX：正则，参数值大小写不敏感\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name,case sensitive,maximum 100 characters.\nExample: id.","zh_CN":"参数名，大小写敏感，最多100个字符。\n示例：id。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) SetParamName(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions) SetParamValue(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions) SetUa(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionUaConditions {
	s.Ua = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions) SetRequestMethod(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions) SetReferer(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionRefererConditions {
	s.MatchType = &v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions struct {
	// {"en":"Match type.EQUAL: Equals, request header values case sensitiveNOT_EQUAL: Does not equal, request header values case sensitiveCONTAIN: Contains, request header values case insensitiveNOT_CONTAIN: Does not Contains, request header values case insensitiveNONE: Empty or non-existentREGEX: Regex match, request header values case insensitiveNOT_REGEX: Regular does not match, request header values case insensitiveSTART_WITH: Starts with, request header values case insensitiveEND_WITH: Ends with, request header values case insensitiveWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single characterNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。EQUAL：等于，头部值大小写敏感NOT_EQUAL：不等于，头部值大小写敏感CONTAIN：包含，头部值大小写不敏感NOT_CONTAIN：不包含，头部值大小写不敏感NONE：为空或不存在REGEX：匹配正则，头部值大小写不敏感NOT_REGEX：正则不匹配，头部值大小写不敏感START_WITH：开头是，头部值大小写不敏感END_WITH：结尾是，头部值大小写不敏感WILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符NOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) SetValueList(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions) SetKey(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionHeaderConditions {
	s.Key = &v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions) SetAreas(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionAreaConditions {
	s.Areas = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"HTTP/S.\nSupported values: HTTP/HTTPS.","zh_CN":"应用层协议。\n支持的值：HTTP/HTTPS。","exampleValue":"HTTP,HTTPS"}
	Scheme []*string `json:"scheme,omitempty" xml:"scheme,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions) SetScheme(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionSchemeConditions {
	s.Scheme = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Response Code.","zh_CN":"状态码。"}
	StatusCode []*string `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions) SetStatusCode(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionStatusCodeConditions {
	s.StatusCode = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions) SetJa3List(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions) SetMatchType(v string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions) SetJa4List(v []*string) *ListRateLimitingRulesResponseDataRateLimitRuleConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type ListRateLimitingRulesResponseHeader struct {
}

func (s ListRateLimitingRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListRateLimitingRulesResponseHeader) GoString() string {
	return s.String()
}

type QueryDomainBuiltInRulesRequest struct {
	// {"en":"domains","zh_CN":"域名"}
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
}

func (s QueryDomainBuiltInRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesRequest) GoString() string {
	return s.String()
}

func (s *QueryDomainBuiltInRulesRequest) SetDomains(v []*string) *QueryDomainBuiltInRulesRequest {
	s.Domains = v
	return s
}

type QueryDomainBuiltInRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s QueryDomainBuiltInRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *QueryDomainBuiltInRulesRequestHeader) SetServiceType(v string) *QueryDomainBuiltInRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type QueryDomainBuiltInRulesPaths struct {
}

func (s QueryDomainBuiltInRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesPaths) GoString() string {
	return s.String()
}

type QueryDomainBuiltInRulesParameters struct {
}

func (s QueryDomainBuiltInRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesParameters) GoString() string {
	return s.String()
}

type QueryDomainBuiltInRulesResponse struct {
	// {"en":"code","zh_CN":"code"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"msg","zh_CN":"msg"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"data.","zh_CN":"data"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// {"en":"domain","zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Security level, default enabled: 'DEFAULT_ ENABLE ', enable during attack:' ATTACK_ ENABLE ', basic off:' BASE_ Close ', permanently closed:' Close '","zh_CN":"安全级别， 默认启用:'DEFAULT_ENABLE'，攻击时启用：'ATTACK_ENABLE'，基本关闭：'BASE_CLOSE'，永久关闭:'CLOSE'","exampleValue":"DEFAULT_ENABLE,ATTACK_ENABLE,BASE_CLOSE,CLOSE"}
	SecurityLevel *string `json:"securityLevel,omitempty" xml:"securityLevel,omitempty" require:"true"`
	// {"en":"Chinese Rule Name","zh_CN":"中文规则名称"}
	RuleNameCn *string `json:"ruleNameCn,omitempty" xml:"ruleNameCn,omitempty" require:"true"`
	// {"en":"English Rule Name","zh_CN":"英文规则名称"}
	RuleNameEn *string `json:"ruleNameEn,omitempty" xml:"ruleNameEn,omitempty" require:"true"`
	// {"en":"Process action, intercept: 'BLOCK', monitor: 'LOG', human-machine verification: 'RR',: reject connection: 'Denied'","zh_CN":"处理动作， 拦截:'BLOCK'，监控：'LOG'，人机校验：'RR',：拒绝连接：'DENIED'","exampleValue":"BLOCK,LOG,RR,DENIED"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"rule id","zh_CN":"规则ID"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
}

func (s QueryDomainBuiltInRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesResponse) GoString() string {
	return s.String()
}

func (s *QueryDomainBuiltInRulesResponse) SetCode(v string) *QueryDomainBuiltInRulesResponse {
	s.Code = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetMsg(v string) *QueryDomainBuiltInRulesResponse {
	s.Msg = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetData(v []*string) *QueryDomainBuiltInRulesResponse {
	s.Data = v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetDomain(v string) *QueryDomainBuiltInRulesResponse {
	s.Domain = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetSecurityLevel(v string) *QueryDomainBuiltInRulesResponse {
	s.SecurityLevel = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetRuleNameCn(v string) *QueryDomainBuiltInRulesResponse {
	s.RuleNameCn = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetRuleNameEn(v string) *QueryDomainBuiltInRulesResponse {
	s.RuleNameEn = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetAction(v string) *QueryDomainBuiltInRulesResponse {
	s.Action = &v
	return s
}

func (s *QueryDomainBuiltInRulesResponse) SetRuleId(v string) *QueryDomainBuiltInRulesResponse {
	s.RuleId = &v
	return s
}

type QueryDomainBuiltInRulesResponseHeader struct {
}

func (s QueryDomainBuiltInRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainBuiltInRulesResponseHeader) GoString() string {
	return s.String()
}

type GetBuiltInRuleListRequest struct {
	// {"en":"Template name, support fuzzy queries.", "zh_CN":"模板名称，支持模糊查询。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"The language of response data, default value: cn.
	//     cn: Chinese
	//     en: English", "zh_CN":"返回内容的语言版本，默认值：cn。
	//     cn：中文
	//     en：英文"}
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
	// {"en":"Current page number,1 by default.", "zh_CN":"当前页数，默认1。"}
	PageNum *int32 `json:"pageNum,omitempty" xml:"pageNum,omitempty"`
	// {"en":"Number each page,the maximum 1000,10 by default.", "zh_CN":"每页数量, 最大1000，默认10。"}
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty" maximum:"1000"`
}

func (s GetBuiltInRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListRequest) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleListRequest) SetName(v string) *GetBuiltInRuleListRequest {
	s.Name = &v
	return s
}

func (s *GetBuiltInRuleListRequest) SetDomainList(v []*string) *GetBuiltInRuleListRequest {
	s.DomainList = v
	return s
}

func (s *GetBuiltInRuleListRequest) SetLang(v string) *GetBuiltInRuleListRequest {
	s.Lang = &v
	return s
}

func (s *GetBuiltInRuleListRequest) SetPageNum(v int32) *GetBuiltInRuleListRequest {
	s.PageNum = &v
	return s
}

func (s *GetBuiltInRuleListRequest) SetPageSize(v int32) *GetBuiltInRuleListRequest {
	s.PageSize = &v
	return s
}

type GetBuiltInRuleListResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data *GetBuiltInRuleListRuleTemplatePage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetBuiltInRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleListResponse) SetCode(v string) *GetBuiltInRuleListResponse {
	s.Code = &v
	return s
}

func (s *GetBuiltInRuleListResponse) SetMessage(v string) *GetBuiltInRuleListResponse {
	s.Message = &v
	return s
}

func (s *GetBuiltInRuleListResponse) SetData(v *GetBuiltInRuleListRuleTemplatePage) *GetBuiltInRuleListResponse {
	s.Data = v
	return s
}

type GetBuiltInRuleListRuleTemplatePage struct {
	// {"en":"The total number of data.", "zh_CN":"总条数。"}
	Total *int32 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"Total number of pages.", "zh_CN":"总页数。"}
	Pages *int32 `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int32 `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"Number each page.", "zh_CN":"每页数量。"}
	Size *int32 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"Template information,array.", "zh_CN":"模板信息，数组。"}
	Records []*GetBuiltInRuleListRuleTemplate `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetBuiltInRuleListRuleTemplatePage) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListRuleTemplatePage) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleListRuleTemplatePage) SetTotal(v int32) *GetBuiltInRuleListRuleTemplatePage {
	s.Total = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplatePage) SetPages(v int32) *GetBuiltInRuleListRuleTemplatePage {
	s.Pages = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplatePage) SetCurrent(v int32) *GetBuiltInRuleListRuleTemplatePage {
	s.Current = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplatePage) SetSize(v int32) *GetBuiltInRuleListRuleTemplatePage {
	s.Size = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplatePage) SetRecords(v []*GetBuiltInRuleListRuleTemplate) *GetBuiltInRuleListRuleTemplatePage {
	s.Records = v
	return s
}

type GetBuiltInRuleListRuleTemplate struct {
	// {"en":"Template ID.", "zh_CN":"模板ID。"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Template name.", "zh_CN":"模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Whether to automatically update,1:yes,0:no.", "zh_CN":"是否自动更新，1：是，0：否。"}
	UpdateType *int32 `json:"updateType,omitempty" xml:"updateType,omitempty" require:"true"`
	// {"en":"Update time,GMT+8.", "zh_CN":"更新时间，GMT+8。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"Template description.", "zh_CN":"模板描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetBuiltInRuleListRuleTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListRuleTemplate) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleListRuleTemplate) SetId(v int32) *GetBuiltInRuleListRuleTemplate {
	s.Id = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplate) SetName(v string) *GetBuiltInRuleListRuleTemplate {
	s.Name = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplate) SetUpdateType(v int32) *GetBuiltInRuleListRuleTemplate {
	s.UpdateType = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplate) SetUpdateTime(v string) *GetBuiltInRuleListRuleTemplate {
	s.UpdateTime = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplate) SetMsg(v string) *GetBuiltInRuleListRuleTemplate {
	s.Msg = &v
	return s
}

func (s *GetBuiltInRuleListRuleTemplate) SetDomainList(v []*string) *GetBuiltInRuleListRuleTemplate {
	s.DomainList = v
	return s
}

type GetBuiltInRuleListPaths struct {
}

func (s GetBuiltInRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListPaths) GoString() string {
	return s.String()
}

type GetBuiltInRuleListParameters struct {
}

func (s GetBuiltInRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListParameters) GoString() string {
	return s.String()
}

type GetBuiltInRuleListRequestHeader struct {
}

func (s GetBuiltInRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListRequestHeader) GoString() string {
	return s.String()
}

type GetBuiltInRuleListResponseHeader struct {
}

func (s GetBuiltInRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleListResponseHeader) GoString() string {
	return s.String()
}

type UpdateRateLimitingRuleRequest struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Rule Name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n 不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"规则描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：网站业务\nAPI：API业务"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
	// {"en":"Client identifier.\nIP:Client IP\nIP_UA:Client IP and User-Agent\nCOOKIE:Cookie\nIP_COOKIE:Client IP and Cookie\nHEADER:Request Header\nWhen there is a status code in the matching condition,this client identifier is not supported.\nIP_HEADER:Client IP and Request Header\nWhen there is a status code in the matching condition,this client identifier is not supported .","zh_CN":"统计粒度。\nIP：客户端IP\nIP_UA：客户端IP和User-Agent\nCOOKIE：Cookie\nIP_COOKIE：客户端IP和Cookie\nHEADER：请求头，当匹配条件中存在状态码时不支持此统计粒度\nIP_HEADER：客户端IP和请求头，当匹配条件中存在状态码时不支持此统计粒度"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty"`
	// {"en":"Statistical key value.\nWhen the client identifier is cookie/header value, the corresponding key value needs to be entered.","zh_CN":"统计key值。\n当统计粒度cookie/header值，需要输入对应的key值。"}
	StatisticsKey *string `json:"statisticsKey,omitempty" xml:"statisticsKey,omitempty"`
	// {"en":"Statistics period, unit: seconds, the range is 1 - 3600.","zh_CN":"统计周期，单位：秒，范围为 1 - 3600。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty"`
	// {"en":"Trigger threshold, unit: times.","zh_CN":"触发阈值，单位：次。"}
	TriggerThreshold *int `json:"triggerThreshold,omitempty" xml:"triggerThreshold,omitempty"`
	// {"en":"Action duration, unit: seconds, the range is 10 - 604800.","zh_CN":"处理动作持续时间，单位：秒，范围为 10 - 604800。"}
	InterceptTime *int `json:"interceptTime,omitempty" xml:"interceptTime,omitempty"`
	// {"en":"Cycle effective status.\nPERMANENT:All time\nWITHOUT:Excluded time\nWITHIN:Selected time","zh_CN":"周期生效状态。\nPERMANENT：永久生效\nWITHOUT：周期内不生效\nWITHIN：周期内生效"}
	EffectiveStatus *string `json:"effectiveStatus,omitempty" xml:"effectiveStatus,omitempty"`
	// {"en":"Effective time period.\nWhen the effective status is effective within the cycle or not effective within the cycle, this field must have a value.","zh_CN":"规则生效周期。\n生效状态为周期内生效或周期内不生效时，此字段必须有值。"}
	RateLimitEffective *UpdateRateLimitingRuleRequestRateLimitEffective `json:"rateLimitEffective,omitempty" xml:"rateLimitEffective,omitempty" type:"Struct"`
	// {"en":"API ID under API business, multiple separated by ; sign.\nWhen the protected target is API, this field is required.","zh_CN":"API业务下的API ID，多个用 ; 隔开。\n当业务场景为API业务时此字段必填。"}
	AssetApiId *string `json:"assetApiId,omitempty" xml:"assetApiId,omitempty"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nCOOKIE:Cookie verification\nJS_CHECK:Javascript verification\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection\nCustom response ID:Custom response ID\nWhen there is a status code in the matching condition, the supported actions are Log, Deny, NO_USE, and Reset, Connection.","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nCOOKIE：Cookie校验\nJS_CHECK：JavaScript校验\nDELAY：延迟响应\nBLOCK：拦截\nRESET：断开连接\n自定义响应ID：自定义响应ID\n当匹配条件中存在状态码时，支持处理动作为监控、拦截、不使用、断开连接。"}
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// {"en":"Matching conditions.","zh_CN":"匹配条件。"}
	RateLimitRuleCondition *UpdateRateLimitingRuleRequestRateLimitRuleCondition `json:"rateLimitRuleCondition,omitempty" xml:"rateLimitRuleCondition,omitempty" type:"Struct"`
}

func (s UpdateRateLimitingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequest) SetId(v string) *UpdateRateLimitingRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetRuleName(v string) *UpdateRateLimitingRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetDescription(v string) *UpdateRateLimitingRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetScene(v string) *UpdateRateLimitingRuleRequest {
	s.Scene = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetStatisticalItem(v string) *UpdateRateLimitingRuleRequest {
	s.StatisticalItem = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetStatisticsKey(v string) *UpdateRateLimitingRuleRequest {
	s.StatisticsKey = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetStatisticalPeriod(v int) *UpdateRateLimitingRuleRequest {
	s.StatisticalPeriod = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetTriggerThreshold(v int) *UpdateRateLimitingRuleRequest {
	s.TriggerThreshold = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetInterceptTime(v int) *UpdateRateLimitingRuleRequest {
	s.InterceptTime = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetEffectiveStatus(v string) *UpdateRateLimitingRuleRequest {
	s.EffectiveStatus = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetRateLimitEffective(v *UpdateRateLimitingRuleRequestRateLimitEffective) *UpdateRateLimitingRuleRequest {
	s.RateLimitEffective = v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetAssetApiId(v string) *UpdateRateLimitingRuleRequest {
	s.AssetApiId = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetAction(v string) *UpdateRateLimitingRuleRequest {
	s.Action = &v
	return s
}

func (s *UpdateRateLimitingRuleRequest) SetRateLimitRuleCondition(v *UpdateRateLimitingRuleRequestRateLimitRuleCondition) *UpdateRateLimitingRuleRequest {
	s.RateLimitRuleCondition = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitEffective struct {
	// {"en":"Effective.\nMON:Monday\nTUE:Tuesday\nWED:Wednesday\nTHU:Thursday\nFRI:Friday\nSAT:Saturday\nSUN:Sunday","zh_CN":"周期。\nMON：星期一\nTUE：星期二\nWED：星期三\nTHU：星期四\nFRI：星期五\nSAT：星期六\nSUN：星期天"}
	Effective []*string `json:"effective,omitempty" xml:"effective,omitempty" require:"true" type:"Repeated"`
	// {"en":"Start time, format: HH:mm.","zh_CN":"开始时间，格式：HH:mm。"}
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// {"en":"End time, format: HH:mm.","zh_CN":"结束时间，格式：HH:mm。"}
	End *string `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_timezone","en":"Timezone,default value: GTM+8.","zh_CN":"时区，默认：GTM+8。"}
	Timezone *string `json:"timezone,omitempty" xml:"timezone,omitempty" require:"true"`
}

func (s UpdateRateLimitingRuleRequestRateLimitEffective) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitEffective) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitEffective) SetEffective(v []*string) *UpdateRateLimitingRuleRequestRateLimitEffective {
	s.Effective = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitEffective) SetStart(v string) *UpdateRateLimitingRuleRequestRateLimitEffective {
	s.Start = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitEffective) SetEnd(v string) *UpdateRateLimitingRuleRequestRateLimitEffective {
	s.End = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitEffective) SetTimezone(v string) *UpdateRateLimitingRuleRequestRateLimitEffective {
	s.Timezone = &v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleCondition struct {
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"URI Parameter, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI参数，匹配类型不可重复。\n当业务场景为网站业务时不支持此匹配条件。"}
	UriParamConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"Request Header, match type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" type:"Repeated"`
	// {"en":"HTTP/S, match type cannot be repeated.","zh_CN":"应用层协议，匹配类型不可重复。"}
	SchemeConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions `json:"schemeConditions,omitempty" xml:"schemeConditions,omitempty" type:"Repeated"`
	// {"en":"Response Code, match type cannot be repeated.","zh_CN":"状态码，匹配类型不可重复。"}
	StatusCodeConditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions `json:"statusCodeConditions,omitempty" xml:"statusCodeConditions,omitempty" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleCondition) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetIpOrIpsConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetPathConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.PathConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetUriConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.UriConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetUriParamConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.UriParamConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetUaConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.UaConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetMethodConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.MethodConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetRefererConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.RefererConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetHeaderConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.HeaderConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetAreaConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.AreaConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetSchemeConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.SchemeConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetStatusCodeConditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.StatusCodeConditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetJa3Conditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.Ja3Conditions = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleCondition) SetJa4Conditions(v []*UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) *UpdateRateLimitingRuleRequestRateLimitRuleCondition {
	s.Ja4Conditions = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) SetIpOrIps(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	UpdateRateLimitingRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions) SetUpdateRateLimitingRulePaths(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionPathConditions {
	s.UpdateRateLimitingRulePaths = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions) SetUri(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriConditions {
	s.Uri = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals,param value case sensitive\nNOT_EQUAL:Does not equal,param value case sensitive\nCONTAIN:Contains,param value case insensitive\nNOT_CONTAIN:Does not contains,param value case insensitive\nREGEX:Regex match,param value case insensitive\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于，参数值大小写敏感\nNOT_EQUAL：不等于，参数值大小写敏感\nCONTAIN：包含，参数值大小写不敏感\nNOT_CONTAIN：不包含，参数值大小写不敏感\nREGEX：正则，参数值大小写不敏感\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name,case sensitive,maximum 100 characters.\nExample: id.","zh_CN":"参数名，大小写敏感，最多100个字符。\n示例：id。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetParamName(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetParamValue(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions) SetUa(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionUaConditions {
	s.Ua = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) SetRequestMethod(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) SetReferer(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionRefererConditions {
	s.MatchType = &v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions struct {
	// {"en":"Match type.EQUAL: Equals, request header values case sensitiveNOT_EQUAL: Does not equal, request header values case sensitiveCONTAIN: Contains, request header values case insensitiveNOT_CONTAIN: Does not Contains, request header values case insensitiveNONE: Empty or non-existentREGEX: Regex match, request header values case insensitiveNOT_REGEX: Regular does not match, request header values case insensitiveSTART_WITH: Starts with, request header values case insensitiveEND_WITH: Ends with, request header values case insensitiveWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single characterNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。EQUAL：等于，头部值大小写敏感NOT_EQUAL：不等于，头部值大小写敏感CONTAIN：包含，头部值大小写不敏感NOT_CONTAIN：不包含，头部值大小写不敏感NONE：为空或不存在REGEX：匹配正则，头部值大小写不敏感NOT_REGEX：正则不匹配，头部值大小写不敏感START_WITH：开头是，头部值大小写不敏感END_WITH：结尾是，头部值大小写不敏感WILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符NOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetValueList(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetKey(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.Key = &v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) SetAreas(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionAreaConditions {
	s.Areas = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"HTTP/S.\nSupported values: HTTP/HTTPS.","zh_CN":"应用层协议。\n支持的值：HTTP/HTTPS。","exampleValue":"HTTP,HTTPS"}
	Scheme []*string `json:"scheme,omitempty" xml:"scheme,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) SetScheme(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions {
	s.Scheme = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Response Code.","zh_CN":"状态码。"}
	StatusCode []*string `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) SetStatusCode(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions {
	s.StatusCode = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) SetJa3List(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) SetMatchType(v string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) SetJa4List(v []*string) *UpdateRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type UpdateRateLimitingRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateRateLimitingRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleRequestHeader) SetServiceType(v string) *UpdateRateLimitingRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateRateLimitingRulePaths struct {
}

func (s UpdateRateLimitingRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRulePaths) GoString() string {
	return s.String()
}

type UpdateRateLimitingRuleParameters struct {
}

func (s UpdateRateLimitingRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleParameters) GoString() string {
	return s.String()
}

type UpdateRateLimitingRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateRateLimitingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRateLimitingRuleResponse) SetCode(v string) *UpdateRateLimitingRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateRateLimitingRuleResponse) SetMsg(v string) *UpdateRateLimitingRuleResponse {
	s.Msg = &v
	return s
}

type UpdateRateLimitingRuleResponseHeader struct {
}

func (s UpdateRateLimitingRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateRateLimitingRuleResponseHeader) GoString() string {
	return s.String()
}

type UpgradeWAFRulesetRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s UpgradeWAFRulesetRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetRequest) GoString() string {
	return s.String()
}

func (s *UpgradeWAFRulesetRequest) SetDomainList(v []*string) *UpgradeWAFRulesetRequest {
	s.DomainList = v
	return s
}

type UpgradeWAFRulesetRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpgradeWAFRulesetRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetRequestHeader) GoString() string {
	return s.String()
}

func (s *UpgradeWAFRulesetRequestHeader) SetServiceType(v string) *UpgradeWAFRulesetRequestHeader {
	s.ServiceType = &v
	return s
}

type UpgradeWAFRulesetPaths struct {
}

func (s UpgradeWAFRulesetPaths) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetPaths) GoString() string {
	return s.String()
}

type UpgradeWAFRulesetParameters struct {
}

func (s UpgradeWAFRulesetParameters) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetParameters) GoString() string {
	return s.String()
}

type UpgradeWAFRulesetResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpgradeWAFRulesetResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetResponse) GoString() string {
	return s.String()
}

func (s *UpgradeWAFRulesetResponse) SetCode(v string) *UpgradeWAFRulesetResponse {
	s.Code = &v
	return s
}

func (s *UpgradeWAFRulesetResponse) SetMsg(v string) *UpgradeWAFRulesetResponse {
	s.Msg = &v
	return s
}

type UpgradeWAFRulesetResponseHeader struct {
}

func (s UpgradeWAFRulesetResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpgradeWAFRulesetResponseHeader) GoString() string {
	return s.String()
}

type ListGeoBlockSettingsRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s ListGeoBlockSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsRequest) GoString() string {
	return s.String()
}

func (s *ListGeoBlockSettingsRequest) SetDomainList(v []*string) *ListGeoBlockSettingsRequest {
	s.DomainList = v
	return s
}

type ListGeoBlockSettingsRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListGeoBlockSettingsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListGeoBlockSettingsRequestHeader) SetServiceType(v string) *ListGeoBlockSettingsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListGeoBlockSettingsPaths struct {
}

func (s ListGeoBlockSettingsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsPaths) GoString() string {
	return s.String()
}

type ListGeoBlockSettingsParameters struct {
}

func (s ListGeoBlockSettingsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsParameters) GoString() string {
	return s.String()
}

type ListGeoBlockSettingsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListGeoBlockSettingsResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListGeoBlockSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsResponse) GoString() string {
	return s.String()
}

func (s *ListGeoBlockSettingsResponse) SetCode(v string) *ListGeoBlockSettingsResponse {
	s.Code = &v
	return s
}

func (s *ListGeoBlockSettingsResponse) SetMsg(v string) *ListGeoBlockSettingsResponse {
	s.Msg = &v
	return s
}

func (s *ListGeoBlockSettingsResponse) SetData(v []*ListGeoBlockSettingsResponseData) *ListGeoBlockSettingsResponse {
	s.Data = v
	return s
}

type ListGeoBlockSettingsResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Countries and regions that have been blocked.","zh_CN":"已设置拦截的国家和地区。"}
	BlockConditions []*string `json:"blockConditions,omitempty" xml:"blockConditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListGeoBlockSettingsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsResponseData) GoString() string {
	return s.String()
}

func (s *ListGeoBlockSettingsResponseData) SetDomain(v string) *ListGeoBlockSettingsResponseData {
	s.Domain = &v
	return s
}

func (s *ListGeoBlockSettingsResponseData) SetBlockConditions(v []*string) *ListGeoBlockSettingsResponseData {
	s.BlockConditions = v
	return s
}

type ListGeoBlockSettingsResponseHeader struct {
}

func (s ListGeoBlockSettingsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListGeoBlockSettingsResponseHeader) GoString() string {
	return s.String()
}

type UpdateDomainBaseInfoRequest struct {
	// {"en":"data.","zh_CN":"数据。"}
	Data []*UpdateDomainBaseInfoRequestData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDomainBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateDomainBaseInfoRequest) SetData(v []*UpdateDomainBaseInfoRequestData) *UpdateDomainBaseInfoRequest {
	s.Data = v
	return s
}

type UpdateDomainBaseInfoRequestData struct {
	// {"en":"domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Layer 7 HTTP DDoS protection switch, on: 'ON', off: 'OFF'","zh_CN":"7层HTTP DDoS防护开关，开启：'ON'，关闭：'OFF'"}
	L7DdosSwitch *string `json:"l7DdosSwitch,omitempty" xml:"l7DdosSwitch,omitempty"`
	// {"en":"Built in protective switch, on: 'ON', off: 'OFF'","zh_CN":"内置防护开关，开启：'ON'，关闭：'OFF'"}
	InnerSwitch *string `json:"innerSwitch,omitempty" xml:"innerSwitch,omitempty"`
	// {"en":"Is AI intelligent protection enabled? On: 'ON', Off: 'OFF'","zh_CN":"是否启用AI智能防护, 开启：'ON'，关闭：'OFF'"}
	AiSwitch *string `json:"aiSwitch,omitempty" xml:"aiSwitch,omitempty"`
	// {"en":"Protection mode, loose: 'LOOSE', moderate: 'MODERATE',strict: 'STRICT'","zh_CN":"防护模式, 宽松: 'LOOSE',   适中: 'MODERATE',严格: 'STRICT'"}
	ProtectMode *string `json:"protectMode,omitempty" xml:"protectMode,omitempty"`
	// {"en":"AI rule action, intercept: 'BLOCK', monitor: 'LOG',DDoS Managed Challenge: 'RR'","zh_CN":"ai规则动作，拦截:'BLOCK'，监控：'LOG',DDoS托管：'RR'"}
	AiAction *string `json:"aiAction,omitempty" xml:"aiAction,omitempty"`
}

func (s UpdateDomainBaseInfoRequestData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoRequestData) GoString() string {
	return s.String()
}

func (s *UpdateDomainBaseInfoRequestData) SetDomain(v string) *UpdateDomainBaseInfoRequestData {
	s.Domain = &v
	return s
}

func (s *UpdateDomainBaseInfoRequestData) SetL7DdosSwitch(v string) *UpdateDomainBaseInfoRequestData {
	s.L7DdosSwitch = &v
	return s
}

func (s *UpdateDomainBaseInfoRequestData) SetInnerSwitch(v string) *UpdateDomainBaseInfoRequestData {
	s.InnerSwitch = &v
	return s
}

func (s *UpdateDomainBaseInfoRequestData) SetAiSwitch(v string) *UpdateDomainBaseInfoRequestData {
	s.AiSwitch = &v
	return s
}

func (s *UpdateDomainBaseInfoRequestData) SetProtectMode(v string) *UpdateDomainBaseInfoRequestData {
	s.ProtectMode = &v
	return s
}

func (s *UpdateDomainBaseInfoRequestData) SetAiAction(v string) *UpdateDomainBaseInfoRequestData {
	s.AiAction = &v
	return s
}

type UpdateDomainBaseInfoRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateDomainBaseInfoRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateDomainBaseInfoRequestHeader) SetServiceType(v string) *UpdateDomainBaseInfoRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateDomainBaseInfoPaths struct {
}

func (s UpdateDomainBaseInfoPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoPaths) GoString() string {
	return s.String()
}

type UpdateDomainBaseInfoParameters struct {
}

func (s UpdateDomainBaseInfoParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoParameters) GoString() string {
	return s.String()
}

type UpdateDomainBaseInfoResponse struct {
	// {"en":"code","zh_CN":"返回code"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"msg","zh_CN":"msg"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateDomainBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateDomainBaseInfoResponse) SetCode(v string) *UpdateDomainBaseInfoResponse {
	s.Code = &v
	return s
}

func (s *UpdateDomainBaseInfoResponse) SetMsg(v string) *UpdateDomainBaseInfoResponse {
	s.Msg = &v
	return s
}

type UpdateDomainBaseInfoResponseHeader struct {
}

func (s UpdateDomainBaseInfoResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainBaseInfoResponseHeader) GoString() string {
	return s.String()
}

type AddWorkflowRuleRequest struct {
	// {"en":"Hostname.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule name.Does not support # and &, maximum 50 characters.","zh_CN":"规则名称。不支持 # 和 &，最多50个字符。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule description.","zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Process actions.\nNO_USE: not used\nBLOCK: block\nLOG: log\nCustom response ID: Custom response ID","zh_CN":"处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控\n自定义响应ID:自定义响应ID"}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Statistical period, unit is seconds.","zh_CN":"统计周期，单位是秒。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty" require:"true"`
	// {"en":"Statistical granularity.\nIP: Client IP\nIP-UA: Client IP and User-Agent","zh_CN":"统计粒度。\nIP：客户端IP\nIP-UA：客户端IP和User-Agent"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty" require:"true"`
	// {"en":"Protection scope, supports multiple.","zh_CN":"防护范围，支持多个。"}
	ProtectionScope []*AddWorkflowRuleRequestProtectionScope `json:"protectionScope,omitempty" xml:"protectionScope,omitempty" require:"true" type:"Repeated"`
	// {"en":"Web scene trigger conditions, Need to fill in when mode is WEB.","zh_CN":"Web场景触发条件，mode为WEB时需要传。"}
	WebRuleCondition []*AddWorkflowRuleRequestWebRuleCondition `json:"webRuleCondition,omitempty" xml:"webRuleCondition,omitempty" type:"Repeated"`
	// {"en":"API scene trigger conditions. Need to fill in when mode is API.","zh_CN":"API场景触发条件，mode为API时需要传。"}
	ApiRuleCondition []*AddWorkflowRuleRequestApiRuleCondition `json:"apiRuleCondition,omitempty" xml:"apiRuleCondition,omitempty" type:"Repeated"`
	// {"en":"Protected target.\nWEB: WEB\nAPI: API","zh_CN":"应用场景。\nWEB：WEB场景\nAPI：API场景"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Exception path is only supported in the Web scenario, but not in the API scenario.","zh_CN":"例外路径，只有Web场景时支持，API场景时不支持。"}
	WlUri []*string `json:"wlUri,omitempty" xml:"wlUri,omitempty" type:"Repeated"`
}

func (s AddWorkflowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleRequest) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleRequest) SetDomain(v string) *AddWorkflowRuleRequest {
	s.Domain = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetRuleName(v string) *AddWorkflowRuleRequest {
	s.RuleName = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetRuleDescription(v string) *AddWorkflowRuleRequest {
	s.RuleDescription = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetAct(v string) *AddWorkflowRuleRequest {
	s.Act = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetStatisticalPeriod(v int) *AddWorkflowRuleRequest {
	s.StatisticalPeriod = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetStatisticalItem(v string) *AddWorkflowRuleRequest {
	s.StatisticalItem = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetProtectionScope(v []*AddWorkflowRuleRequestProtectionScope) *AddWorkflowRuleRequest {
	s.ProtectionScope = v
	return s
}

func (s *AddWorkflowRuleRequest) SetWebRuleCondition(v []*AddWorkflowRuleRequestWebRuleCondition) *AddWorkflowRuleRequest {
	s.WebRuleCondition = v
	return s
}

func (s *AddWorkflowRuleRequest) SetApiRuleCondition(v []*AddWorkflowRuleRequestApiRuleCondition) *AddWorkflowRuleRequest {
	s.ApiRuleCondition = v
	return s
}

func (s *AddWorkflowRuleRequest) SetMode(v string) *AddWorkflowRuleRequest {
	s.Mode = &v
	return s
}

func (s *AddWorkflowRuleRequest) SetWlUri(v []*string) *AddWorkflowRuleRequest {
	s.WlUri = v
	return s
}

type AddWorkflowRuleRequestProtectionScope struct {
	// {"en":"Protection type.\nPath: path\nURI:URI","zh_CN":"防护路径。\nPath：路径\nURI：URI"}
	ProtectionName *string `json:"protectionName,omitempty" xml:"protectionName,omitempty" require:"true"`
	// {"en":"Match type.\nEQUAL: equals\nREGEX: regex match\nCONTAIN: contains","zh_CN":"防护路径。\nEQUAL：相等\nREGEX：正则匹配\nCONTAIN：相等"}
	ProtectionType *string `json:"protectionType,omitempty" xml:"protectionType,omitempty" require:"true"`
	// {"en":"Protection path.","zh_CN":"防护路径。"}
	ProtectionPath *string `json:"protectionPath,omitempty" xml:"protectionPath,omitempty" require:"true"`
}

func (s AddWorkflowRuleRequestProtectionScope) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleRequestProtectionScope) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleRequestProtectionScope) SetProtectionName(v string) *AddWorkflowRuleRequestProtectionScope {
	s.ProtectionName = &v
	return s
}

func (s *AddWorkflowRuleRequestProtectionScope) SetProtectionType(v string) *AddWorkflowRuleRequestProtectionScope {
	s.ProtectionType = &v
	return s
}

func (s *AddWorkflowRuleRequestProtectionScope) SetProtectionPath(v string) *AddWorkflowRuleRequestProtectionScope {
	s.ProtectionPath = &v
	return s
}

type AddWorkflowRuleRequestWebRuleCondition struct {
	// {"en":"Request determination.\nNUM: Request quantity determination\nPERCENT: Request proportion determination","zh_CN":"请求判定。\nNUM：请求数量判定\nPERCENT：请求比例判定"}
	RequestJudge *string `json:"requestJudge,omitempty" xml:"requestJudge,omitempty" require:"true"`
	// {"en":"Request type.\nTOTAL: Total requests\nPOST: POST requests\nGET: GET requests\nPIC: Picture resource requests\nCSS: CSS resource requests\nJS: JS resource requests\nOTHER: Other resource requests","zh_CN":"请求类型。\nTOTAL：总请求数\nPOST：POST请求数\nGET：GET请求数\nPIC ：图片资源请求数\nCSS：CSS资源请求数\nJS：JS资源请求数\nOTHER：其他资源请求数"}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {"en":"Denominator request type, supported when requestJudge is used to PERCENT.\nTOTAL: total number of requests\nPOST: number of POST requests\nGET: number of GET requests\nPIC: number of image resource requests\nCSS: number of CSS resource requests\nJS: JS resource request Number\nOTHER: Number of other resource requests","zh_CN":"分母请求类型，requestJudge为请求比例判定的才填写。\nTOTAL：总请求数\nPOST：POST请求数\nGET：GET请求数\nPIC：图片资源请求数\nCSS：CSS资源请求数\nJS：JS资源请求数\nOTHER：其他资源请求数"}
	RequestTotalType *string `json:"requestTotalType,omitempty" xml:"requestTotalType,omitempty"`
	// {"en":"Determine comparison conditions.\nGT: greater than\nLT: less than\nGTE: greater than or equal to\nLTE: less than or equal to","zh_CN":"判定比较条件。\nGT：大于\nLT：小于\nGTE：大于等于\nLTE：小于等于"}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {"en":"Determine comparison value.","zh_CN":"判定比较值。"}
	JudgeValue *int `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
}

func (s AddWorkflowRuleRequestWebRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleRequestWebRuleCondition) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleRequestWebRuleCondition) SetRequestJudge(v string) *AddWorkflowRuleRequestWebRuleCondition {
	s.RequestJudge = &v
	return s
}

func (s *AddWorkflowRuleRequestWebRuleCondition) SetRequestType(v string) *AddWorkflowRuleRequestWebRuleCondition {
	s.RequestType = &v
	return s
}

func (s *AddWorkflowRuleRequestWebRuleCondition) SetRequestTotalType(v string) *AddWorkflowRuleRequestWebRuleCondition {
	s.RequestTotalType = &v
	return s
}

func (s *AddWorkflowRuleRequestWebRuleCondition) SetJudgeType(v string) *AddWorkflowRuleRequestWebRuleCondition {
	s.JudgeType = &v
	return s
}

func (s *AddWorkflowRuleRequestWebRuleCondition) SetJudgeValue(v int) *AddWorkflowRuleRequestWebRuleCondition {
	s.JudgeValue = &v
	return s
}

type AddWorkflowRuleRequestApiRuleCondition struct {
	// {"en":"Request type.\nTOTAL: total requests,maximum configuration is 1\nOTHER: number of other URL requests,maximum configuration is 1\nCUSTOMIZE: number of custom URL requests,configure at least one and a maximum of 20","zh_CN":"请求类型。\nTOTAL：总请求数，最多配置1条\nOTHER：其他URL请求数，最多配置1条\nCUSTOMIZE：自定义URL请求数，至少配置一条，最多配置20条"}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {"en":"Determine comparison conditions.\nGT: greater than\nLT: less than\nGTE: greater than or equal to\nLTE: less than or equal to","zh_CN":"判定比较条件。\nGT：大于\nLT：小于\nGTE：大于等于\nLTE：小于等于"}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {"en":"Determine comparison value.","zh_CN":"判定比较值。"}
	JudgeValue *int `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
	// {"en":"Customized url match type. Fill in when the request type is custom.\nPath: path\nURI: URI","zh_CN":"自定义url匹配类型。请求类型为自定义时填写。\nPath：路径\nURI：URI"}
	CustomizeMatchName *string `json:"customizeMatchName,omitempty" xml:"customizeMatchName,omitempty"`
	// {"en":"Customized url matching method.\nDICT: complete matching\nREGEX: regular matching\nCONTAIN: contains","zh_CN":"自定义url匹配方式。\nDICT：完整匹配\nREGEX：正则匹配\nCONTAIN：相等"}
	CustomizePathMatch *string `json:"customizePathMatch,omitempty" xml:"customizePathMatch,omitempty"`
	// {"en":"Custom url, Fill in when the request type is custom.","zh_CN":"自定义url，请求类型为自定义时填写。"}
	CustomizePath *string `json:"customizePath,omitempty" xml:"customizePath,omitempty"`
}

func (s AddWorkflowRuleRequestApiRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleRequestApiRuleCondition) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetRequestType(v string) *AddWorkflowRuleRequestApiRuleCondition {
	s.RequestType = &v
	return s
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetJudgeType(v string) *AddWorkflowRuleRequestApiRuleCondition {
	s.JudgeType = &v
	return s
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetJudgeValue(v int) *AddWorkflowRuleRequestApiRuleCondition {
	s.JudgeValue = &v
	return s
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetCustomizeMatchName(v string) *AddWorkflowRuleRequestApiRuleCondition {
	s.CustomizeMatchName = &v
	return s
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetCustomizePathMatch(v string) *AddWorkflowRuleRequestApiRuleCondition {
	s.CustomizePathMatch = &v
	return s
}

func (s *AddWorkflowRuleRequestApiRuleCondition) SetCustomizePath(v string) *AddWorkflowRuleRequestApiRuleCondition {
	s.CustomizePath = &v
	return s
}

type AddWorkflowRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s AddWorkflowRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleRequestHeader) SetServiceType(v string) *AddWorkflowRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type AddWorkflowRulePaths struct {
}

func (s AddWorkflowRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRulePaths) GoString() string {
	return s.String()
}

type AddWorkflowRuleParameters struct {
}

func (s AddWorkflowRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleParameters) GoString() string {
	return s.String()
}

type AddWorkflowRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s AddWorkflowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleResponse) GoString() string {
	return s.String()
}

func (s *AddWorkflowRuleResponse) SetCode(v string) *AddWorkflowRuleResponse {
	s.Code = &v
	return s
}

func (s *AddWorkflowRuleResponse) SetMsg(v string) *AddWorkflowRuleResponse {
	s.Msg = &v
	return s
}

func (s *AddWorkflowRuleResponse) SetData(v string) *AddWorkflowRuleResponse {
	s.Data = &v
	return s
}

type AddWorkflowRuleResponseHeader struct {
}

func (s AddWorkflowRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AddWorkflowRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateWorkflowRuleRequest struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Rule name.Does not support # and &,  maximum 50 characters.","zh_CN":"规则名称。不支持 # 和 &，最多50个字符。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Rule description.","zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Process actions.\nNO_USE: not used\nBLOCK: block\nLOG: log\ncustom action primary key id","zh_CN":"处理动作。\nNO_USE：不使用\nBLOCK：拦截\nLOG：监控\n自定义处理动作主键id"}
	Act *string `json:"act,omitempty" xml:"act,omitempty"`
	// {"en":"Statistical period, unit is seconds.","zh_CN":"统计周期，单位是秒。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty"`
	// {"en":"Statistical granularity.\nIP: Client IP\nIP-UA: Client IP and User-Agent","zh_CN":"统计粒度。\nIP：客户端IP\nIP-UA：客户端IP和User-Agent"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty"`
	// {"en":"Protection scope, supports multiple.","zh_CN":"防护范围，支持多个。"}
	ProtectionScope []*UpdateWorkflowRuleRequestProtectionScope `json:"protectionScope,omitempty" xml:"protectionScope,omitempty" type:"Repeated"`
	// {"en":"Web scene trigger conditions, Need to fill in when mode is WEB.","zh_CN":"Web场景触发条件，mode为WEB时需要传。"}
	WebRuleCondition []*UpdateWorkflowRuleRequestWebRuleCondition `json:"webRuleCondition,omitempty" xml:"webRuleCondition,omitempty" type:"Repeated"`
	// {"en":"API scene trigger conditions. Need to fill in when mode is API.","zh_CN":"API场景触发条件，mode为API时需要传。"}
	ApiRuleCondition []*UpdateWorkflowRuleRequestApiRuleCondition `json:"apiRuleCondition,omitempty" xml:"apiRuleCondition,omitempty" type:"Repeated"`
	// {"en":"Protected target.\nWEB: WEB\nAPI: API","zh_CN":"应用场景。\nWEB：WEB场景\nAPI：API场景"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
	// {"en":"Exception path is only supported in the Web scenario, but not in the API scenario.","zh_CN":"例外路径，只有Web场景时支持，API场景时不支持。"}
	WlUri []*string `json:"wlUri,omitempty" xml:"wlUri,omitempty" type:"Repeated"`
}

func (s UpdateWorkflowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleRequest) SetId(v string) *UpdateWorkflowRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetRuleName(v string) *UpdateWorkflowRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetRuleDescription(v string) *UpdateWorkflowRuleRequest {
	s.RuleDescription = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetAct(v string) *UpdateWorkflowRuleRequest {
	s.Act = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetStatisticalPeriod(v int) *UpdateWorkflowRuleRequest {
	s.StatisticalPeriod = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetStatisticalItem(v string) *UpdateWorkflowRuleRequest {
	s.StatisticalItem = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetProtectionScope(v []*UpdateWorkflowRuleRequestProtectionScope) *UpdateWorkflowRuleRequest {
	s.ProtectionScope = v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetWebRuleCondition(v []*UpdateWorkflowRuleRequestWebRuleCondition) *UpdateWorkflowRuleRequest {
	s.WebRuleCondition = v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetApiRuleCondition(v []*UpdateWorkflowRuleRequestApiRuleCondition) *UpdateWorkflowRuleRequest {
	s.ApiRuleCondition = v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetMode(v string) *UpdateWorkflowRuleRequest {
	s.Mode = &v
	return s
}

func (s *UpdateWorkflowRuleRequest) SetWlUri(v []*string) *UpdateWorkflowRuleRequest {
	s.WlUri = v
	return s
}

type UpdateWorkflowRuleRequestProtectionScope struct {
	// {"en":"Protection type.\nPath: path\nURI:URI","zh_CN":"防护路径。\nPath：路径\nURI：URI"}
	ProtectionName *string `json:"protectionName,omitempty" xml:"protectionName,omitempty" require:"true"`
	// {"en":"Match type.\nEQUAL: equals\nREGEX: regex match\nCONTAIN: contains","zh_CN":"防护路径。\nEQUAL：相等\nREGEX：正则匹配\nCONTAIN：相等"}
	ProtectionType *string `json:"protectionType,omitempty" xml:"protectionType,omitempty" require:"true"`
	// {"en":"Protection path.","zh_CN":"防护路径。"}
	ProtectionPath *string `json:"protectionPath,omitempty" xml:"protectionPath,omitempty" require:"true"`
}

func (s UpdateWorkflowRuleRequestProtectionScope) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleRequestProtectionScope) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleRequestProtectionScope) SetProtectionName(v string) *UpdateWorkflowRuleRequestProtectionScope {
	s.ProtectionName = &v
	return s
}

func (s *UpdateWorkflowRuleRequestProtectionScope) SetProtectionType(v string) *UpdateWorkflowRuleRequestProtectionScope {
	s.ProtectionType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestProtectionScope) SetProtectionPath(v string) *UpdateWorkflowRuleRequestProtectionScope {
	s.ProtectionPath = &v
	return s
}

type UpdateWorkflowRuleRequestWebRuleCondition struct {
	// {"en":"Request determination.\nNUM: Request quantity determination\nPERCENT: Request proportion determination","zh_CN":"请求判定。\nNUM：请求数量判定\nPERCENT：请求比例判定"}
	RequestJudge *string `json:"requestJudge,omitempty" xml:"requestJudge,omitempty" require:"true"`
	// {"en":"Request type.\nTOTAL: Total requests\nPOST: POST requests\nGET: GET requests\nPIC: Picture resource requests\nCSS: CSS resource requests\nJS: JS resource requests\nOTHER: Other resource requests","zh_CN":"请求类型。\nTOTAL：总请求数\nPOST：POST请求数\nGET：GET请求数\nPIC ：图片资源请求数\nCSS：CSS资源请求数\nJS：JS资源请求数\nOTHER：其他资源请求数"}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {"en":"Denominator request type (supported when requestJudge is used to PERCENT).\nTOTAL: total number of requests\nPOST: number of POST requests\nGET: number of GET requests\nPIC: number of image resource requests\nCSS: number of CSS resource requests\nJS: JS resource request Number\nOTHER: Number of other resource requests","zh_CN":"分母请求类型（requestJudge为请求比例判定的才填写）。\nTOTAL：总请求数\nPOST：POST请求数\nGET：GET请求数\nPIC：图片资源请求数\nCSS：CSS资源请求数\nJS：JS资源请求数\nOTHER：其他资源请求数"}
	RequestTotalType *string `json:"requestTotalType,omitempty" xml:"requestTotalType,omitempty"`
	// {"en":"Determine comparison conditions.\nGT: greater than\nLT: less than\nGTE: greater than or equal to\nLTE: less than or equal to","zh_CN":"判定比较条件。\nGT：大于\nLT：小于\nGTE：大于等于\nLTE：小于等于"}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {"en":"Determine comparison value.","zh_CN":"判定比较值。"}
	JudgeValue *int `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
}

func (s UpdateWorkflowRuleRequestWebRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleRequestWebRuleCondition) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleRequestWebRuleCondition) SetRequestJudge(v string) *UpdateWorkflowRuleRequestWebRuleCondition {
	s.RequestJudge = &v
	return s
}

func (s *UpdateWorkflowRuleRequestWebRuleCondition) SetRequestType(v string) *UpdateWorkflowRuleRequestWebRuleCondition {
	s.RequestType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestWebRuleCondition) SetRequestTotalType(v string) *UpdateWorkflowRuleRequestWebRuleCondition {
	s.RequestTotalType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestWebRuleCondition) SetJudgeType(v string) *UpdateWorkflowRuleRequestWebRuleCondition {
	s.JudgeType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestWebRuleCondition) SetJudgeValue(v int) *UpdateWorkflowRuleRequestWebRuleCondition {
	s.JudgeValue = &v
	return s
}

type UpdateWorkflowRuleRequestApiRuleCondition struct {
	// {"en":"Request type.\nTOTAL: total requests,maximum configuration is 1\nOTHER: number of other URL requests,maximum configuration is 1\nCUSTOMIZE: number of custom URL requests,configure at least one and a maximum of 20","zh_CN":"请求类型。\nTOTAL：总请求数，最多配置1条\nOTHER：其他URL请求数，最多配置1条\nCUSTOMIZE：自定义URL请求数，至少配置一条，最多配置20条"}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {"en":"Determine comparison conditions.\nGT: greater than\nLT: less than\nGTE: greater than or equal to\nLTE: less than or equal to","zh_CN":"判定比较条件。\nGT：大于\nLT：小于\nGTE：大于等于\nLTE：小于等于"}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {"en":"Determine comparison value.","zh_CN":"判定比较值。"}
	JudgeValue *int `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
	// {"en":"Customized url match type. Fill in when the request type is custom.\nPath: path\nURI: URI","zh_CN":"自定义url匹配类型。请求类型为自定义时填写。\nPath：路径\nURI：URI"}
	CustomizeMatchName *string `json:"customizeMatchName,omitempty" xml:"customizeMatchName,omitempty"`
	// {"en":"Customized url matching method.\nDICT: complete matching\nREGEX: regular matching\nCONTAIN: contains","zh_CN":"自定义url匹配方式。\nDICT：完整匹配\nREGEX：正则匹配\nCONTAIN：相等"}
	CustomizePathMatch *string `json:"customizePathMatch,omitempty" xml:"customizePathMatch,omitempty"`
	// {"en":"Custom url, Fill in when the request type is custom.","zh_CN":"自定义url，请求类型为自定义时填写。"}
	CustomizePath *string `json:"customizePath,omitempty" xml:"customizePath,omitempty"`
}

func (s UpdateWorkflowRuleRequestApiRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleRequestApiRuleCondition) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetRequestType(v string) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.RequestType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetJudgeType(v string) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.JudgeType = &v
	return s
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetJudgeValue(v int) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.JudgeValue = &v
	return s
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetCustomizeMatchName(v string) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.CustomizeMatchName = &v
	return s
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetCustomizePathMatch(v string) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.CustomizePathMatch = &v
	return s
}

func (s *UpdateWorkflowRuleRequestApiRuleCondition) SetCustomizePath(v string) *UpdateWorkflowRuleRequestApiRuleCondition {
	s.CustomizePath = &v
	return s
}

type UpdateWorkflowRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateWorkflowRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleRequestHeader) SetServiceType(v string) *UpdateWorkflowRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateWorkflowRulePaths struct {
}

func (s UpdateWorkflowRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRulePaths) GoString() string {
	return s.String()
}

type UpdateWorkflowRuleParameters struct {
}

func (s UpdateWorkflowRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleParameters) GoString() string {
	return s.String()
}

type UpdateWorkflowRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateWorkflowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRuleResponse) SetCode(v string) *UpdateWorkflowRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateWorkflowRuleResponse) SetMsg(v string) *UpdateWorkflowRuleResponse {
	s.Msg = &v
	return s
}

type UpdateWorkflowRuleResponseHeader struct {
}

func (s UpdateWorkflowRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateDetectionLengthLimitConfigurationRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Maximum detection length of the request body, in KB.Allowed values are from 1 to 128.","zh_CN":"请求正文最大检测长度，单位 KB。取值范围：1-128。"}
	BodyDetectionLength *int `json:"bodyDetectionLength,omitempty" xml:"bodyDetectionLength,omitempty" require:"true"`
}

func (s UpdateDetectionLengthLimitConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateDetectionLengthLimitConfigurationRequest) SetDomainList(v []*string) *UpdateDetectionLengthLimitConfigurationRequest {
	s.DomainList = v
	return s
}

func (s *UpdateDetectionLengthLimitConfigurationRequest) SetBodyDetectionLength(v int) *UpdateDetectionLengthLimitConfigurationRequest {
	s.BodyDetectionLength = &v
	return s
}

type UpdateDetectionLengthLimitConfigurationRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateDetectionLengthLimitConfigurationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateDetectionLengthLimitConfigurationRequestHeader) SetServiceType(v string) *UpdateDetectionLengthLimitConfigurationRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateDetectionLengthLimitConfigurationPaths struct {
}

func (s UpdateDetectionLengthLimitConfigurationPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationPaths) GoString() string {
	return s.String()
}

type UpdateDetectionLengthLimitConfigurationParameters struct {
}

func (s UpdateDetectionLengthLimitConfigurationParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationParameters) GoString() string {
	return s.String()
}

type UpdateDetectionLengthLimitConfigurationResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *UpdateDetectionLengthLimitConfigurationResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateDetectionLengthLimitConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateDetectionLengthLimitConfigurationResponse) SetCode(v int) *UpdateDetectionLengthLimitConfigurationResponse {
	s.Code = &v
	return s
}

func (s *UpdateDetectionLengthLimitConfigurationResponse) SetMsg(v string) *UpdateDetectionLengthLimitConfigurationResponse {
	s.Msg = &v
	return s
}

func (s *UpdateDetectionLengthLimitConfigurationResponse) SetData(v *UpdateDetectionLengthLimitConfigurationResponseData) *UpdateDetectionLengthLimitConfigurationResponse {
	s.Data = v
	return s
}

type UpdateDetectionLengthLimitConfigurationResponseData struct {
	// {"en":"Array.","zh_CN":"数组。"}
	Array []*UpdateDetectionLengthLimitConfigurationResponseDataArray `json:"array,omitempty" xml:"array,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDetectionLengthLimitConfigurationResponseData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationResponseData) GoString() string {
	return s.String()
}

func (s *UpdateDetectionLengthLimitConfigurationResponseData) SetArray(v []*UpdateDetectionLengthLimitConfigurationResponseDataArray) *UpdateDetectionLengthLimitConfigurationResponseData {
	s.Array = v
	return s
}

type UpdateDetectionLengthLimitConfigurationResponseDataArray struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Maximum detection length of the request body, in KB.","zh_CN":"请求正文最大检测长度，单位 KB。"}
	BodyDetectionLength *int `json:"bodyDetectionLength,omitempty" xml:"bodyDetectionLength,omitempty" require:"true"`
}

func (s UpdateDetectionLengthLimitConfigurationResponseDataArray) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationResponseDataArray) GoString() string {
	return s.String()
}

func (s *UpdateDetectionLengthLimitConfigurationResponseDataArray) SetDomain(v string) *UpdateDetectionLengthLimitConfigurationResponseDataArray {
	s.Domain = &v
	return s
}

func (s *UpdateDetectionLengthLimitConfigurationResponseDataArray) SetBodyDetectionLength(v int) *UpdateDetectionLengthLimitConfigurationResponseDataArray {
	s.BodyDetectionLength = &v
	return s
}

type UpdateDetectionLengthLimitConfigurationResponseHeader struct {
}

func (s UpdateDetectionLengthLimitConfigurationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDetectionLengthLimitConfigurationResponseHeader) GoString() string {
	return s.String()
}

type GetResponsePageOfDenyActionDetailRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s GetResponsePageOfDenyActionDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailRequest) GoString() string {
	return s.String()
}

func (s *GetResponsePageOfDenyActionDetailRequest) SetDomain(v string) *GetResponsePageOfDenyActionDetailRequest {
	s.Domain = &v
	return s
}

type GetResponsePageOfDenyActionDetailRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetResponsePageOfDenyActionDetailRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailRequestHeader) GoString() string {
	return s.String()
}

func (s *GetResponsePageOfDenyActionDetailRequestHeader) SetServiceType(v string) *GetResponsePageOfDenyActionDetailRequestHeader {
	s.ServiceType = &v
	return s
}

type GetResponsePageOfDenyActionDetailPaths struct {
}

func (s GetResponsePageOfDenyActionDetailPaths) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailPaths) GoString() string {
	return s.String()
}

type GetResponsePageOfDenyActionDetailParameters struct {
}

func (s GetResponsePageOfDenyActionDetailParameters) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailParameters) GoString() string {
	return s.String()
}

type GetResponsePageOfDenyActionDetailResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *GetResponsePageOfDenyActionDetailResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetResponsePageOfDenyActionDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailResponse) GoString() string {
	return s.String()
}

func (s *GetResponsePageOfDenyActionDetailResponse) SetCode(v string) *GetResponsePageOfDenyActionDetailResponse {
	s.Code = &v
	return s
}

func (s *GetResponsePageOfDenyActionDetailResponse) SetMsg(v string) *GetResponsePageOfDenyActionDetailResponse {
	s.Msg = &v
	return s
}

func (s *GetResponsePageOfDenyActionDetailResponse) SetData(v *GetResponsePageOfDenyActionDetailResponseData) *GetResponsePageOfDenyActionDetailResponse {
	s.Data = v
	return s
}

type GetResponsePageOfDenyActionDetailResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Interception action response mode.\nDEFAULT:System default\nCUSTOMIZE:Custom","zh_CN":"拦截动作响应模式。\nDEFAULT：系统默认\nCUSTOMIZE：自定义","exampleValue":"DEFAULT,CUSTOMIZE"}
	BlockResponseMode *string `json:"blockResponseMode,omitempty" xml:"blockResponseMode,omitempty" require:"true"`
	// {"en":"Associated custom response id.","zh_CN":"关联自定义响应id。"}
	RateShareCustomizeActionId *string `json:"rateShareCustomizeActionId,omitempty" xml:"rateShareCustomizeActionId,omitempty" require:"true"`
	// {"en":"Associate a custom response name.","zh_CN":"关联自定义响应名称。"}
	ShareCustomizeActionName *string `json:"shareCustomizeActionName,omitempty" xml:"shareCustomizeActionName,omitempty" require:"true"`
}

func (s GetResponsePageOfDenyActionDetailResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailResponseData) GoString() string {
	return s.String()
}

func (s *GetResponsePageOfDenyActionDetailResponseData) SetDomain(v string) *GetResponsePageOfDenyActionDetailResponseData {
	s.Domain = &v
	return s
}

func (s *GetResponsePageOfDenyActionDetailResponseData) SetBlockResponseMode(v string) *GetResponsePageOfDenyActionDetailResponseData {
	s.BlockResponseMode = &v
	return s
}

func (s *GetResponsePageOfDenyActionDetailResponseData) SetRateShareCustomizeActionId(v string) *GetResponsePageOfDenyActionDetailResponseData {
	s.RateShareCustomizeActionId = &v
	return s
}

func (s *GetResponsePageOfDenyActionDetailResponseData) SetShareCustomizeActionName(v string) *GetResponsePageOfDenyActionDetailResponseData {
	s.ShareCustomizeActionName = &v
	return s
}

type GetResponsePageOfDenyActionDetailResponseHeader struct {
}

func (s GetResponsePageOfDenyActionDetailResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetResponsePageOfDenyActionDetailResponseHeader) GoString() string {
	return s.String()
}

type QueryFingerprintAnalysisRequest struct {
	// {"en":"domain.", "zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s QueryFingerprintAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisRequest) GoString() string {
	return s.String()
}

func (s *QueryFingerprintAnalysisRequest) SetDomain(v string) *QueryFingerprintAnalysisRequest {
	s.Domain = &v
	return s
}

type QueryFingerprintAnalysisResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"QueryFingerprintAnalysisData returned.", "zh_CN":"返回数据。"}
	QueryFingerprintAnalysisData *QueryFingerprintAnalysisData `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryFingerprintAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisResponse) GoString() string {
	return s.String()
}

func (s *QueryFingerprintAnalysisResponse) SetCode(v string) *QueryFingerprintAnalysisResponse {
	s.Code = &v
	return s
}

func (s *QueryFingerprintAnalysisResponse) SetMessage(v string) *QueryFingerprintAnalysisResponse {
	s.Message = &v
	return s
}

func (s *QueryFingerprintAnalysisResponse) SetData(v *QueryFingerprintAnalysisData) *QueryFingerprintAnalysisResponse {
	s.QueryFingerprintAnalysisData = v
	return s
}

type QueryFingerprintAnalysisData struct {
	// {"en":"User fingerprint analysis.", "zh_CN":"用户指纹分析。"}
	Edgebot_user_fingerprint_challenge *QueryFingerprintAnalysisFingerprint `json:"edgebot_user_fingerprint_challenge,omitempty" xml:"edgebot_user_fingerprint_challenge,omitempty" require:"true"`
	// {"en":"Browser fingerprint analysis.", "zh_CN":"浏览器指纹分析。"}
	Edgebot_device_fingerprint_challenge *QueryFingerprintAnalysisFingerprint `json:"edgebot_device_fingerprint_challenge,omitempty" xml:"edgebot_device_fingerprint_challenge,omitempty" require:"true"`
}

func (s QueryFingerprintAnalysisData) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisData) GoString() string {
	return s.String()
}

func (s *QueryFingerprintAnalysisData) SetEdgebot_user_fingerprint_challenge(v *QueryFingerprintAnalysisFingerprint) *QueryFingerprintAnalysisData {
	s.Edgebot_user_fingerprint_challenge = v
	return s
}

func (s *QueryFingerprintAnalysisData) SetEdgebot_device_fingerprint_challenge(v *QueryFingerprintAnalysisFingerprint) *QueryFingerprintAnalysisData {
	s.Edgebot_device_fingerprint_challenge = v
	return s
}

type QueryFingerprintAnalysisFingerprint struct {
	// {"en":"Switch for user fingerprint analysis.
	//  0:OFF
	//  1:ON", "zh_CN":"指纹开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Analysis frequency. Unit: min", "zh_CN":"分析频率。单位：分"}
	Analysis_frequency *int `json:"analysis_frequency,omitempty" xml:"analysis_frequency,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: min", "zh_CN":"触发条件-统计周期。单位：分"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Number of IP.", "zh_CN":"IP个数。"}
	Ip_threshold *int `json:"ip_threshold,omitempty" xml:"ip_threshold,omitempty" require:"true"`
	// {"en":"Processing action.
	//   1:blok
	//  2:Log
	//  5:Reset", "zh_CN":"处理动作。
	//  1：拦截
	//  2：监控
	//  5：断开连接"}
	Action_type *int `json:"action_type,omitempty" xml:"action_type,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit:min", "zh_CN":"处理动作持续时间。单位：分"}
	Action_time *int `json:"action_time,omitempty" xml:"action_time,omitempty" require:"true"`
	// {"en":"Details of protection path.", "zh_CN":"防护路径内容。"}
	Fp_rows []*QueryFingerprintAnalysisFpRows `json:"fp_rows,omitempty" xml:"fp_rows,omitempty" require:"true" type:"Repeated"`
}

func (s QueryFingerprintAnalysisFingerprint) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisFingerprint) GoString() string {
	return s.String()
}

func (s *QueryFingerprintAnalysisFingerprint) SetEnable(v int) *QueryFingerprintAnalysisFingerprint {
	s.Enable = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetAnalysis_frequency(v int) *QueryFingerprintAnalysisFingerprint {
	s.Analysis_frequency = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetStatistical_period(v int) *QueryFingerprintAnalysisFingerprint {
	s.Statistical_period = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetIp_threshold(v int) *QueryFingerprintAnalysisFingerprint {
	s.Ip_threshold = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetAction_type(v int) *QueryFingerprintAnalysisFingerprint {
	s.Action_type = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetAction_time(v int) *QueryFingerprintAnalysisFingerprint {
	s.Action_time = &v
	return s
}

func (s *QueryFingerprintAnalysisFingerprint) SetFp_rows(v []*QueryFingerprintAnalysisFpRows) *QueryFingerprintAnalysisFingerprint {
	s.Fp_rows = v
	return s
}

type QueryFingerprintAnalysisFpRows struct {
	// {"en":"Protection scope.
	//  0:All
	//  3:Full URI
	//  4:Regex", "zh_CN":"防护范围。
	//   0：全站
	//  3：完整URI
	//  4：正则匹配"}
	Protection_scope *int `json:"protection_scope,omitempty" xml:"protection_scope,omitempty" require:"true"`
	// {"en":"Request method for protection.
	//  0:All
	//  1:GET
	//  2:POST
	//  3:GET/POST", "zh_CN":"防护的请求方法 。
	//   0：All
	//  1：GET
	//  2：POST
	//  3：GET/POST"}
	Protection_method *int `json:"protection_method,omitempty" xml:"protection_method,omitempty" require:"true"`
	// {"en":"Content of protection path.", "zh_CN":"防护路径内容。"}
	Protection_content *string `json:"protection_content,omitempty" xml:"protection_content,omitempty" require:"true"`
}

func (s QueryFingerprintAnalysisFpRows) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisFpRows) GoString() string {
	return s.String()
}

func (s *QueryFingerprintAnalysisFpRows) SetProtection_scope(v int) *QueryFingerprintAnalysisFpRows {
	s.Protection_scope = &v
	return s
}

func (s *QueryFingerprintAnalysisFpRows) SetProtection_method(v int) *QueryFingerprintAnalysisFpRows {
	s.Protection_method = &v
	return s
}

func (s *QueryFingerprintAnalysisFpRows) SetProtection_content(v string) *QueryFingerprintAnalysisFpRows {
	s.Protection_content = &v
	return s
}

type QueryFingerprintAnalysisPaths struct {
}

func (s QueryFingerprintAnalysisPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisPaths) GoString() string {
	return s.String()
}

type QueryFingerprintAnalysisParameters struct {
}

func (s QueryFingerprintAnalysisParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisParameters) GoString() string {
	return s.String()
}

type QueryFingerprintAnalysisRequestHeader struct {
}

func (s QueryFingerprintAnalysisRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisRequestHeader) GoString() string {
	return s.String()
}

type QueryFingerprintAnalysisResponseHeader struct {
}

func (s QueryFingerprintAnalysisResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryFingerprintAnalysisResponseHeader) GoString() string {
	return s.String()
}

type DeleteConsumerRequest struct {
	// {"en":"List of Consumer ID to delete.", "zh_CN":"要删除的消费方ID数组。"}
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteConsumerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerRequest) SetIds(v []*string) *DeleteConsumerRequest {
	s.Ids = v
	return s
}

type DeleteConsumerResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"List of deleted consumer names.", "zh_CN":"被删除的消费方名称数组。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteConsumerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerResponse) SetCode(v int) *DeleteConsumerResponse {
	s.Code = &v
	return s
}

func (s *DeleteConsumerResponse) SetMsg(v string) *DeleteConsumerResponse {
	s.Msg = &v
	return s
}

func (s *DeleteConsumerResponse) SetData(v []*string) *DeleteConsumerResponse {
	s.Data = v
	return s
}

type DeleteConsumerPaths struct {
}

func (s DeleteConsumerPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerPaths) GoString() string {
	return s.String()
}

type DeleteConsumerParameters struct {
}

func (s DeleteConsumerParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerParameters) GoString() string {
	return s.String()
}

type DeleteConsumerRequestHeader struct {
}

func (s DeleteConsumerRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerRequestHeader) GoString() string {
	return s.String()
}

type DeleteConsumerResponseHeader struct {
}

func (s DeleteConsumerResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerResponseHeader) GoString() string {
	return s.String()
}

type UpdateAslConfigRequest struct {
	// {"en":"Customer code", "zh_CN":"客户code"}
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty" require:"true"`
	// {"en":"Domain name", "zh_CN":"域名名称"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Custom rule switch,0:close,1:open", "zh_CN":"客户自定义规则开关，0：关闭，1：开启"}
	CustomSwitch *string `json:"customSwitch,omitempty" xml:"customSwitch,omitempty" require:"true"`
	// {"en":"Rule adding mode: 0: new, 1: overwrite (Note that the overwrite mode will clear all the original rules, and all the required configurations need to be transmitted at the same time)",
	//     "zh_CN":"规则添加方式，0：新增，1：覆盖（注意，覆盖模式会把原本的规则都清空，需要同时传全部需要的配置）"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {'en':'Custom Rule Content', 'zh_CN':'自定义规则内容'}
	Data []*UpdateAslConfigRequestData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateAslConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequest) SetCustomCode(v string) *UpdateAslConfigRequest {
	s.CustomCode = &v
	return s
}

func (s *UpdateAslConfigRequest) SetDomain(v string) *UpdateAslConfigRequest {
	s.Domain = &v
	return s
}

func (s *UpdateAslConfigRequest) SetCustomSwitch(v string) *UpdateAslConfigRequest {
	s.CustomSwitch = &v
	return s
}

func (s *UpdateAslConfigRequest) SetMode(v string) *UpdateAslConfigRequest {
	s.Mode = &v
	return s
}

func (s *UpdateAslConfigRequest) SetData(v []*UpdateAslConfigRequestData) *UpdateAslConfigRequest {
	s.Data = v
	return s
}

type UpdateAslConfigRequestData struct {
	// {"en":"Rule name", "zh_CN":"规则名称"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule description", "zh_CN":"规则描述"}
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// {'en':'Matching Conditions(Parameter description: When the matching condition is HTTP Header or HTTP Header Regex,
	//                         the HTTP header and value need to be assembled using colons. Multiple values of other matching conditions are directly separated by semicolons for transmission.)', 'zh_CN':'匹配条件(参数说明：当匹配条件为HTTP Header
	//                         或者HTTP Header Regex时，Http header首部以及value需要使用冒号进行组装。其他匹配条件多个值直接使用分号分隔传输)'}
	Conditions []*UpdateAslConfigRequestDataConditions `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Repeated"`
	// {'en':'Statistical Granularity
	//            1. When the statistical granularity is Cookie
	//            	  limitKey and limitValue do not need to be passed as parameters.
	//            2. When the statistical granularity is Cookie or HTTP Header
	//                limitKey: Customer customized.
	//                limitValue: Currently there is only one value,0(Requests without keys will not be counted).
	//            3. When the statistical granularity is IP Cookie or IP HTTP Header
	//                limitKey: Customer customized
	//                limitValue: optional value,0(Requests without keys will not be counted),1(No key value and IP granular protection),Can only choose one.
	//            ',
	//            'zh_CN':'统计粒度:
	//            1、当统计粒度为Cookie
	//            		limitKey和limitValue不需要传入
	//            2、当统计粒度为Cookie或者HTTP Header时
	//            	    limitKey: 客户自定义
	//                 limitValue: 当前只有一个值: 0(无Key值不防护)
	//            3、当统计粒度为IP Cookie或者IP HTTP Header
	//                 limitKey: 客户自定义
	//                 limitValue可选值：0(无key值不防护)，1(无key值以IP粒度防护),单选且必须选一个
	//            '}
	ApplyLimit *UpdateAslConfigRequestDataApplyLimit `json:"applyLimit,omitempty" xml:"applyLimit,omitempty" require:"true" type:"Struct"`
	// {'en':'Trigger Condition', 'zh_CN':'触发条件'}
	TriggerCondition *UpdateAslConfigRequestDataTriggerCondition `json:"triggerCondition,omitempty" xml:"triggerCondition,omitempty" require:"true" type:"Struct"`
	// {'en':'Block page Setting', 'zh_CN':'自定义拦截'}
	BanHttp *UpdateAslConfigRequestDataBanHttp `json:"banHttp,omitempty" xml:"banHttp,omitempty" require:"true" type:"Struct"`
	// {'en':'action,0:Block,1:Log,2:Reset,3:Human Interaction Challenge,4:Redirect
	//            1:When the processing action is BLOCK, LOG, DROP
	//               friendlyUrl, getRule, getSecondRule, getSecondRuleCondition, postRule are invalid and can be omitted
	//            2:When the processing action is human-machine verification
	//               getRule and postRule must select at least one
	//               a)When getRule=null
	//                 At this time, getSecondRule and getSecondRuleCondition are invalid, postRule must be passed, and the transmission content is the postRule dictionary value.
	//               b)When getRule=0(UrlCookie Validation+302 Redirection) or getRule=1(Cookie Validation+302 Redirection)
	//                 getSecondRule and getSecondRuleCondition are invalid, postRule can choose empty or the dictionary value of postRule
	//               c)When getRule=2(UrlCookie Validation+JS Redirection) or getRule=3(Cookie Validation + JS Redirection) or getRule=4(Cookie Validation+Meta-JS Redirection) or getRule=5(Cookie Validation+JS Mouse Monitor)
	//                 getSecondRule and getSecondRuleCondition must be passed, postRule can choose empty or the dictionary value of postRule
	//            3:When the processing action is Redirect
	//               friendlyUrl is a required parameter
	//               The attributes getRule, getSecondRule, getSecondRuleCondition, and postRule are invalid and do not need to be passed.
	//            ',
	//            'zh_CN':'动作 0:拦截，1:告警，2:断开连接，3:人机校验,4:跳转友好页面
	//            1、当处理动作为BLOCK、LOG、DROP时
	//               friendlyUrl, getRule, getSecondRule, getSecondRuleCondition, postRule这几个属性无效，不用传
	//            2、当处理动作为人机校验
	//               getRule和postRule必须至少选择一项
	//               a)当getRule=空
	//                 此时，getSecondRule和getSecondRuleCondition无效不用传，postRule必须传，传输内容为postRule字典值
	//               a)当getRule=0(UrlCookie参数验证+302跳转)或者getRule=1(Cookie参数验证+302跳转)
	//                 getSecondRule和getSecondRuleCondition无效不用传，postRule可以选择空或者postRule的字典值
	//               b)当getRule=2(UrlCookie参数验证+JS跳转)或者getRule=3(Cookie参数验证+JS跳转)或者getRule=4(Cookie参数验证+Meta-JS跳转)或者getRule=5(Cookie参数验证+JS鼠标监听)
	//                 getSecondRule和getSecondRuleCondition为必传，postRule可以选择空或者postRule的字典值
	//            3、当处理动作为跳转友好页面
	//               friendlyUrl为必传参数
	//               getRule, getSecondRule, getSecondRuleCondition, postRule这几个属性无效，不用传
	//            '}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {'en':'Action expires after,in minutes', 'zh_CN':'处理动作持续时间,单位秒'}
	ActionDuration *string `json:"actionDuration,omitempty" xml:"actionDuration,omitempty" require:"true"`
	// {'en':'URL setting for the redirect page', 'zh_CN':'跳转友好页面地址'}
	FriendlyUrl *string `json:"friendlyUrl,omitempty" xml:"friendlyUrl,omitempty" require:"true"`
	// {'en':'GET Flood Rule,0:UrlCookie Validation+302 Redirection,1:Cookie Validation+302 Redirection,2:UrlCookie Validation+JS Redirection,
	//            3:Cookie Validation + JS Redirection,4:Cookie Validation+Meta-JS Redirection,5:Cookie Validation+JS Mouse Monitor',
	//            'zh_CN':'GET Flood第一策略,0:UrlCookie参数验证+302跳转,1:Cookie参数验证+302跳转,2:UrlCookie参数验证+JS跳转,3:Cookie参数验证+JS跳转,4:Cookie参数验证+Meta-JS跳转,5:Cookie参数验证+JS鼠标监听'}
	GetRule *string `json:"getRule,omitempty" xml:"getRule,omitempty" require:"true"`
	// {'en':'GET Flood Second Rule,0:UrlCookie Verification + 302 Redirection,1:Cookie Verification + 302 Redirection',
	//            'zh_CN':'GET Flood第二策略,0:UrlCookie参数验证+302跳转，1：Cookie参数验证+302t跳转'}
	GetSecondRule *string `json:"getSecondRule,omitempty" xml:"getSecondRule,omitempty" require:"true"`
	// {'en':'2nd Rule Enable Condition,0:Non-html Request(Accept!=text/*|text/htm),1:Non-html Request & Static URI Sufix)',
	//            'zh_CN':'第二策略启用条件,0:非html请求，1：非html请求且URI后缀是静态文件'}
	GetSecondRuleCondition *string `json:"getSecondRuleCondition,omitempty" xml:"getSecondRuleCondition,omitempty" require:"true"`
	// {"en":"0:Cookie Validation+JS Redirection,1:Cookie Validation + 307 Redirection", "zh_CN":"0:Cookie参数验证+JS跳转,1:Cookie参数验证+307跳转"}
	PostRule *string `json:"postRule,omitempty" xml:"postRule,omitempty" require:"true"`
}

func (s UpdateAslConfigRequestData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestData) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequestData) SetRuleName(v string) *UpdateAslConfigRequestData {
	s.RuleName = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetDesc(v string) *UpdateAslConfigRequestData {
	s.Desc = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetConditions(v []*UpdateAslConfigRequestDataConditions) *UpdateAslConfigRequestData {
	s.Conditions = v
	return s
}

func (s *UpdateAslConfigRequestData) SetApplyLimit(v *UpdateAslConfigRequestDataApplyLimit) *UpdateAslConfigRequestData {
	s.ApplyLimit = v
	return s
}

func (s *UpdateAslConfigRequestData) SetTriggerCondition(v *UpdateAslConfigRequestDataTriggerCondition) *UpdateAslConfigRequestData {
	s.TriggerCondition = v
	return s
}

func (s *UpdateAslConfigRequestData) SetBanHttp(v *UpdateAslConfigRequestDataBanHttp) *UpdateAslConfigRequestData {
	s.BanHttp = v
	return s
}

func (s *UpdateAslConfigRequestData) SetAction(v string) *UpdateAslConfigRequestData {
	s.Action = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetActionDuration(v string) *UpdateAslConfigRequestData {
	s.ActionDuration = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetFriendlyUrl(v string) *UpdateAslConfigRequestData {
	s.FriendlyUrl = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetGetRule(v string) *UpdateAslConfigRequestData {
	s.GetRule = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetGetSecondRule(v string) *UpdateAslConfigRequestData {
	s.GetSecondRule = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetGetSecondRuleCondition(v string) *UpdateAslConfigRequestData {
	s.GetSecondRuleCondition = &v
	return s
}

func (s *UpdateAslConfigRequestData) SetPostRule(v string) *UpdateAslConfigRequestData {
	s.PostRule = &v
	return s
}

type UpdateAslConfigRequestDataConditions struct {
	// {"en":"IP:0,IP_SEG:1,URI:4,URI_REGEX:5,USER_AGENT:6,USER_AGENT_REGEX:7,
	//                          AREA:8,HTTP_METHOD:9,REFERER:10,REFERER_REGEX:11,PROTOCOL:12,HTTP_HEADER:13,HTTP_HEADER_REGEX:14
	//                          ",
	//                          'zh_CN':'IP:0,IP_SEG:1,URI:4, URI_REGEX:5, USER_AGENT:6, USER_AGENT_REGEX:7, AREA:8,HTTP_METHOD:9,
	//                          REFERER:10,REFERER_REGEX:11,PROTOCOL:12,HTTP_HEADER:13,
	//                          HTTP_HEADER_REGEX:14
	//                          '}
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty" require:"true"`
	// {"en":"Not equal:0|Equal:1", "zh_CN":"不等于:0|等于:1"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Condition value
	//                           1.When condition=0(IP) or condition=1(IP SEG)
	//                           Supports passing in multiple items at once,separate multiple items with semicolons.
	//                           2.When condition=4(URI) or condition=5(URI_REGEX)
	//                           Supports passing in multiple items at once,separate multiple items with semicolons.
	//                           3.When condition=6(USER_AGENT) or condition=7(USER_AGENT_REGEX)
	//                           Supports passing in multiple items at once, separate multiple items with semicolons.
	//                           4.When condition=8(area)
	//                           You need to pass in the ID corresponding to the region. Use semicolons to separate multiple regions.
	//                           Refer to the API Center: https://www.wangsu.com/document/api-doc/Overview 8.Appendix description,countries,regions and provinces in Attached Table 1.
	//                           5.When condition=9(HTTP_METHOD)
	//                           Supports passing in multiple items at once, separate multiple items with semicolons.
	//                           Data dictionary (case sensitive)
	//                           GET/POST/HEAD/OPTIONS/PUT/DELETE/TRACE/CONNECT
	//                           6.When condition=10(REFERER) or condition=11(REFERER_REGEX)
	//                           Supports passing in multiple items at once,separate multiple items with semicolons.
	//                           7.When condition=12(PROTOCOL)
	//                           Supports passing in multiple items at once,separate multiple items with semicolons.
	//                           Data dictionary (case sensitive)
	//                           HTTP/HTTPS
	//                           8.When condition=13(HTTP_HEADER) or condition=14(HTTP_HEADER_REGEX)
	//                           At this time,the key and value of the HTTP Header need to be separated by colons for transmission.
	//
	//                          ", "zh_CN":"匹配内容
	//                           1、当condition=0(IP)或者condition=1(IP段)
	//                           支持一次性传入多个，多个使用分号分隔
	//                           2、当condition=4(URI)或者condition=5(URI_REGEX)
	//                           支持一次性传入多个，多个使用分号分隔
	//                           3、当condition=6(USER_AGENT)或者condition=7(USER_AGENT_REGEX)
	//                           支持一次性传入多个，多个使用分号分隔
	//                           4、当condition=8(area)
	//                           需要传入区域对应ID，多个使用分号分隔。数据字典参考：
	//                           参考API中心：https://www.wangsu.com/document/api-doc/Overview 八、附录说明，附表1中的国家地区、省份。
	//                           5、当condition=9(HTTP_METHOD)
	//                           支持一次性传入多个，多个使用分号分隔
	//                           数据字典(区分大小写)：
	//                           GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE、CONNECT
	//                           6、当condition=10(REFERER)或者condition=11(REFERER_REGEX)
	//                           多个使用分号分隔
	//                           7、当condition=12(PROTOCOL)
	//                           支持一次性传输多个，多个使用分号分隔
	//                           数据字典(区分大小写)：
	//                           HTTP、HTTPS
	//                           8、当condition=13(HTTP_HEADER)或者condition=14(HTTP_HEADER_REGEX)
	//                           此时需要把HTTP Header的key和value用冒号分隔进行传输
	//
	//                          "}
	ConditionValue *string `json:"conditionValue,omitempty" xml:"conditionValue,omitempty" require:"true"`
}

func (s UpdateAslConfigRequestDataConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestDataConditions) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequestDataConditions) SetCondition(v string) *UpdateAslConfigRequestDataConditions {
	s.Condition = &v
	return s
}

func (s *UpdateAslConfigRequestDataConditions) SetMatchType(v string) *UpdateAslConfigRequestDataConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateAslConfigRequestDataConditions) SetConditionValue(v string) *UpdateAslConfigRequestDataConditions {
	s.ConditionValue = &v
	return s
}

type UpdateAslConfigRequestDataApplyLimit struct {
	// {"en":"IP:0,IP+UA:1,Cookie:2,IP+Cookie:3,HTTP Header:4,IP+HTTP Header:5", "zh_CN":"IP:0, IP+UA:1, Cookie:2, IP+Cookie:3, HTTP Header:4,IP+HTTP Header:5"}
	Limit *string `json:"limit,omitempty" xml:"limit,omitempty" require:"true"`
	// {"en":"Limit key", "zh_CN":"limit key"}
	LimitKey *string `json:"limitKey,omitempty" xml:"limitKey,omitempty" require:"true"`
	// {"en":"Limit value", "zh_CN":"limit value"}
	LimitValue *string `json:"limitValue,omitempty" xml:"limitValue,omitempty" require:"true"`
}

func (s UpdateAslConfigRequestDataApplyLimit) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestDataApplyLimit) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequestDataApplyLimit) SetLimit(v string) *UpdateAslConfigRequestDataApplyLimit {
	s.Limit = &v
	return s
}

func (s *UpdateAslConfigRequestDataApplyLimit) SetLimitKey(v string) *UpdateAslConfigRequestDataApplyLimit {
	s.LimitKey = &v
	return s
}

func (s *UpdateAslConfigRequestDataApplyLimit) SetLimitValue(v string) *UpdateAslConfigRequestDataApplyLimit {
	s.LimitValue = &v
	return s
}

type UpdateAslConfigRequestDataTriggerCondition struct {
	// {'en':'Statistical period, in seconds', 'zh_CN':'统计周期，单位秒'}
	Second *string `json:"second,omitempty" xml:"second,omitempty" require:"true"`
	// {'en':'Requests', 'zh_CN':'请求数'}
	Request *string `json:"request,omitempty" xml:"request,omitempty" require:"true"`
}

func (s UpdateAslConfigRequestDataTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestDataTriggerCondition) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequestDataTriggerCondition) SetSecond(v string) *UpdateAslConfigRequestDataTriggerCondition {
	s.Second = &v
	return s
}

func (s *UpdateAslConfigRequestDataTriggerCondition) SetRequest(v string) *UpdateAslConfigRequestDataTriggerCondition {
	s.Request = &v
	return s
}

type UpdateAslConfigRequestDataBanHttp struct {
	// {'en':'Block page setting switch,open:1|close:0', 'zh_CN':'自定义拦截开关，1：开启，0关闭'}
	CustomSet *string `json:"customSet,omitempty" xml:"customSet,omitempty" require:"true"`
	// {'en':'Response Code', 'zh_CN':'响应码'}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {'en':'Content-Type', 'zh_CN':'Content-Type'}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty" require:"true"`
	// {'en':'Customized Block Response
	//                     Notice:
	//                     There may be special characters in the response body information. We provide API for protection, so the customer needs to transcode the response body.
	//                     At the same time, after obtaining the configuration through the API interface, the response body also needs to be decoded or the original response body can be obtained:
	//                     For specific transcoding and decoding methods, please refer to the notes
	//                     ', 'zh_CN':'响应体信息
	//                     注意：
	//                     响应体信息可能会存在特殊字符，我们提供API有进行防护，所以需要客户的对响应体进行转码，同时，通过API接口获取到配置以后也需要对响应体进行解码以后或得原始响应体：
	//                     具体转码跟解码的方法参看备注
	//                     '}
	Response *string `json:"response,omitempty" xml:"response,omitempty" require:"true"`
}

func (s UpdateAslConfigRequestDataBanHttp) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestDataBanHttp) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigRequestDataBanHttp) SetCustomSet(v string) *UpdateAslConfigRequestDataBanHttp {
	s.CustomSet = &v
	return s
}

func (s *UpdateAslConfigRequestDataBanHttp) SetStatus(v string) *UpdateAslConfigRequestDataBanHttp {
	s.Status = &v
	return s
}

func (s *UpdateAslConfigRequestDataBanHttp) SetContentType(v string) *UpdateAslConfigRequestDataBanHttp {
	s.ContentType = &v
	return s
}

func (s *UpdateAslConfigRequestDataBanHttp) SetResponse(v string) *UpdateAslConfigRequestDataBanHttp {
	s.Response = &v
	return s
}

type UpdateAslConfigResponse struct {
	// {"en":"200:success
	// other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateAslConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateAslConfigResponse) SetCode(v string) *UpdateAslConfigResponse {
	s.Code = &v
	return s
}

func (s *UpdateAslConfigResponse) SetMsg(v string) *UpdateAslConfigResponse {
	s.Msg = &v
	return s
}

type UpdateAslConfigPaths struct {
}

func (s UpdateAslConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigPaths) GoString() string {
	return s.String()
}

type UpdateAslConfigParameters struct {
}

func (s UpdateAslConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigParameters) GoString() string {
	return s.String()
}

type UpdateAslConfigRequestHeader struct {
}

func (s UpdateAslConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigRequestHeader) GoString() string {
	return s.String()
}

type UpdateAslConfigResponseHeader struct {
}

func (s UpdateAslConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateAslConfigResponseHeader) GoString() string {
	return s.String()
}

type QueryCustomRuleConfigurationRequest struct {
	// {"en":"customer code","zh_CN":"客户code"}
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// {"en":"domain name","zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
}

func (s QueryCustomRuleConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationRequest) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationRequest) SetCustomCode(v string) *QueryCustomRuleConfigurationRequest {
	s.CustomCode = &v
	return s
}

func (s *QueryCustomRuleConfigurationRequest) SetDomain(v string) *QueryCustomRuleConfigurationRequest {
	s.Domain = &v
	return s
}

type QueryCustomRuleConfigurationRequestHeader struct {
}

func (s QueryCustomRuleConfigurationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationRequestHeader) GoString() string {
	return s.String()
}

type QueryCustomRuleConfigurationPaths struct {
}

func (s QueryCustomRuleConfigurationPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationPaths) GoString() string {
	return s.String()
}

type QueryCustomRuleConfigurationParameters struct {
}

func (s QueryCustomRuleConfigurationParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationParameters) GoString() string {
	return s.String()
}

type QueryCustomRuleConfigurationResponse struct {
	// {"en":"200:success\nother code means failed","zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message","zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Custom Rule Content","zh_CN":"自定义规则内容"}
	Data []*QueryCustomRuleConfigurationResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// {"en":"domain config version","zh_CN":"域名版本号"}
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// {"en":"Custom rule switch,0:close,1:open,default all","zh_CN":"客户自定义规则开关，0：关闭，1：开启, 默认全部"}
	CustomSwitch *string `json:"customSwitch,omitempty" xml:"customSwitch,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponse) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponse) SetCode(v string) *QueryCustomRuleConfigurationResponse {
	s.Code = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponse) SetMsg(v string) *QueryCustomRuleConfigurationResponse {
	s.Msg = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponse) SetData(v []*QueryCustomRuleConfigurationResponseData) *QueryCustomRuleConfigurationResponse {
	s.Data = v
	return s
}

func (s *QueryCustomRuleConfigurationResponse) SetVersion(v string) *QueryCustomRuleConfigurationResponse {
	s.Version = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponse) SetCustomSwitch(v string) *QueryCustomRuleConfigurationResponse {
	s.CustomSwitch = &v
	return s
}

type QueryCustomRuleConfigurationResponseData struct {
	// {"en":"Rule name","zh_CN":"规则名称"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule description","zh_CN":"规则描述"}
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// {"en":"Matching Conditions","zh_CN":"匹配条件"}
	Conditions []*QueryCustomRuleConfigurationResponseDataConditions `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Statistical Granularity","zh_CN":"统计粒度"}
	ApplyLimit *QueryCustomRuleConfigurationResponseDataApplyLimit `json:"applyLimit,omitempty" xml:"applyLimit,omitempty" require:"true" type:"Struct"`
	// {"en":"Trigger Condition","zh_CN":"触发条件"}
	TriggerCondition *QueryCustomRuleConfigurationResponseDataTriggerCondition `json:"triggerCondition,omitempty" xml:"triggerCondition,omitempty" require:"true" type:"Struct"`
	// {"en":"Block page Setting","zh_CN":"自定义拦截"}
	BanHttp *QueryCustomRuleConfigurationResponseDataBanHttp `json:"banHttp,omitempty" xml:"banHttp,omitempty" require:"true" type:"Struct"`
	// {"en":"action 0:Block,1:Log,2:Reset,3:Human Interaction Challenge,4:Redirect","zh_CN":"动作 0:拦截，1:告警，2:断开连接，3:人机校验,4:跳转友好页面"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Action expires after,in minutes","zh_CN":"处理动作持续时间,单位秒"}
	ActionDuration *string `json:"actionDuration,omitempty" xml:"actionDuration,omitempty" require:"true"`
	// {"en":"URL setting for the redirect page","zh_CN":"跳转友好页面地址"}
	FriendlyUrl *string `json:"friendlyUrl,omitempty" xml:"friendlyUrl,omitempty" require:"true"`
	// {"en":"GET Flood Rule,0:UrlCookie Validation+302 Redirection,1:Cookie Validation+302 Redirection,2:UrlCookie Validation+JS Redirection,\n3:Cookie Validation + JS Redirection,4:Cookie Validation+Meta-JS Redirection,5:Cookie Validation+JS Mouse Monitor","zh_CN":"GET Flood第一策略,0:UrlCookie参数验证+302跳转,1:Cookie参数验证+302跳转,2:UrlCookie参数验证+JS跳转,3:Cookie参数验证+JS跳转,4:Cookie参数验证+Meta-JS跳转,5:Cookie参数验证+JS鼠标监听"}
	GetRule *string `json:"getRule,omitempty" xml:"getRule,omitempty" require:"true"`
	// {"en":"GET Flood Second Rule,0:UrlCookie Verification + 302 Redirection,1:Cookie Verification + 302 Redirection","zh_CN":"GET Flood第二策略,0:UrlCookie参数验证+302跳转，1：Cookie参数验证+302t跳转"}
	GetSecondRule *string `json:"getSecondRule,omitempty" xml:"getSecondRule,omitempty" require:"true"`
	// {"en":"2nd Rule Enable Condition,0:Non-html Request(Accept!=text/*|text/htm),1:Non-html Request & Static URI Sufix)","zh_CN":"第二策略启用条件,0:非html请求，1：非html请求且URI后缀是静态文件"}
	GetSecondRuleCondition *string `json:"getSecondRuleCondition,omitempty" xml:"getSecondRuleCondition,omitempty" require:"true"`
	// {"en":"0:Cookie Validation+JS Redirection,1:Cookie Validation + 307 Redirection","zh_CN":"0:Cookie参数验证+JS跳转,1:Cookie参数验证+307跳转"}
	PostRule *string `json:"postRule,omitempty" xml:"postRule,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseData) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponseData) SetRuleName(v string) *QueryCustomRuleConfigurationResponseData {
	s.RuleName = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetDesc(v string) *QueryCustomRuleConfigurationResponseData {
	s.Desc = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetConditions(v []*QueryCustomRuleConfigurationResponseDataConditions) *QueryCustomRuleConfigurationResponseData {
	s.Conditions = v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetApplyLimit(v *QueryCustomRuleConfigurationResponseDataApplyLimit) *QueryCustomRuleConfigurationResponseData {
	s.ApplyLimit = v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetTriggerCondition(v *QueryCustomRuleConfigurationResponseDataTriggerCondition) *QueryCustomRuleConfigurationResponseData {
	s.TriggerCondition = v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetBanHttp(v *QueryCustomRuleConfigurationResponseDataBanHttp) *QueryCustomRuleConfigurationResponseData {
	s.BanHttp = v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetAction(v string) *QueryCustomRuleConfigurationResponseData {
	s.Action = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetActionDuration(v string) *QueryCustomRuleConfigurationResponseData {
	s.ActionDuration = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetFriendlyUrl(v string) *QueryCustomRuleConfigurationResponseData {
	s.FriendlyUrl = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetGetRule(v string) *QueryCustomRuleConfigurationResponseData {
	s.GetRule = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetGetSecondRule(v string) *QueryCustomRuleConfigurationResponseData {
	s.GetSecondRule = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetGetSecondRuleCondition(v string) *QueryCustomRuleConfigurationResponseData {
	s.GetSecondRuleCondition = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseData) SetPostRule(v string) *QueryCustomRuleConfigurationResponseData {
	s.PostRule = &v
	return s
}

type QueryCustomRuleConfigurationResponseDataConditions struct {
	// {"en":"IP:0,IP_SEG:1,URI:4,URI_REGEX:5,USER_AGENT:6,USER_AGENT_REGEX:7,AREA:8,HTTP_METHOD:9,REFERER:10,REFERER_REGEX:11,PROTOCOL:12,HTTP_HEADER:13,HTTP_HEADER_REGEX:14","zh_CN":"IP:0,IP_SEG:1,URI:4, URI_REGEX:5, USER_AGENT:6, USER_AGENT_REGEX:7, AREA:8,HTTP_METHOD:9,REFERER:10,REFERER_REGEX:11,PROTOCOL:12,HTTP_HEADER:13,HTTP_HEADER_REGEX:14"}
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty" require:"true"`
	// {"en":"Not equal:0|Equal:1","zh_CN":"不等于:0|等于:1"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Condition value","zh_CN":"匹配内容"}
	ConditionValue *string `json:"conditionValue,omitempty" xml:"conditionValue,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponseDataConditions) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseDataConditions) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponseDataConditions) SetCondition(v string) *QueryCustomRuleConfigurationResponseDataConditions {
	s.Condition = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataConditions) SetMatchType(v string) *QueryCustomRuleConfigurationResponseDataConditions {
	s.MatchType = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataConditions) SetConditionValue(v string) *QueryCustomRuleConfigurationResponseDataConditions {
	s.ConditionValue = &v
	return s
}

type QueryCustomRuleConfigurationResponseDataApplyLimit struct {
	// {"en":"IP:0, IP+UA:1, Cookie:2, IP+Cookie:3, HTTP Header:4,IP+HTTP Header:5","zh_CN":"IP:0, IP+UA:1, Cookie:2, IP+Cookie:3, HTTP Header:4,IP+HTTP Header:5"}
	Limit *string `json:"limit,omitempty" xml:"limit,omitempty" require:"true"`
	// {"en":"Limit key","zh_CN":"limit key"}
	LimitKey *string `json:"limitKey,omitempty" xml:"limitKey,omitempty" require:"true"`
	// {"en":"Limit value","zh_CN":"limit value"}
	LimitValue *string `json:"limitValue,omitempty" xml:"limitValue,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponseDataApplyLimit) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseDataApplyLimit) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponseDataApplyLimit) SetLimit(v string) *QueryCustomRuleConfigurationResponseDataApplyLimit {
	s.Limit = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataApplyLimit) SetLimitKey(v string) *QueryCustomRuleConfigurationResponseDataApplyLimit {
	s.LimitKey = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataApplyLimit) SetLimitValue(v string) *QueryCustomRuleConfigurationResponseDataApplyLimit {
	s.LimitValue = &v
	return s
}

type QueryCustomRuleConfigurationResponseDataTriggerCondition struct {
	// {"en":"Statistical period, in seconds","zh_CN":"统计周期，单位秒"}
	Second *string `json:"second,omitempty" xml:"second,omitempty" require:"true"`
	// {"en":"Requests","zh_CN":"请求数"}
	Request *string `json:"request,omitempty" xml:"request,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponseDataTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseDataTriggerCondition) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponseDataTriggerCondition) SetSecond(v string) *QueryCustomRuleConfigurationResponseDataTriggerCondition {
	s.Second = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataTriggerCondition) SetRequest(v string) *QueryCustomRuleConfigurationResponseDataTriggerCondition {
	s.Request = &v
	return s
}

type QueryCustomRuleConfigurationResponseDataBanHttp struct {
	// {"en":"Block page setting switch,open:1|close:0","zh_CN":"自定义拦截开关，1：开启，0关闭"}
	CustomSet *string `json:"customSet,omitempty" xml:"customSet,omitempty" require:"true"`
	// {"en":"Response Code","zh_CN":"响应码"}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {"en":"Content-Type","zh_CN":"Content-Type"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty" require:"true"`
	// {"en":"Customized Block Response","zh_CN":"响应体信息"}
	Response *string `json:"response,omitempty" xml:"response,omitempty" require:"true"`
}

func (s QueryCustomRuleConfigurationResponseDataBanHttp) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseDataBanHttp) GoString() string {
	return s.String()
}

func (s *QueryCustomRuleConfigurationResponseDataBanHttp) SetCustomSet(v string) *QueryCustomRuleConfigurationResponseDataBanHttp {
	s.CustomSet = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataBanHttp) SetStatus(v string) *QueryCustomRuleConfigurationResponseDataBanHttp {
	s.Status = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataBanHttp) SetContentType(v string) *QueryCustomRuleConfigurationResponseDataBanHttp {
	s.ContentType = &v
	return s
}

func (s *QueryCustomRuleConfigurationResponseDataBanHttp) SetResponse(v string) *QueryCustomRuleConfigurationResponseDataBanHttp {
	s.Response = &v
	return s
}

type QueryCustomRuleConfigurationResponseHeader struct {
}

func (s QueryCustomRuleConfigurationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomRuleConfigurationResponseHeader) GoString() string {
	return s.String()
}

type UpdateCustomRuleRequest struct {
	// {"en":"Matching conditions. Except for header conditions, there can only be at most one record per match type under each type of condition.","zh_CN":"匹配条件。除了请求头条件，其它类型的条件下一种匹配类型最多只能有一条记录。"}
	Condition *UpdateCustomRuleRequestCondition `json:"condition,omitempty" xml:"condition,omitempty" type:"Struct"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nDELAY：延迟响应\nBLOCK：拦截\nRESET:断开连接","exampleValue":"NO_USE,LOG,DELAY,BLOCK,RESET"}
	Act *string `json:"act,omitempty" xml:"act,omitempty"`
	// {"en":"Rule Name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"规则描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"API ID under API business, multiple separated by ; sign.\nWhen the protected target is APIThis field is required.","zh_CN":"API业务下的API ID，多个用 ; 隔开。\n当业务场景为API业务时此字段必填。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：WEB业务\nAPI：API业务","exampleValue":"WEB,API"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty"`
}

func (s UpdateCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequest) SetCondition(v *UpdateCustomRuleRequestCondition) *UpdateCustomRuleRequest {
	s.Condition = v
	return s
}

func (s *UpdateCustomRuleRequest) SetAct(v string) *UpdateCustomRuleRequest {
	s.Act = &v
	return s
}

func (s *UpdateCustomRuleRequest) SetRuleName(v string) *UpdateCustomRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateCustomRuleRequest) SetDescription(v string) *UpdateCustomRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateCustomRuleRequest) SetId(v string) *UpdateCustomRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateCustomRuleRequest) SetApiId(v string) *UpdateCustomRuleRequest {
	s.ApiId = &v
	return s
}

func (s *UpdateCustomRuleRequest) SetScene(v string) *UpdateCustomRuleRequest {
	s.Scene = &v
	return s
}

type UpdateCustomRuleRequestCondition struct {
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*UpdateCustomRuleRequestConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*UpdateCustomRuleRequestConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" type:"Repeated"`
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*UpdateCustomRuleRequestConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*UpdateCustomRuleRequestConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*UpdateCustomRuleRequestConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI Parameter, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI参数，匹配类型不可重复。\n当业务场景为网站业务时不支持此匹配条件。"}
	UriParamConditions []*UpdateCustomRuleRequestConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*UpdateCustomRuleRequestConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Request Header, natch type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*UpdateCustomRuleRequestConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*UpdateCustomRuleRequestConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*UpdateCustomRuleRequestConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*UpdateCustomRuleRequestConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" type:"Repeated"`
}

func (s UpdateCustomRuleRequestCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestCondition) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestCondition) SetMethodConditions(v []*UpdateCustomRuleRequestConditionMethodConditions) *UpdateCustomRuleRequestCondition {
	s.MethodConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetAreaConditions(v []*UpdateCustomRuleRequestConditionAreaConditions) *UpdateCustomRuleRequestCondition {
	s.AreaConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetIpOrIpsConditions(v []*UpdateCustomRuleRequestConditionIpOrIpsConditions) *UpdateCustomRuleRequestCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetUriConditions(v []*UpdateCustomRuleRequestConditionUriConditions) *UpdateCustomRuleRequestCondition {
	s.UriConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetPathConditions(v []*UpdateCustomRuleRequestConditionPathConditions) *UpdateCustomRuleRequestCondition {
	s.PathConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetUriParamConditions(v []*UpdateCustomRuleRequestConditionUriParamConditions) *UpdateCustomRuleRequestCondition {
	s.UriParamConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetUaConditions(v []*UpdateCustomRuleRequestConditionUaConditions) *UpdateCustomRuleRequestCondition {
	s.UaConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetHeaderConditions(v []*UpdateCustomRuleRequestConditionHeaderConditions) *UpdateCustomRuleRequestCondition {
	s.HeaderConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetRefererConditions(v []*UpdateCustomRuleRequestConditionRefererConditions) *UpdateCustomRuleRequestCondition {
	s.RefererConditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetJa3Conditions(v []*UpdateCustomRuleRequestConditionJa3Conditions) *UpdateCustomRuleRequestCondition {
	s.Ja3Conditions = v
	return s
}

func (s *UpdateCustomRuleRequestCondition) SetJa4Conditions(v []*UpdateCustomRuleRequestConditionJa4Conditions) *UpdateCustomRuleRequestCondition {
	s.Ja4Conditions = v
	return s
}

type UpdateCustomRuleRequestConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionMethodConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionMethodConditions) SetRequestMethod(v []*string) *UpdateCustomRuleRequestConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type UpdateCustomRuleRequestConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionAreaConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionAreaConditions) SetAreas(v []*string) *UpdateCustomRuleRequestConditionAreaConditions {
	s.Areas = v
	return s
}

type UpdateCustomRuleRequestConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionIpOrIpsConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionIpOrIpsConditions) SetIpOrIps(v []*string) *UpdateCustomRuleRequestConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type UpdateCustomRuleRequestConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionUriConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionUriConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionUriConditions) SetUri(v []*string) *UpdateCustomRuleRequestConditionUriConditions {
	s.Uri = v
	return s
}

type UpdateCustomRuleRequestConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	UpdateCustomRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionPathConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionPathConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionPathConditions) SetUpdateCustomRulePaths(v []*string) *UpdateCustomRuleRequestConditionPathConditions {
	s.UpdateCustomRulePaths = v
	return s
}

type UpdateCustomRuleRequestConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals,param value case sensitive\nNOT_EQUAL:Does not equal,param value case sensitive\nCONTAIN:Contains,param value case insensitive\nNOT_CONTAIN:Does not contains,param value case insensitive\nREGEX:Regex match,param value case insensitive\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于，参数值大小写敏感\nNOT_EQUAL：不等于，参数值大小写敏感\nCONTAIN：包含，参数值大小写不敏感\nNOT_CONTAIN：不包含，参数值大小写不敏感\nREGEX：正则，参数值大小写不敏感\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name,case sensitive,maximum 100 characters.\nExample: id.","zh_CN":"参数名，大小写敏感，最多100个字符。\n示例：id。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionUriParamConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionUriParamConditions) SetParamName(v string) *UpdateCustomRuleRequestConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionUriParamConditions) SetParamValue(v []*string) *UpdateCustomRuleRequestConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type UpdateCustomRuleRequestConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionUaConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionUaConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionUaConditions) SetUa(v []*string) *UpdateCustomRuleRequestConditionUaConditions {
	s.Ua = v
	return s
}

type UpdateCustomRuleRequestConditionHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, request header values case sensitive\nNOT_EQUAL: Does not equal, request header values case sensitive\nCONTAIN: Contains, request header values case insensitive\nNOT_CONTAIN: Does not Contains, request header values case insensitive\nNONE: Empty or non-existent\nREGEX: Regex match, request header values case insensitive\nNOT_REGEX: Regular does not match, request header values case insensitive\nSTART_WITH: Starts with, request header values case insensitive\nEND_WITH: Ends with, request header values case insensitive\nWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，头部值大小写敏感\nNOT_EQUAL：不等于，头部值大小写敏感\nCONTAIN：包含，头部值大小写不敏感\nNOT_CONTAIN：不包含，头部值大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，头部值大小写不敏感\nNOT_REGEX：正则不匹配，头部值大小写不敏感\nSTART_WITH：开头是，头部值大小写不敏感\nEND_WITH：结尾是，头部值大小写不敏感\nWILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s UpdateCustomRuleRequestConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionHeaderConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionHeaderConditions) SetValueList(v []*string) *UpdateCustomRuleRequestConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *UpdateCustomRuleRequestConditionHeaderConditions) SetKey(v string) *UpdateCustomRuleRequestConditionHeaderConditions {
	s.Key = &v
	return s
}

type UpdateCustomRuleRequestConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s UpdateCustomRuleRequestConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionRefererConditions) SetReferer(v []*string) *UpdateCustomRuleRequestConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *UpdateCustomRuleRequestConditionRefererConditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionRefererConditions {
	s.MatchType = &v
	return s
}

type UpdateCustomRuleRequestConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionJa3Conditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionJa3Conditions) SetJa3List(v []*string) *UpdateCustomRuleRequestConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type UpdateCustomRuleRequestConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateCustomRuleRequestConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestConditionJa4Conditions) SetMatchType(v string) *UpdateCustomRuleRequestConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *UpdateCustomRuleRequestConditionJa4Conditions) SetJa4List(v []*string) *UpdateCustomRuleRequestConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type UpdateCustomRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleRequestHeader) SetServiceType(v string) *UpdateCustomRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateCustomRulePaths struct {
}

func (s UpdateCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRulePaths) GoString() string {
	return s.String()
}

type UpdateCustomRuleParameters struct {
}

func (s UpdateCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleParameters) GoString() string {
	return s.String()
}

type UpdateCustomRuleResponse struct {
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *bool `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s UpdateCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomRuleResponse) SetMsg(v string) *UpdateCustomRuleResponse {
	s.Msg = &v
	return s
}

func (s *UpdateCustomRuleResponse) SetCode(v string) *UpdateCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateCustomRuleResponse) SetData(v bool) *UpdateCustomRuleResponse {
	s.Data = &v
	return s
}

type UpdateCustomRuleResponseHeader struct {
}

func (s UpdateCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type EditQuotaRuleRequest struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Control action,default value: INTERCEPT.
	// INTERCEPT: interception
	// MONITOR: Monitoring", "zh_CN":"控制动作，默认值：INTERCEPT。
	// INTERCEPT：拦截
	// MONITOR：监控"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *int `json:"limitDuration,omitempty" xml:"limitDuration,omitempty"`
	// {"en":"Detailing unit.
	// h: Hour
	// d: Day
	// w: Week
	// m: Month", "zh_CN":"时长单位。
	// h：小时
	// d：天
	// w：周
	// m：月"}
	LimitUnit *string `json:"limitUnit,omitempty" xml:"limitUnit,omitempty"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"Consumer quota threshold.", "zh_CN":"消费方配额阈值。"}
	ThresholdValue *int `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty"`
}

func (s EditQuotaRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRuleRequest) GoString() string {
	return s.String()
}

func (s *EditQuotaRuleRequest) SetId(v string) *EditQuotaRuleRequest {
	s.Id = &v
	return s
}

func (s *EditQuotaRuleRequest) SetControlAction(v string) *EditQuotaRuleRequest {
	s.ControlAction = &v
	return s
}

func (s *EditQuotaRuleRequest) SetLimitDuration(v int) *EditQuotaRuleRequest {
	s.LimitDuration = &v
	return s
}

func (s *EditQuotaRuleRequest) SetLimitUnit(v string) *EditQuotaRuleRequest {
	s.LimitUnit = &v
	return s
}

func (s *EditQuotaRuleRequest) SetPolicyName(v string) *EditQuotaRuleRequest {
	s.PolicyName = &v
	return s
}

func (s *EditQuotaRuleRequest) SetRemark(v string) *EditQuotaRuleRequest {
	s.Remark = &v
	return s
}

func (s *EditQuotaRuleRequest) SetThresholdValue(v int) *EditQuotaRuleRequest {
	s.ThresholdValue = &v
	return s
}

type EditQuotaRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s EditQuotaRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRuleResponse) GoString() string {
	return s.String()
}

func (s *EditQuotaRuleResponse) SetCode(v int) *EditQuotaRuleResponse {
	s.Code = &v
	return s
}

func (s *EditQuotaRuleResponse) SetMsg(v string) *EditQuotaRuleResponse {
	s.Msg = &v
	return s
}

func (s *EditQuotaRuleResponse) SetData(v map[string]interface{}) *EditQuotaRuleResponse {
	s.Data = v
	return s
}

type EditQuotaRulePaths struct {
}

func (s EditQuotaRulePaths) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRulePaths) GoString() string {
	return s.String()
}

type EditQuotaRuleParameters struct {
}

func (s EditQuotaRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRuleParameters) GoString() string {
	return s.String()
}

type EditQuotaRuleRequestHeader struct {
}

func (s EditQuotaRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRuleRequestHeader) GoString() string {
	return s.String()
}

type EditQuotaRuleResponseHeader struct {
}

func (s EditQuotaRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s EditQuotaRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateKnownBotsSelectBotNamesRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Modified Bot category data.', 'zh_CN':'修改的Bot类别数据。'}
	UpdateList []*UpdateKnownBotsSelectBotNamesBotPublicBotsDTO `json:"updateList,omitempty" xml:"updateList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateKnownBotsSelectBotNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesRequest) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsSelectBotNamesRequest) SetDomain(v string) *UpdateKnownBotsSelectBotNamesRequest {
	s.Domain = &v
	return s
}

func (s *UpdateKnownBotsSelectBotNamesRequest) SetUpdateList(v []*UpdateKnownBotsSelectBotNamesBotPublicBotsDTO) *UpdateKnownBotsSelectBotNamesRequest {
	s.UpdateList = v
	return s
}

type UpdateKnownBotsSelectBotNamesResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateKnownBotsSelectBotNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesResponse) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsSelectBotNamesResponse) SetCode(v string) *UpdateKnownBotsSelectBotNamesResponse {
	s.Code = &v
	return s
}

func (s *UpdateKnownBotsSelectBotNamesResponse) SetMsg(v string) *UpdateKnownBotsSelectBotNamesResponse {
	s.Msg = &v
	return s
}

type UpdateKnownBotsSelectBotNamesBotPublicBotsDTO struct {
	// {'en':'Known Bot category.
	//  search_engine_bot: Search Engines
	//  marketing_analysis: Marketing Analysis
	//  site_monitor: Site Monitor
	//  feed_fetcher: Feed Fetcher
	//  tool: Practical Tools
	//  illegal_public_crawler: Illegal Known Bots
	//  other: Other Known Bots', 'zh_CN':'已知Bot类别。
	//  search_engine_bot：搜索引擎
	//  marketing_analysis：市场分析
	//  site_monitor：网站监控
	//  feed_fetcher：信息流聚合
	//  tool：实用工具
	//  illegal_public_crawler：非法的已知Bot
	//  other：其他已知Bot'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty"`
	// {'en':'Checked Bot subcategory values(Please refer to the documentation: Public Bot Dictionary), multiple separated by ; sign, an empty value means all are unchecked.', 'zh_CN':'勾选的Bot小类值(请参照说明文档：已知Bot字典)，多个以 ; 号分隔，值为空表示全部不勾选。'}
	SelectBotNames *string `json:"selectBotNames,omitempty" xml:"selectBotNames,omitempty"`
}

func (s UpdateKnownBotsSelectBotNamesBotPublicBotsDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesBotPublicBotsDTO) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsSelectBotNamesBotPublicBotsDTO) SetBotCategory(v string) *UpdateKnownBotsSelectBotNamesBotPublicBotsDTO {
	s.BotCategory = &v
	return s
}

func (s *UpdateKnownBotsSelectBotNamesBotPublicBotsDTO) SetSelectBotNames(v string) *UpdateKnownBotsSelectBotNamesBotPublicBotsDTO {
	s.SelectBotNames = &v
	return s
}

type UpdateKnownBotsSelectBotNamesPaths struct {
}

func (s UpdateKnownBotsSelectBotNamesPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesPaths) GoString() string {
	return s.String()
}

type UpdateKnownBotsSelectBotNamesParameters struct {
}

func (s UpdateKnownBotsSelectBotNamesParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesParameters) GoString() string {
	return s.String()
}

type UpdateKnownBotsSelectBotNamesRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateKnownBotsSelectBotNamesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsSelectBotNamesRequestHeader) SetServiceType(v string) *UpdateKnownBotsSelectBotNamesRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateKnownBotsSelectBotNamesResponseHeader struct {
}

func (s UpdateKnownBotsSelectBotNamesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsSelectBotNamesResponseHeader) GoString() string {
	return s.String()
}

type DeleteWorkflowRuleRequest struct {
	// {'en':'List of deleted rule ID.', 'zh_CN':'删除的规则ID列表。'}
	DeleteList []*string `json:"deleteList,omitempty" xml:"deleteList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteWorkflowRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowRuleRequest) SetDeleteList(v []*string) *DeleteWorkflowRuleRequest {
	s.DeleteList = v
	return s
}

type DeleteWorkflowRuleResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteWorkflowRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowRuleResponse) SetCode(v string) *DeleteWorkflowRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteWorkflowRuleResponse) SetMsg(v string) *DeleteWorkflowRuleResponse {
	s.Msg = &v
	return s
}

type DeleteWorkflowRulePaths struct {
}

func (s DeleteWorkflowRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRulePaths) GoString() string {
	return s.String()
}

type DeleteWorkflowRuleParameters struct {
}

func (s DeleteWorkflowRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRuleParameters) GoString() string {
	return s.String()
}

type DeleteWorkflowRuleRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteWorkflowRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowRuleRequestHeader) SetServiceType(v string) *DeleteWorkflowRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteWorkflowRuleResponseHeader struct {
}

func (s DeleteWorkflowRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRuleResponseHeader) GoString() string {
	return s.String()
}

type GetBlockPageSettingRequest struct {
	// {"en":"Domain, array.", "zh_CN":"域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s GetBlockPageSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingRequest) GoString() string {
	return s.String()
}

func (s *GetBlockPageSettingRequest) SetDomainList(v []*string) *GetBlockPageSettingRequest {
	s.DomainList = v
	return s
}

type GetBlockPageSettingResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data []*GetBlockPageSettingDomainInfo `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetBlockPageSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingResponse) GoString() string {
	return s.String()
}

func (s *GetBlockPageSettingResponse) SetCode(v string) *GetBlockPageSettingResponse {
	s.Code = &v
	return s
}

func (s *GetBlockPageSettingResponse) SetMessage(v string) *GetBlockPageSettingResponse {
	s.Message = &v
	return s
}

func (s *GetBlockPageSettingResponse) SetData(v []*GetBlockPageSettingDomainInfo) *GetBlockPageSettingResponse {
	s.Data = v
	return s
}

type GetBlockPageSettingDomainInfo struct {
	// {"en":"Domain.", "zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Configuration for Block page setting.", "zh_CN":"自定义拦截页面配置"}
	GetBlockPageSettingBlockPage *GetBlockPageSettingBlockPage `json:"blockPage,omitempty" xml:"blockPage,omitempty" require:"true"`
}

func (s GetBlockPageSettingDomainInfo) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingDomainInfo) GoString() string {
	return s.String()
}

func (s *GetBlockPageSettingDomainInfo) SetDomain(v string) *GetBlockPageSettingDomainInfo {
	s.Domain = &v
	return s
}

func (s *GetBlockPageSettingDomainInfo) SetBlockPage(v *GetBlockPageSettingBlockPage) *GetBlockPageSettingDomainInfo {
	s.GetBlockPageSettingBlockPage = v
	return s
}

type GetBlockPageSettingBlockPage struct {
	// {"en":"Switch
	//     0: close
	//     1: open", "zh_CN":"开关。
	//     0：关
	//     1：开"}
	SwitchConf *int32 `json:"switch,omitempty" xml:"switch,omitempty" require:"true"`
	// {"en":"Status code, default 403.", "zh_CN":"状态码，默认403。"}
	StatusCode *string `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// {"en":"Content-type, default text/html, support multiple,english half Angle comma splices.", "zh_CN":"Content-Type，默认text/html，多个以英文半角逗号分隔。"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// {"en":"Customized response content.", "zh_CN":"自定义响应内容。"}
	ResponseContent *string `json:"responseContent,omitempty" xml:"responseContent,omitempty" require:"true"`
}

func (s GetBlockPageSettingBlockPage) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingBlockPage) GoString() string {
	return s.String()
}

func (s *GetBlockPageSettingBlockPage) SetSwitchConf(v int32) *GetBlockPageSettingBlockPage {
	s.SwitchConf = &v
	return s
}

func (s *GetBlockPageSettingBlockPage) SetStatusCode(v string) *GetBlockPageSettingBlockPage {
	s.StatusCode = &v
	return s
}

func (s *GetBlockPageSettingBlockPage) SetContentType(v string) *GetBlockPageSettingBlockPage {
	s.ContentType = &v
	return s
}

func (s *GetBlockPageSettingBlockPage) SetResponseContent(v string) *GetBlockPageSettingBlockPage {
	s.ResponseContent = &v
	return s
}

type GetBlockPageSettingPaths struct {
}

func (s GetBlockPageSettingPaths) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingPaths) GoString() string {
	return s.String()
}

type GetBlockPageSettingParameters struct {
}

func (s GetBlockPageSettingParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingParameters) GoString() string {
	return s.String()
}

type GetBlockPageSettingRequestHeader struct {
}

func (s GetBlockPageSettingRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingRequestHeader) GoString() string {
	return s.String()
}

type GetBlockPageSettingResponseHeader struct {
}

func (s GetBlockPageSettingResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageSettingResponseHeader) GoString() string {
	return s.String()
}

type AddRateLimitingRuleRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule Name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"规则描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：网站业务\nAPI：API业务"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty" require:"true"`
	// {"en":"Client identifier.\nIP:Client IP\nIP_UA:Client IP and User-Agent\nCOOKIE:Cookie\nIP_COOKIE:Client IP and Cookie\nHEADER:Request Header\nWhen there is a status code in the matching condition,this client identifier is not supported.\nIP_HEADER:Client IP and Request Header\nWhen there is a status code in the matching condition,this client identifier is not supported .","zh_CN":"统计粒度。\nIP：客户端IP\nIP_UA：客户端IP和User-Agent\nCOOKIE：Cookie\nIP_COOKIE：客户端IP和Cookie\nHEADER：请求头，当匹配条件中存在状态码时不支持此统计粒度\nIP_HEADER：客户端IP和请求头，当匹配条件中存在状态码时不支持此统计粒度"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty" require:"true"`
	// {"en":"Statistical key value.\nWhen the client identifier is cookie/header value, the corresponding key value needs to be entered.","zh_CN":"统计key值。\n当统计粒度cookie/header值，需要输入对应的key值。"}
	StatisticsKey *string `json:"statisticsKey,omitempty" xml:"statisticsKey,omitempty"`
	// {"en":"Statistics period, unit: seconds, the range is 1 - 3600.","zh_CN":"统计周期，单位：秒，范围为 1 - 3600。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty" require:"true"`
	// {"en":"Trigger threshold, unit: times.","zh_CN":"触发阈值，单位：次。"}
	TriggerThreshold *int `json:"triggerThreshold,omitempty" xml:"triggerThreshold,omitempty" require:"true"`
	// {"en":"Action duration, unit: seconds, the range is 10 - 604800.","zh_CN":"处理动作持续时间，单位：秒，范围为 10 - 604800。"}
	InterceptTime *int `json:"interceptTime,omitempty" xml:"interceptTime,omitempty" require:"true"`
	// {"en":"Cycle effective status.\nPERMANENT:All time\nWITHOUT:Excluded time\nWITHIN:Selected time","zh_CN":"周期生效状态。\nPERMANENT：永久生效\nWITHOUT：周期内不生效\nWITHIN：周期内生效"}
	EffectiveStatus *string `json:"effectiveStatus,omitempty" xml:"effectiveStatus,omitempty" require:"true"`
	// {"en":"Effective time period.When the effective status is effective within the cycle or not effective within the cycle, this field must have a value.","zh_CN":"规则生效周期。\n生效状态为周期内生效或周期内不生效时，此字段必须有值。"}
	RateLimitEffective *AddRateLimitingRuleRequestRateLimitEffective `json:"rateLimitEffective,omitempty" xml:"rateLimitEffective,omitempty" type:"Struct"`
	// {"en":"API ID under API business, multiple separated by ; sign.\nWhen the protected target is APIThis field is required.","zh_CN":"API业务下的API ID，多个用 ; 隔开。\n当业务场景为API业务时此字段必填。"}
	AssetApiId *string `json:"assetApiId,omitempty" xml:"assetApiId,omitempty"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nCOOKIE:Cookie verification\nJS_CHECK:Javascript verification\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection\nCustom response ID:Custom response ID\nWhen there is a status code in the matching condition, the supported actions are LOG, BLOCK, NO_USE, and RESET.","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nCOOKIE：Cookie校验\nJS_CHECK：JavaScript校验\nDELAY：延迟响应\nBLOCK：拦截\nRESET：断开连接\n自定义响应ID：自定义响应ID\n当匹配条件中存在状态码时，支持处理动作为监控、拦截、不使用、断开连接。","exampleValue":"NO_USE,LOG,COOKIE,JS_CHECK,DELAY,BLOCK,RESET"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Matching conditions.","zh_CN":"匹配条件。"}
	RateLimitRuleCondition *AddRateLimitingRuleRequestRateLimitRuleCondition `json:"rateLimitRuleCondition,omitempty" xml:"rateLimitRuleCondition,omitempty" require:"true" type:"Struct"`
}

func (s AddRateLimitingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequest) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequest) SetDomain(v string) *AddRateLimitingRuleRequest {
	s.Domain = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetRuleName(v string) *AddRateLimitingRuleRequest {
	s.RuleName = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetDescription(v string) *AddRateLimitingRuleRequest {
	s.Description = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetScene(v string) *AddRateLimitingRuleRequest {
	s.Scene = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetStatisticalItem(v string) *AddRateLimitingRuleRequest {
	s.StatisticalItem = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetStatisticsKey(v string) *AddRateLimitingRuleRequest {
	s.StatisticsKey = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetStatisticalPeriod(v int) *AddRateLimitingRuleRequest {
	s.StatisticalPeriod = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetTriggerThreshold(v int) *AddRateLimitingRuleRequest {
	s.TriggerThreshold = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetInterceptTime(v int) *AddRateLimitingRuleRequest {
	s.InterceptTime = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetEffectiveStatus(v string) *AddRateLimitingRuleRequest {
	s.EffectiveStatus = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetRateLimitEffective(v *AddRateLimitingRuleRequestRateLimitEffective) *AddRateLimitingRuleRequest {
	s.RateLimitEffective = v
	return s
}

func (s *AddRateLimitingRuleRequest) SetAssetApiId(v string) *AddRateLimitingRuleRequest {
	s.AssetApiId = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetAction(v string) *AddRateLimitingRuleRequest {
	s.Action = &v
	return s
}

func (s *AddRateLimitingRuleRequest) SetRateLimitRuleCondition(v *AddRateLimitingRuleRequestRateLimitRuleCondition) *AddRateLimitingRuleRequest {
	s.RateLimitRuleCondition = v
	return s
}

type AddRateLimitingRuleRequestRateLimitEffective struct {
	// {"en":"Effective.\nMON:Monday\nTUE:Tuesday\nWED:Wednesday\nTHU:Thursday\nFRI:Friday\nSAT:Saturday\nSUN:Sunday","zh_CN":"周期。\nMON：星期一\nTUE：星期二\nWED：星期三\nTHU：星期四\nFRI：星期五\nSAT：星期六\nSUN：星期天"}
	Effective []*string `json:"effective,omitempty" xml:"effective,omitempty" require:"true" type:"Repeated"`
	// {"en":"Start time, format: HH:mm.","zh_CN":"开始时间，格式：HH:mm。"}
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// {"en":"End time, format: HH:mm.","zh_CN":"结束时间，格式：HH:mm。"}
	End *string `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_timezone","en":"Timezone,default value: GTM+8.","zh_CN":"时区，默认：GTM+8。"}
	Timezone *string `json:"timezone,omitempty" xml:"timezone,omitempty" require:"true"`
}

func (s AddRateLimitingRuleRequestRateLimitEffective) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitEffective) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitEffective) SetEffective(v []*string) *AddRateLimitingRuleRequestRateLimitEffective {
	s.Effective = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitEffective) SetStart(v string) *AddRateLimitingRuleRequestRateLimitEffective {
	s.Start = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitEffective) SetEnd(v string) *AddRateLimitingRuleRequestRateLimitEffective {
	s.End = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitEffective) SetTimezone(v string) *AddRateLimitingRuleRequestRateLimitEffective {
	s.Timezone = &v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleCondition struct {
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"URI Parameter, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI参数，匹配类型不可重复。\n当业务场景为网站业务时不支持此匹配条件。"}
	UriParamConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"Request Header, match type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" type:"Repeated"`
	// {"en":"HTTP/S, match type cannot be repeated.","zh_CN":"应用层协议，匹配类型不可重复。"}
	SchemeConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions `json:"schemeConditions,omitempty" xml:"schemeConditions,omitempty" type:"Repeated"`
	// {"en":"Response Code, match type cannot be repeated.","zh_CN":"状态码，匹配类型不可重复。"}
	StatusCodeConditions []*AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions `json:"statusCodeConditions,omitempty" xml:"statusCodeConditions,omitempty" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleCondition) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetIpOrIpsConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetPathConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.PathConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetUriConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.UriConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetUriParamConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.UriParamConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetUaConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.UaConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetMethodConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.MethodConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetRefererConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.RefererConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetHeaderConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.HeaderConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetAreaConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.AreaConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetSchemeConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.SchemeConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetStatusCodeConditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.StatusCodeConditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetJa3Conditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.Ja3Conditions = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleCondition) SetJa4Conditions(v []*AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) *AddRateLimitingRuleRequestRateLimitRuleCondition {
	s.Ja4Conditions = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions) SetIpOrIps(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	AddRateLimitingRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions) SetAddRateLimitingRulePaths(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionPathConditions {
	s.AddRateLimitingRulePaths = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions) SetUri(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionUriConditions {
	s.Uri = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals,param value case sensitive\nNOT_EQUAL:Does not equal,param value case sensitive\nCONTAIN:Contains,param value case insensitive\nNOT_CONTAIN:Does not contains,param value case insensitive\nREGEX:Regex match,param value case insensitive\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于，参数值大小写敏感\nNOT_EQUAL：不等于，参数值大小写敏感\nCONTAIN：包含，参数值大小写不敏感\nNOT_CONTAIN：不包含，参数值大小写不敏感\nREGEX：正则，参数值大小写不敏感\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name,case sensitive,maximum 100 characters.\nExample: id.","zh_CN":"参数名，大小写敏感，最多100个字符。\n示例：id。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetParamName(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions) SetParamValue(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions) SetUa(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionUaConditions {
	s.Ua = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions) SetRequestMethod(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) SetReferer(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionRefererConditions {
	s.MatchType = &v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions struct {
	// {"en":"Match type.EQUAL: Equals, request header values case sensitiveNOT_EQUAL: Does not equal, request header values case sensitiveCONTAIN: Contains, request header values case insensitiveNOT_CONTAIN: Does not Contains, request header values case insensitiveNONE: Empty or non-existentREGEX: Regex match, request header values case insensitiveNOT_REGEX: Regular does not match, request header values case insensitiveSTART_WITH: Starts with, request header values case insensitiveEND_WITH: Ends with, request header values case insensitiveWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single characterNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。EQUAL：等于，头部值大小写敏感NOT_EQUAL：不等于，头部值大小写敏感CONTAIN：包含，头部值大小写不敏感NOT_CONTAIN：不包含，头部值大小写不敏感NONE：为空或不存在REGEX：匹配正则，头部值大小写不敏感NOT_REGEX：正则不匹配，头部值大小写不敏感START_WITH：开头是，头部值大小写不敏感END_WITH：结尾是，头部值大小写不敏感WILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符NOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetValueList(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions) SetKey(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionHeaderConditions {
	s.Key = &v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions) SetAreas(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionAreaConditions {
	s.Areas = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"HTTP/S.\nSupported values: HTTP/HTTPS.","zh_CN":"应用层协议。\n支持的值：HTTP/HTTPS。","exampleValue":"HTTP,HTTPS"}
	Scheme []*string `json:"scheme,omitempty" xml:"scheme,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions) SetScheme(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionSchemeConditions {
	s.Scheme = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Response Code.","zh_CN":"状态码。"}
	StatusCode []*string `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions) SetStatusCode(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionStatusCodeConditions {
	s.StatusCode = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions) SetJa3List(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) SetMatchType(v string) *AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions) SetJa4List(v []*string) *AddRateLimitingRuleRequestRateLimitRuleConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type AddRateLimitingRuleRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s AddRateLimitingRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleRequestHeader) SetServiceType(v string) *AddRateLimitingRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type AddRateLimitingRulePaths struct {
}

func (s AddRateLimitingRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRulePaths) GoString() string {
	return s.String()
}

type AddRateLimitingRuleParameters struct {
}

func (s AddRateLimitingRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleParameters) GoString() string {
	return s.String()
}

type AddRateLimitingRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s AddRateLimitingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleResponse) GoString() string {
	return s.String()
}

func (s *AddRateLimitingRuleResponse) SetCode(v string) *AddRateLimitingRuleResponse {
	s.Code = &v
	return s
}

func (s *AddRateLimitingRuleResponse) SetMsg(v string) *AddRateLimitingRuleResponse {
	s.Msg = &v
	return s
}

func (s *AddRateLimitingRuleResponse) SetData(v string) *AddRateLimitingRuleResponse {
	s.Data = &v
	return s
}

type AddRateLimitingRuleResponseHeader struct {
}

func (s AddRateLimitingRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AddRateLimitingRuleResponseHeader) GoString() string {
	return s.String()
}

type GetConsumerInfoRequest struct {
}

func (s GetConsumerInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoRequest) GoString() string {
	return s.String()
}

type GetConsumerInfoResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回消息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data *GetConsumerInfoConsumerInfo `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetConsumerInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoResponse) GoString() string {
	return s.String()
}

func (s *GetConsumerInfoResponse) SetCode(v int) *GetConsumerInfoResponse {
	s.Code = &v
	return s
}

func (s *GetConsumerInfoResponse) SetMsg(v string) *GetConsumerInfoResponse {
	s.Msg = &v
	return s
}

func (s *GetConsumerInfoResponse) SetData(v *GetConsumerInfoConsumerInfo) *GetConsumerInfoResponse {
	s.Data = v
	return s
}

type GetConsumerInfoConsumerInfo struct {
	// {"en":"Account code.", "zh_CN":"用户账号。"}
	AccountCode *string `json:"accountCode,omitempty" xml:"accountCode,omitempty" require:"true"`
	// {"en":"Consumer ID.", "zh_CN":"消费方ID。"}
	ConsumerId *string `json:"consumerId,omitempty" xml:"consumerId,omitempty" require:"true"`
	// {"en":"Consumer name.", "zh_CN":"消费方名称。"}
	ConsumerName *string `json:"consumerName,omitempty" xml:"consumerName,omitempty" require:"true"`
	// {"en":"Consumer group.", "zh_CN":"消费方分组。"}
	ConsumerGroup *string `json:"consumerGroup,omitempty" xml:"consumerGroup,omitempty" require:"true"`
	// {"en":"Consumer data ID.", "zh_CN":"消费方数据ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Create time, format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Update time, format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s GetConsumerInfoConsumerInfo) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoConsumerInfo) GoString() string {
	return s.String()
}

func (s *GetConsumerInfoConsumerInfo) SetAccountCode(v string) *GetConsumerInfoConsumerInfo {
	s.AccountCode = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetConsumerId(v string) *GetConsumerInfoConsumerInfo {
	s.ConsumerId = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetConsumerName(v string) *GetConsumerInfoConsumerInfo {
	s.ConsumerName = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetConsumerGroup(v string) *GetConsumerInfoConsumerInfo {
	s.ConsumerGroup = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetId(v string) *GetConsumerInfoConsumerInfo {
	s.Id = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetCreateTime(v string) *GetConsumerInfoConsumerInfo {
	s.CreateTime = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetUpdateTime(v string) *GetConsumerInfoConsumerInfo {
	s.UpdateTime = &v
	return s
}

func (s *GetConsumerInfoConsumerInfo) SetRemark(v string) *GetConsumerInfoConsumerInfo {
	s.Remark = &v
	return s
}

type GetConsumerInfoPaths struct {
}

func (s GetConsumerInfoPaths) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoPaths) GoString() string {
	return s.String()
}

type GetConsumerInfoParameters struct {
	// {"en":"Consumer ID.", "zh_CN":"消费方ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s GetConsumerInfoParameters) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoParameters) GoString() string {
	return s.String()
}

func (s *GetConsumerInfoParameters) SetId(v string) *GetConsumerInfoParameters {
	s.Id = &v
	return s
}

type GetConsumerInfoRequestHeader struct {
}

func (s GetConsumerInfoRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoRequestHeader) GoString() string {
	return s.String()
}

type GetConsumerInfoResponseHeader struct {
}

func (s GetConsumerInfoResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConsumerInfoResponseHeader) GoString() string {
	return s.String()
}

type UpdateExceptionForWAFManagedRulesRequest struct {
	// {"en":"Rule exception ID.","zh_CN":"规则例外ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Match type,IP can only be EQUAL.\nEQUAL: Equal\nCONTAIN: Contains\nREGEX: Regular match","zh_CN":"匹配类型，IP只能是等于。\nEQUAL：等于\nCONTAIN：包含\nREGEX：正则匹配","exampleValue":"EQUAL,CONTAIN,REGEX"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Rule exceptions.\nWhen matchType=EQUAL, case-sensitive, path and uri must start with \"/\", and body can only pass one value;\nWhen matchType=REGEX, only one value can be passed.","zh_CN":"规则例外内容。\nmatchType=EQUAL时，大小写敏感，path和uri必须以\"/\"开头，body只能传一个值；\nmatchType=REGEX时，只能传一个值。"}
	ContentList []*string `json:"contentList,omitempty" xml:"contentList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateExceptionForWAFManagedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesRequest) GoString() string {
	return s.String()
}

func (s *UpdateExceptionForWAFManagedRulesRequest) SetId(v string) *UpdateExceptionForWAFManagedRulesRequest {
	s.Id = &v
	return s
}

func (s *UpdateExceptionForWAFManagedRulesRequest) SetMatchType(v string) *UpdateExceptionForWAFManagedRulesRequest {
	s.MatchType = &v
	return s
}

func (s *UpdateExceptionForWAFManagedRulesRequest) SetContentList(v []*string) *UpdateExceptionForWAFManagedRulesRequest {
	s.ContentList = v
	return s
}

type UpdateExceptionForWAFManagedRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateExceptionForWAFManagedRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateExceptionForWAFManagedRulesRequestHeader) SetServiceType(v string) *UpdateExceptionForWAFManagedRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateExceptionForWAFManagedRulesPaths struct {
}

func (s UpdateExceptionForWAFManagedRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesPaths) GoString() string {
	return s.String()
}

type UpdateExceptionForWAFManagedRulesParameters struct {
}

func (s UpdateExceptionForWAFManagedRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesParameters) GoString() string {
	return s.String()
}

type UpdateExceptionForWAFManagedRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateExceptionForWAFManagedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesResponse) GoString() string {
	return s.String()
}

func (s *UpdateExceptionForWAFManagedRulesResponse) SetCode(v string) *UpdateExceptionForWAFManagedRulesResponse {
	s.Code = &v
	return s
}

func (s *UpdateExceptionForWAFManagedRulesResponse) SetMsg(v string) *UpdateExceptionForWAFManagedRulesResponse {
	s.Msg = &v
	return s
}

type UpdateExceptionForWAFManagedRulesResponseHeader struct {
}

func (s UpdateExceptionForWAFManagedRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateExceptionForWAFManagedRulesResponseHeader) GoString() string {
	return s.String()
}

type GetQuotaRuleListRequest struct {
}

func (s GetQuotaRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListRequest) GoString() string {
	return s.String()
}

type GetQuotaRuleListResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data *GetQuotaRuleListPage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetQuotaRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetQuotaRuleListResponse) SetCode(v int) *GetQuotaRuleListResponse {
	s.Code = &v
	return s
}

func (s *GetQuotaRuleListResponse) SetMsg(v string) *GetQuotaRuleListResponse {
	s.Msg = &v
	return s
}

func (s *GetQuotaRuleListResponse) SetData(v *GetQuotaRuleListPage) *GetQuotaRuleListResponse {
	s.Data = v
	return s
}

type GetQuotaRuleListPage struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"The total number of pages.", "zh_CN":"总页数。"}
	Pages *int `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页规则条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"The total number of records.", "zh_CN":"总条数。"}
	Total *int `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"List of quota rule.", "zh_CN":"配额规则列表。"}
	Records []*GetQuotaRuleListVo `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetQuotaRuleListPage) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListPage) GoString() string {
	return s.String()
}

func (s *GetQuotaRuleListPage) SetCurrent(v int) *GetQuotaRuleListPage {
	s.Current = &v
	return s
}

func (s *GetQuotaRuleListPage) SetPages(v int) *GetQuotaRuleListPage {
	s.Pages = &v
	return s
}

func (s *GetQuotaRuleListPage) SetSize(v int) *GetQuotaRuleListPage {
	s.Size = &v
	return s
}

func (s *GetQuotaRuleListPage) SetTotal(v int) *GetQuotaRuleListPage {
	s.Total = &v
	return s
}

func (s *GetQuotaRuleListPage) SetRecords(v []*GetQuotaRuleListVo) *GetQuotaRuleListPage {
	s.Records = v
	return s
}

type GetQuotaRuleListVo struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"The number of APIs.", "zh_CN":"API数。"}
	ApiCount *int `json:"apiCount,omitempty" xml:"apiCount,omitempty" require:"true"`
	// {"en":"The number of consumer.", "zh_CN":"消费方数。"}
	ConsumerCount *int `json:"consumerCount,omitempty" xml:"consumerCount,omitempty" require:"true"`
	// {"en":"Control action,default value: INTERCEPT.
	// INTERCEPT:Block
	// MONITOR:Log.", "zh_CN":"控制动作。
	// INTERCEPT：拦截
	// MONITOR：监控。"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty" require:"true"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *string `json:"limitDuration,omitempty" xml:"limitDuration,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty" require:"true"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// {"en":"Status.
	// ON:on
	// OFF:off", "zh_CN":"状态。
	// ON：开
	// OFF：关。"}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {"en":"Consumer square flow control threshold.", "zh_CN":"消费方配额阈值。"}
	ThresholdValue *string `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty" require:"true"`
	// {"en":"Update time,format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s GetQuotaRuleListVo) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListVo) GoString() string {
	return s.String()
}

func (s *GetQuotaRuleListVo) SetId(v string) *GetQuotaRuleListVo {
	s.Id = &v
	return s
}

func (s *GetQuotaRuleListVo) SetApiCount(v int) *GetQuotaRuleListVo {
	s.ApiCount = &v
	return s
}

func (s *GetQuotaRuleListVo) SetConsumerCount(v int) *GetQuotaRuleListVo {
	s.ConsumerCount = &v
	return s
}

func (s *GetQuotaRuleListVo) SetControlAction(v string) *GetQuotaRuleListVo {
	s.ControlAction = &v
	return s
}

func (s *GetQuotaRuleListVo) SetLimitDuration(v string) *GetQuotaRuleListVo {
	s.LimitDuration = &v
	return s
}

func (s *GetQuotaRuleListVo) SetPolicyName(v string) *GetQuotaRuleListVo {
	s.PolicyName = &v
	return s
}

func (s *GetQuotaRuleListVo) SetRemark(v string) *GetQuotaRuleListVo {
	s.Remark = &v
	return s
}

func (s *GetQuotaRuleListVo) SetStatus(v string) *GetQuotaRuleListVo {
	s.Status = &v
	return s
}

func (s *GetQuotaRuleListVo) SetThresholdValue(v string) *GetQuotaRuleListVo {
	s.ThresholdValue = &v
	return s
}

func (s *GetQuotaRuleListVo) SetUpdateTime(v string) *GetQuotaRuleListVo {
	s.UpdateTime = &v
	return s
}

type GetQuotaRuleListPaths struct {
}

func (s GetQuotaRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListPaths) GoString() string {
	return s.String()
}

type GetQuotaRuleListParameters struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	GetQuotaRuleListPage *int `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页规则条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty"`
}

func (s GetQuotaRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListParameters) GoString() string {
	return s.String()
}

func (s *GetQuotaRuleListParameters) SetPage(v int) *GetQuotaRuleListParameters {
	s.GetQuotaRuleListPage = &v
	return s
}

func (s *GetQuotaRuleListParameters) SetSize(v int) *GetQuotaRuleListParameters {
	s.Size = &v
	return s
}

func (s *GetQuotaRuleListParameters) SetPolicyName(v string) *GetQuotaRuleListParameters {
	s.PolicyName = &v
	return s
}

type GetQuotaRuleListRequestHeader struct {
}

func (s GetQuotaRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListRequestHeader) GoString() string {
	return s.String()
}

type GetQuotaRuleListResponseHeader struct {
}

func (s GetQuotaRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaRuleListResponseHeader) GoString() string {
	return s.String()
}

type CreateAndActiveApiRequest struct {
	// {"en":"Case sensitive,default value:0.
	// 0:False
	// 1:True", "zh_CN":"大小写敏感，默认值：0。
	//  0：否
	// 1：是"}
	ApiCase *int `json:"apiCase,omitempty" xml:"apiCase,omitempty"`
	// {"en":"API group.", "zh_CN":"API分组。"}
	ApiGroup *string `json:"apiGroup,omitempty" xml:"apiGroup,omitempty" require:"true"`
	// {"en":"API name.", "zh_CN":"API名称。"}
	ApiName *string `json:"apiName,omitempty" xml:"apiName,omitempty" require:"true"`
	// {"en":"API privacy,default value:PUBLIC.
	// PUBLIC:Public,the consumer does not need to associate with the API, and can access the public API assets only by passing the authentication.
	// PRIVATE:Private,you need to create a consumer and associate with the API to access private API assets.", "zh_CN":"API隐私，默认值：PUBLIC。
	// PUBLIC：公开，消费方无需绑定API，仅鉴权通过即可访问公开API资产。
	// PRIVATE：私有，需要创建消费方并绑定API，方可访问私有API资产。"}
	ApiConceal *string `json:"apiConceal,omitempty" xml:"apiConceal,omitempty"`
	// {"en":"API type,default value:NORMAL.
	// NORMAL:Normal API,the path does not contain query string parameters,such as http://www.test.com/api.
	// WHEN_CASE:When case,the path contains query string parameters,such as http://www.test.com/api?action=1 and http://www.test.com/api?action=2 are two different APIs.", "zh_CN":"API类型，默认值：NORMAL。
	// NORMAL：普通接口，路径中不包含query string参数的普通接口，如http://www.test.com/api。
	// WHEN_CASE：when_case接口，路径中包含query string参数，如http://www.test.com/api?action=1与http://www.test.com/api?action=2 是两个不同的接口。"}
	ApiType *string `json:"apiType,omitempty" xml:"apiType,omitempty" require:"true"`
	// {"en":"Authentication configuration.", "zh_CN":"鉴权配置。"}
	CreateAndActiveApiAuthConfig *CreateAndActiveApiAuthConfig `json:"authConfig,omitempty" xml:"authConfig,omitempty"`
	// {"en":"Authentication key.", "zh_CN":"鉴权秘钥。"}
	AuthKey *string `json:"authKey,omitempty" xml:"authKey,omitempty"`
	// {"en":"Domain,multiple use \";\" split.", "zh_CN":"所属域名，多个用;隔开。"}
	Domains *string `json:"domains,omitempty" xml:"domains,omitempty" require:"true"`
	// {"en":"Endpoint path.", "zh_CN":"前端路径。"}
	FrontPath *string `json:"frontPath,omitempty" xml:"frontPath,omitempty" require:"true"`
	// {"en":"Path matching type,default value:DICT.
	// DICT:Complete matching
	//  REGEX:Regular matching", "zh_CN":"路径匹配类型，默认值：DICT。
	// DICT：完整匹配
	//  REGEX：正则匹配"}
	PathMatchType *string `json:"pathMatchType,omitempty" xml:"pathMatchType,omitempty" require:"true"`
	// {"en":"Match parameters in the path,default value:0.
	// 0:False
	// 1:True
	// ", "zh_CN":"匹配路径参数，默认值：0。
	//  0：否
	// 1：是
	// "}
	FrontPathType *int `json:"frontPathType,omitempty" xml:"frontPathType,omitempty" require:"true"`
	// {"en":"Parameter limit configuration.", "zh_CN":"参数限制配置。"}
	CreateAndActiveApiParamsLimitConfig []*CreateAndActiveApiParamsLimitConfig `json:"paramsLimitConfig,omitempty" xml:"paramsLimitConfig,omitempty" type:"Repeated"`
	// {"en":"Remark.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"Request body limit configuration.", "zh_CN":"请求Body限制配置。"}
	CreateAndActiveApiRequestBodyConfig *CreateAndActiveApiRequestBodyConfig `json:"requestBodyConfig,omitempty" xml:"requestBodyConfig,omitempty" require:"true"`
	// {"en":"Request Methods,multiple use \";\" split,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，多个用;隔开，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true"`
}

func (s CreateAndActiveApiRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiRequest) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiRequest) SetApiCase(v int) *CreateAndActiveApiRequest {
	s.ApiCase = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetApiGroup(v string) *CreateAndActiveApiRequest {
	s.ApiGroup = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetApiName(v string) *CreateAndActiveApiRequest {
	s.ApiName = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetApiConceal(v string) *CreateAndActiveApiRequest {
	s.ApiConceal = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetApiType(v string) *CreateAndActiveApiRequest {
	s.ApiType = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetAuthConfig(v *CreateAndActiveApiAuthConfig) *CreateAndActiveApiRequest {
	s.CreateAndActiveApiAuthConfig = v
	return s
}

func (s *CreateAndActiveApiRequest) SetAuthKey(v string) *CreateAndActiveApiRequest {
	s.AuthKey = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetDomains(v string) *CreateAndActiveApiRequest {
	s.Domains = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetFrontPath(v string) *CreateAndActiveApiRequest {
	s.FrontPath = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetPathMatchType(v string) *CreateAndActiveApiRequest {
	s.PathMatchType = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetFrontPathType(v int) *CreateAndActiveApiRequest {
	s.FrontPathType = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetParamsLimitConfig(v []*CreateAndActiveApiParamsLimitConfig) *CreateAndActiveApiRequest {
	s.CreateAndActiveApiParamsLimitConfig = v
	return s
}

func (s *CreateAndActiveApiRequest) SetRemark(v string) *CreateAndActiveApiRequest {
	s.Remark = &v
	return s
}

func (s *CreateAndActiveApiRequest) SetRequestBodyConfig(v *CreateAndActiveApiRequestBodyConfig) *CreateAndActiveApiRequest {
	s.CreateAndActiveApiRequestBodyConfig = v
	return s
}

func (s *CreateAndActiveApiRequest) SetRequestMethod(v string) *CreateAndActiveApiRequest {
	s.RequestMethod = &v
	return s
}

type CreateAndActiveApiAuthConfig struct {
	// {"en":"Authentication parameter name,default value: authKey.", "zh_CN":"鉴权参数名称，默认值：authKey。"}
	AuthParamName *string `json:"authParamName,omitempty" xml:"authParamName,omitempty"`
	// {"en":"Authentication parameter location,default value:1.
	// 1:HTTP header
	// 2:Query string
	// 3:Cookie", "zh_CN":"鉴权参数位置，默认值：1。
	// 1：HTTP header
	// 2：Query string
	// 3：Cookie"}
	AuthParamSite *string `json:"authParamSite,omitempty" xml:"authParamSite,omitempty"`
	// {"en":"Authentication method,default value:1.
	// 1:No auth
	// 2:Auth by  wangsu Secret Key.", "zh_CN":"鉴权方法，默认值：1。
	// 1：免鉴权
	// 2：网宿秘钥对鉴权"}
	AuthType *string `json:"authType,omitempty" xml:"authType,omitempty"`
	// {"en":"Authentication Token Validity Period(second), default value:8.", "zh_CN":"鉴权有效期（s），默认值：8。"}
	AuthValidityTime *int `json:"authValidityTime,omitempty" xml:"authValidityTime,omitempty"`
}

func (s CreateAndActiveApiAuthConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiAuthConfig) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiAuthConfig) SetAuthParamName(v string) *CreateAndActiveApiAuthConfig {
	s.AuthParamName = &v
	return s
}

func (s *CreateAndActiveApiAuthConfig) SetAuthParamSite(v string) *CreateAndActiveApiAuthConfig {
	s.AuthParamSite = &v
	return s
}

func (s *CreateAndActiveApiAuthConfig) SetAuthType(v string) *CreateAndActiveApiAuthConfig {
	s.AuthType = &v
	return s
}

func (s *CreateAndActiveApiAuthConfig) SetAuthValidityTime(v int) *CreateAndActiveApiAuthConfig {
	s.AuthValidityTime = &v
	return s
}

type CreateAndActiveApiParamsLimitConfig struct {
	// {"en":"Request body parameter limit configuration.", "zh_CN":"请求Body参数限制配置。"}
	CreateAndActiveApiBody []*CreateAndActiveApiBody `json:"body,omitempty" xml:"body,omitempty" type:"Repeated"`
	// {"en":"Request methods,default value:GET.
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE", "zh_CN":"请求方法，默认值：GET。
	// GET
	// POST
	// DELETE
	// UPDATE
	// PUT
	// HEAD
	// CONNECT
	// OPTIONS
	// COPY
	// LOCK
	// UNLOCK
	// TRACE
	// PATCH
	// PROPFIND
	// MKCOL
	// MOVE"}
	RequestMethod *string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty"`
	// {"en":"Request parameter.", "zh_CN":"请求参数。"}
	CreateAndActiveApiRequestParams []*CreateAndActiveApiRequestParams `json:"requestParams,omitempty" xml:"requestParams,omitempty" type:"Repeated"`
	// {"en":"Path matching type,Default value:DICT.
	// DICT:Complete matching
	//  REGEX:Regular matching", "zh_CN":"路径匹配类型，默认值：DICT。
	// DICT：完整匹配
	//  REGEX：正则匹配"}
	PathMatchType *string `json:"pathMatchType,omitempty" xml:"pathMatchType,omitempty"`
	// {"en":"Whether to define the body parameter,default value:false.", "zh_CN":"是否定义Body参数，默认值：false。"}
	BodyFlag *bool `json:"bodyFlag,omitempty" xml:"bodyFlag,omitempty"`
	// {"en":"CreateAndActiveApiBody parameter type,default value:FORM.
	// FORM:Form
	// JSON_XML:Json format definition", "zh_CN":"Body参数类型，默认值：FORM。
	// FORM：Form表单
	// JSON_XML：Json格式定义"}
	BodyType *string `json:"bodyType,omitempty" xml:"bodyType,omitempty"`
}

func (s CreateAndActiveApiParamsLimitConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiParamsLimitConfig) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiParamsLimitConfig) SetBody(v []*CreateAndActiveApiBody) *CreateAndActiveApiParamsLimitConfig {
	s.CreateAndActiveApiBody = v
	return s
}

func (s *CreateAndActiveApiParamsLimitConfig) SetRequestMethod(v string) *CreateAndActiveApiParamsLimitConfig {
	s.RequestMethod = &v
	return s
}

func (s *CreateAndActiveApiParamsLimitConfig) SetRequestParams(v []*CreateAndActiveApiRequestParams) *CreateAndActiveApiParamsLimitConfig {
	s.CreateAndActiveApiRequestParams = v
	return s
}

func (s *CreateAndActiveApiParamsLimitConfig) SetPathMatchType(v string) *CreateAndActiveApiParamsLimitConfig {
	s.PathMatchType = &v
	return s
}

func (s *CreateAndActiveApiParamsLimitConfig) SetBodyFlag(v bool) *CreateAndActiveApiParamsLimitConfig {
	s.BodyFlag = &v
	return s
}

func (s *CreateAndActiveApiParamsLimitConfig) SetBodyType(v string) *CreateAndActiveApiParamsLimitConfig {
	s.BodyType = &v
	return s
}

type CreateAndActiveApiRequestBodyConfig struct {
	// {"en":"Maximum body limit(bytes).", "zh_CN":"body最大限制。"}
	BodyLimitMax *int `json:"bodyLimitMax,omitempty" xml:"bodyLimitMax,omitempty"`
	// {"en":"HTTP content type of the response,default value:1.
	// 1:Form
	// 2:Json
	// 4:Any
	// 5:For empty or no existence.", "zh_CN":"contentType，默认值：1。
	// 1：Form表单
	// 2：Json
	// 4：任意
	// 5：为空或不存在。"}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// {"en":"Maximum nesting depth.", "zh_CN":"最大嵌套层数。"}
	NestMax *int `json:"nestMax,omitempty" xml:"nestMax,omitempty"`
	// {"en":"Maximum number of parameters for JSON.", "zh_CN":"Json最大参数个数。"}
	ParamsCountMax *int `json:"paramsCountMax,omitempty" xml:"paramsCountMax,omitempty"`
	// {"en":"Parameter limit switch,default value: false.", "zh_CN":"参数限制开关，默认值：false。"}
	ParamsLimitSwitch *bool `json:"paramsLimitSwitch,omitempty" xml:"paramsLimitSwitch,omitempty"`
	// {"en":"Query string parameter detection mode,default value:1.
	// 1:Quirk mode
	// 2:Strict mode", "zh_CN":"query string参数检测模式，默认值：1。
	// :1：宽松模式
	// 2：严格模式"}
	ParamsProcessingModel *string `json:"paramsProcessingModel,omitempty" xml:"paramsProcessingModel,omitempty"`
	// {"en":"Request body limit switch,default value:false.", "zh_CN":"请求body限制开关，默认值：false。"}
	RequestBodyLimitSwitch *bool `json:"requestBodyLimitSwitch,omitempty" xml:"requestBodyLimitSwitch,omitempty"`
	// {"en":"The action to execute when a rule is matched,default value:2.
	// 1:Block
	// 2:Log
	// 3:Sign", "zh_CN":"处理动作，默认值：2。
	// 1：拦截
	// 2：监控
	// 3：标记"}
	RequestProcessingAction *string `json:"requestProcessingAction,omitempty" xml:"requestProcessingAction,omitempty"`
}

func (s CreateAndActiveApiRequestBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiRequestBodyConfig) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiRequestBodyConfig) SetBodyLimitMax(v int) *CreateAndActiveApiRequestBodyConfig {
	s.BodyLimitMax = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetContentType(v string) *CreateAndActiveApiRequestBodyConfig {
	s.ContentType = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetNestMax(v int) *CreateAndActiveApiRequestBodyConfig {
	s.NestMax = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetParamsCountMax(v int) *CreateAndActiveApiRequestBodyConfig {
	s.ParamsCountMax = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetParamsLimitSwitch(v bool) *CreateAndActiveApiRequestBodyConfig {
	s.ParamsLimitSwitch = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetParamsProcessingModel(v string) *CreateAndActiveApiRequestBodyConfig {
	s.ParamsProcessingModel = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetRequestBodyLimitSwitch(v bool) *CreateAndActiveApiRequestBodyConfig {
	s.RequestBodyLimitSwitch = &v
	return s
}

func (s *CreateAndActiveApiRequestBodyConfig) SetRequestProcessingAction(v string) *CreateAndActiveApiRequestBodyConfig {
	s.RequestProcessingAction = &v
	return s
}

type CreateAndActiveApiRequestParams struct {
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// {"en":"Required parameter,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter position,default value:1.
	// 1: HTTP header
	// 2: Query string,
	// 3: Cookie
	// 4: Path parameter", "zh_CN":"参数位置，默认值：1。
	// 1：HTTP header
	// 2：Query string,
	// 3：Cookie
	// 4：路径参数"}
	Site *string `json:"site,omitempty" xml:"site,omitempty"`
	// {"en":"Parameter Type,default value:1.
	// 1:integer
	// 2:number
	// 3:string
	// 4:boolean
	// 5:enumerate", "zh_CN":"参数类型，默认值：1。
	// 1：整数
	// 2：数字
	// 3：字符串
	// 4：布尔
	// 5：枚举"}
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// {"en":"Parameter enumeration,multiple use \";\" split.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s CreateAndActiveApiRequestParams) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiRequestParams) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiRequestParams) SetMax(v int) *CreateAndActiveApiRequestParams {
	s.Max = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetMin(v int) *CreateAndActiveApiRequestParams {
	s.Min = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetName(v string) *CreateAndActiveApiRequestParams {
	s.Name = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetRequire(v bool) *CreateAndActiveApiRequestParams {
	s.Require = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetSite(v string) *CreateAndActiveApiRequestParams {
	s.Site = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetType(v string) *CreateAndActiveApiRequestParams {
	s.Type = &v
	return s
}

func (s *CreateAndActiveApiRequestParams) SetValue(v string) *CreateAndActiveApiRequestParams {
	s.Value = &v
	return s
}

type CreateAndActiveApiBody struct {
	// {"en":"Json node level(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Json sub node array(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json子节点数组，类型为Body（Body为Json必传）。"}
	CreateAndActiveApiChildren []*CreateAndActiveApiChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
}

func (s CreateAndActiveApiBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiBody) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiBody) SetLevel(v int) *CreateAndActiveApiBody {
	s.Level = &v
	return s
}

func (s *CreateAndActiveApiBody) SetNodeRequire(v bool) *CreateAndActiveApiBody {
	s.NodeRequire = &v
	return s
}

func (s *CreateAndActiveApiBody) SetMax(v int) *CreateAndActiveApiBody {
	s.Max = &v
	return s
}

func (s *CreateAndActiveApiBody) SetMin(v int) *CreateAndActiveApiBody {
	s.Min = &v
	return s
}

func (s *CreateAndActiveApiBody) SetName(v string) *CreateAndActiveApiBody {
	s.Name = &v
	return s
}

func (s *CreateAndActiveApiBody) SetEnumeration(v string) *CreateAndActiveApiBody {
	s.Enumeration = &v
	return s
}

func (s *CreateAndActiveApiBody) SetRequire(v bool) *CreateAndActiveApiBody {
	s.Require = &v
	return s
}

func (s *CreateAndActiveApiBody) SetType(v string) *CreateAndActiveApiBody {
	s.Type = &v
	return s
}

func (s *CreateAndActiveApiBody) SetChildren(v []*CreateAndActiveApiChildren) *CreateAndActiveApiBody {
	s.CreateAndActiveApiChildren = v
	return s
}

type CreateAndActiveApiChildren struct {
	// {"en":"Json node level(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Json sub node array(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json子节点数组，类型为Body（Body为Json必传）。"}
	CreateAndActiveApiChildren []*CreateAndActiveApiSecondChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
}

func (s CreateAndActiveApiChildren) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiChildren) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiChildren) SetLevel(v int) *CreateAndActiveApiChildren {
	s.Level = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetNodeRequire(v bool) *CreateAndActiveApiChildren {
	s.NodeRequire = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetMax(v int) *CreateAndActiveApiChildren {
	s.Max = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetMin(v int) *CreateAndActiveApiChildren {
	s.Min = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetName(v string) *CreateAndActiveApiChildren {
	s.Name = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetEnumeration(v string) *CreateAndActiveApiChildren {
	s.Enumeration = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetRequire(v bool) *CreateAndActiveApiChildren {
	s.Require = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetType(v string) *CreateAndActiveApiChildren {
	s.Type = &v
	return s
}

func (s *CreateAndActiveApiChildren) SetChildren(v []*CreateAndActiveApiSecondChildren) *CreateAndActiveApiChildren {
	s.CreateAndActiveApiChildren = v
	return s
}

type CreateAndActiveApiSecondChildren struct {
	// {"en":"Json node level(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点层级（Body为Json必传）。"}
	Level *int `json:"level,omitempty" xml:"level,omitempty"`
	// {"en":"Whether the Json node is required to fill in the option(CreateAndActiveApiBody is Json must pass).", "zh_CN":"Json节点是否带必填选项（Body为Json必传）。"}
	NodeRequire *bool `json:"nodeRequire,omitempty" xml:"nodeRequire,omitempty"`
	// {"en":"Maximum.", "zh_CN":"最大值。"}
	Max *int `json:"max,omitempty" xml:"max,omitempty"`
	// {"en":"Minimum.", "zh_CN":"最小值。"}
	Min *int `json:"min,omitempty" xml:"min,omitempty"`
	// {"en":"Parameter name.", "zh_CN":"参数名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Enumeration.", "zh_CN":"参数枚举值，多个用;分隔。"}
	Enumeration *string `json:"enumeration,omitempty" xml:"enumeration,omitempty"`
	// {"en":"Required,default value:false.", "zh_CN":"是否必须，默认值：false。"}
	Require *bool `json:"require,omitempty" xml:"require,omitempty"`
	// {"en":"Parameter Type.
	// integer:Integer
	// number:Number
	// string:String
	// boolean:Boolean
	// enumeration:Enumerate
	// array:Array
	// object:Json object", "zh_CN":"参数类型。
	// integer：整数
	// number：数字
	// string：字符串
	// boolean：布尔
	// enumeration：枚举
	// array：数组
	// object：Json对象"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s CreateAndActiveApiSecondChildren) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiSecondChildren) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiSecondChildren) SetLevel(v int) *CreateAndActiveApiSecondChildren {
	s.Level = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetNodeRequire(v bool) *CreateAndActiveApiSecondChildren {
	s.NodeRequire = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetMax(v int) *CreateAndActiveApiSecondChildren {
	s.Max = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetMin(v int) *CreateAndActiveApiSecondChildren {
	s.Min = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetName(v string) *CreateAndActiveApiSecondChildren {
	s.Name = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetEnumeration(v string) *CreateAndActiveApiSecondChildren {
	s.Enumeration = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetRequire(v bool) *CreateAndActiveApiSecondChildren {
	s.Require = &v
	return s
}

func (s *CreateAndActiveApiSecondChildren) SetType(v string) *CreateAndActiveApiSecondChildren {
	s.Type = &v
	return s
}

type CreateAndActiveApiResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateAndActiveApiResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiResponse) GoString() string {
	return s.String()
}

func (s *CreateAndActiveApiResponse) SetCode(v int) *CreateAndActiveApiResponse {
	s.Code = &v
	return s
}

func (s *CreateAndActiveApiResponse) SetMsg(v string) *CreateAndActiveApiResponse {
	s.Msg = &v
	return s
}

func (s *CreateAndActiveApiResponse) SetData(v map[string]interface{}) *CreateAndActiveApiResponse {
	s.Data = v
	return s
}

type CreateAndActiveApiPaths struct {
}

func (s CreateAndActiveApiPaths) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiPaths) GoString() string {
	return s.String()
}

type CreateAndActiveApiParameters struct {
}

func (s CreateAndActiveApiParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiParameters) GoString() string {
	return s.String()
}

type CreateAndActiveApiRequestHeader struct {
}

func (s CreateAndActiveApiRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiRequestHeader) GoString() string {
	return s.String()
}

type CreateAndActiveApiResponseHeader struct {
}

func (s CreateAndActiveApiResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateAndActiveApiResponseHeader) GoString() string {
	return s.String()
}

type ListUpgradeDetailsRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s ListUpgradeDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsRequest) GoString() string {
	return s.String()
}

func (s *ListUpgradeDetailsRequest) SetDomainList(v []*string) *ListUpgradeDetailsRequest {
	s.DomainList = v
	return s
}

type ListUpgradeDetailsRequestHeader struct {
	// {"defaultValue":"en","en":"The language of response data, default value: en.\nzh_CN: Chinese\nen: English","zh_CN":"返回内容的语言版本，默认值: en。\nzh_CN：中文\nen：英文","exampleValue":"en,zh_CN"}
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListUpgradeDetailsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListUpgradeDetailsRequestHeader) SetLanguage(v string) *ListUpgradeDetailsRequestHeader {
	s.Language = &v
	return s
}

func (s *ListUpgradeDetailsRequestHeader) SetServiceType(v string) *ListUpgradeDetailsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListUpgradeDetailsPaths struct {
}

func (s ListUpgradeDetailsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsPaths) GoString() string {
	return s.String()
}

type ListUpgradeDetailsParameters struct {
}

func (s ListUpgradeDetailsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsParameters) GoString() string {
	return s.String()
}

type ListUpgradeDetailsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListUpgradeDetailsResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListUpgradeDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsResponse) GoString() string {
	return s.String()
}

func (s *ListUpgradeDetailsResponse) SetCode(v string) *ListUpgradeDetailsResponse {
	s.Code = &v
	return s
}

func (s *ListUpgradeDetailsResponse) SetMsg(v string) *ListUpgradeDetailsResponse {
	s.Msg = &v
	return s
}

func (s *ListUpgradeDetailsResponse) SetData(v []*ListUpgradeDetailsResponseData) *ListUpgradeDetailsResponse {
	s.Data = v
	return s
}

type ListUpgradeDetailsResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Array of rule information to be updated.","zh_CN":"待更新规则信息数组。"}
	RuleList []*ListUpgradeDetailsResponseDataRuleList `json:"ruleList,omitempty" xml:"ruleList,omitempty" require:"true" type:"Repeated"`
}

func (s ListUpgradeDetailsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsResponseData) GoString() string {
	return s.String()
}

func (s *ListUpgradeDetailsResponseData) SetDomain(v string) *ListUpgradeDetailsResponseData {
	s.Domain = &v
	return s
}

func (s *ListUpgradeDetailsResponseData) SetRuleList(v []*ListUpgradeDetailsResponseDataRuleList) *ListUpgradeDetailsResponseData {
	s.RuleList = v
	return s
}

type ListUpgradeDetailsResponseDataRuleList struct {
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Action.\nBLOCK: Deny request by a default 403 response.\nLOG: Log request and continue further detections.\nOFF: Select if you do not a policy or rule take effect.","zh_CN":"规则动作。\nBLOCK：阻断请求并响应403。\nLOG：记录请求的攻击行为，并继续做进一步的评估。\nOFF：对应规则或策略不生效。","exampleValue":"BLOCK,LOG,OFF"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Describe.","zh_CN":"描述。"}
	Des *string `json:"des,omitempty" xml:"des,omitempty" require:"true"`
	// {"en":"Attack type.\nWAF_XSS: Cross-Site Scripting\nWAF_RFI: File Inclusion\nWAF_FILE_UPLOAD: File Uploading\nWAF_CMDI: Command Injection\nWAF_DIR_TRAVERSAL: Directory Traversal\nWAF_THIRDCOMP: 3rd-party Component Vulnerabilities\nWAF_XPATH_LDAP_SSI: XPATH/LDAP/SSI Injection\nWAF_SCANNER: Scanners\nWAF_SHELL_BACKDOOR: Webshell Uploading\nWAF_FILE_DOWNLOAD: Unauthorized Download\nWAF_XXE: XML Injection\nWAF_SQLI: SQL Injection\nWAF_SSRF: Server-side Request Forge","zh_CN":"攻击类型。\nWAF_XSS：XSS跨站\nWAF_RFI：文件包含\nWAF_FILE_UPLOAD：文件上传\nWAF_CMDI：命令注入\nWAF_DIR_TRAVERSAL：目录遍历\nWAF_THIRDCOMP：第三方组件漏洞\nWAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入\nWAF_SCANNER：扫描器\nWAF_SHELL_BACKDOOR：木马后门\nWAF_FILE_DOWNLOAD：非法下载\nWAF_XXE：XML注入\nWAF_SQLI：SQL注入\nWAF_SSRF：服务端请求伪造","exampleValue":"WAF_XSS,WAF_RFI,WAF_FILE_UPLOAD,WAF_CMDI,WAF_DIR_TRAVERSAL,WAF_THIRDCOMP,WAF_XPATH_LDAP_SSI,WAF_SCANNER,WAF_SHELL_BACKDOOR,WAF_FILE_DOWNLOAD,WAF_XXE,WAF_SQLI,WAF_SSRF"}
	AttackType *string `json:"attackType,omitempty" xml:"attackType,omitempty" require:"true"`
	// {"en":"OWASP type.\nA1: Injection\nA2: Broken Authentication\nA3: Sensitive Data Exposure\nA4: XML External Entities(XXE)\nA5: Broken Access Control\nA7: Cross-site scripting (XSS)\nA8: Insecure Deserialization\nA9: Using Components with Known Vulnerabilities","zh_CN":"OWASP类型。\nA1：注入\nA2：失效的身份认证和会话管理\nA3：敏感信息泄露\nA4：XML外部实体（XEE）\nA5：失效的访问控制\nA7：跨站脚本（XSS）\nA8：不安全的反序列化\nA9：使用含有已知漏洞的组件","exampleValue":"A1,A2,A3,A4,A5,A7,A8,A9"}
	OwaspTypeList []*string `json:"owaspTypeList,omitempty" xml:"owaspTypeList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Vulnerability number.","zh_CN":"漏洞编号。"}
	CveList []*string `json:"cveList,omitempty" xml:"cveList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Components.","zh_CN":"关联组件。"}
	ComponentList []*string `json:"componentList,omitempty" xml:"componentList,omitempty" require:"true" type:"Repeated"`
}

func (s ListUpgradeDetailsResponseDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsResponseDataRuleList) GoString() string {
	return s.String()
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetRuleId(v int) *ListUpgradeDetailsResponseDataRuleList {
	s.RuleId = &v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetMode(v string) *ListUpgradeDetailsResponseDataRuleList {
	s.Mode = &v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetName(v string) *ListUpgradeDetailsResponseDataRuleList {
	s.Name = &v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetDes(v string) *ListUpgradeDetailsResponseDataRuleList {
	s.Des = &v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetAttackType(v string) *ListUpgradeDetailsResponseDataRuleList {
	s.AttackType = &v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetOwaspTypeList(v []*string) *ListUpgradeDetailsResponseDataRuleList {
	s.OwaspTypeList = v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetCveList(v []*string) *ListUpgradeDetailsResponseDataRuleList {
	s.CveList = v
	return s
}

func (s *ListUpgradeDetailsResponseDataRuleList) SetComponentList(v []*string) *ListUpgradeDetailsResponseDataRuleList {
	s.ComponentList = v
	return s
}

type ListUpgradeDetailsResponseHeader struct {
}

func (s ListUpgradeDetailsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListUpgradeDetailsResponseHeader) GoString() string {
	return s.String()
}

type ListWorkflowRulesRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Optional, fuzzy query based on rule name.', 'zh_CN':'可选，根据规则名称模糊查询。'}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s ListWorkflowRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesRequest) SetDomain(v string) *ListWorkflowRulesRequest {
	s.Domain = &v
	return s
}

func (s *ListWorkflowRulesRequest) SetRuleName(v string) *ListWorkflowRulesRequest {
	s.RuleName = &v
	return s
}

type ListWorkflowRulesResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Data.', 'zh_CN':'出参数据。'}
	Data []*ListWorkflowRulesBotBehaviorAnalyseVO `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListWorkflowRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesResponse) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesResponse) SetCode(v string) *ListWorkflowRulesResponse {
	s.Code = &v
	return s
}

func (s *ListWorkflowRulesResponse) SetMsg(v string) *ListWorkflowRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListWorkflowRulesResponse) SetData(v []*ListWorkflowRulesBotBehaviorAnalyseVO) *ListWorkflowRulesResponse {
	s.Data = v
	return s
}

type ListWorkflowRulesWebRuleConditionDTO struct {
	// {'en':'Request determination.
	//  NUM: Request quantity determination
	//  PERCENT: Request proportion determination', 'zh_CN':'请求判定。
	//  NUM：请求数量判定
	//  PERCENT：请求比例判定'}
	RequestJudge *string `json:"requestJudge,omitempty" xml:"requestJudge,omitempty" require:"true"`
	// {'en':'Request type.
	//  TOTAL: Total requests
	//  POST: POST requests
	//  GET: GET requests
	//  PIC: Picture resource requests
	//  CSS: CSS resource requests
	//  JS: JS resource requests
	//  OTHER: Other resource requests', 'zh_CN':'请求类型。
	//  TOTAL：总请求数
	//  POST：POST请求数
	//  GET：GET请求数
	//  PIC ：图片资源请求数
	//  CSS：CSS资源请求数
	//  JS：JS资源请求数
	//  OTHER：其他资源请求数'}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {'en':'Denominator request type.
	//  TOTAL: total number of requests
	//  POST: number of POST requests
	//  GET: number of GET requests
	//  PIC: number of image resource requests
	//  CSS: number of CSS resource requests
	//  JS: JS resource request Number
	//  OTHER: Number of other resource requests', 'zh_CN':'分母请求类型。
	//  TOTAL：总请求数
	//  POST：POST请求数
	//  GET：GET请求数
	//  PIC：图片资源请求数
	//  CSS：CSS资源请求数
	//  JS：JS资源请求数
	//  OTHER：其他资源请求数'}
	RequestTotalType *string `json:"requestTotalType,omitempty" xml:"requestTotalType,omitempty" require:"true"`
	// {'en':'Determine comparison conditions.
	//  GT: greater than
	//  LT: less than
	//  GTE: greater than or equal to
	//  LTE: less than or equal to', 'zh_CN':'判定比较条件。
	//  GT：大于
	//  LT：小于
	//  GTE：大于等于
	//  LTE：小于等于'}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {'en':'Determine comparison value.', 'zh_CN':'判定比较值。'}
	JudgeValue *int32 `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
}

func (s ListWorkflowRulesWebRuleConditionDTO) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesWebRuleConditionDTO) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesWebRuleConditionDTO) SetRequestJudge(v string) *ListWorkflowRulesWebRuleConditionDTO {
	s.RequestJudge = &v
	return s
}

func (s *ListWorkflowRulesWebRuleConditionDTO) SetRequestType(v string) *ListWorkflowRulesWebRuleConditionDTO {
	s.RequestType = &v
	return s
}

func (s *ListWorkflowRulesWebRuleConditionDTO) SetRequestTotalType(v string) *ListWorkflowRulesWebRuleConditionDTO {
	s.RequestTotalType = &v
	return s
}

func (s *ListWorkflowRulesWebRuleConditionDTO) SetJudgeType(v string) *ListWorkflowRulesWebRuleConditionDTO {
	s.JudgeType = &v
	return s
}

func (s *ListWorkflowRulesWebRuleConditionDTO) SetJudgeValue(v int32) *ListWorkflowRulesWebRuleConditionDTO {
	s.JudgeValue = &v
	return s
}

type ListWorkflowRulesProtectionPathDTO struct {
	// {'en':'Protection type.
	// Path: path
	// URI:URI', 'zh_CN':'防护路径。
	// Path：路径
	// URI：URI'}
	ProtectionName *string `json:"protectionName,omitempty" xml:"protectionName,omitempty" require:"true"`
	// {'en':'Match type.
	// EQUAL: equals
	// REGEX: regex match
	// CONTAIN: contains', 'zh_CN':'防护路径。
	// EQUAL：相等
	// REGEX：正则匹配
	// CONTAIN：相等'}
	ProtectionType *string `json:"protectionType,omitempty" xml:"protectionType,omitempty" require:"true"`
	// {'en':'Protection path.', 'zh_CN':'防护路径。'}
	ProtectionPath *string `json:"protectionPath,omitempty" xml:"protectionPath,omitempty" require:"true"`
}

func (s ListWorkflowRulesProtectionPathDTO) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesProtectionPathDTO) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesProtectionPathDTO) SetProtectionName(v string) *ListWorkflowRulesProtectionPathDTO {
	s.ProtectionName = &v
	return s
}

func (s *ListWorkflowRulesProtectionPathDTO) SetProtectionType(v string) *ListWorkflowRulesProtectionPathDTO {
	s.ProtectionType = &v
	return s
}

func (s *ListWorkflowRulesProtectionPathDTO) SetProtectionPath(v string) *ListWorkflowRulesProtectionPathDTO {
	s.ProtectionPath = &v
	return s
}

type ListWorkflowRulesApiRuleConditionDTO struct {
	// {'en':'Request type.
	//  TOTAL: total requests
	//  OTHER: number of other URL requests
	//  CUSTOMIZE: number of custom URL requests', 'zh_CN':'请求类型。
	//  TOTAL：总请求数
	//  OTHER：其他URL请求数
	//  CUSTOMIZE：自定义URL请求数'}
	RequestType *string `json:"requestType,omitempty" xml:"requestType,omitempty" require:"true"`
	// {'en':'Determine comparison conditions.
	//  GT: greater than
	//  LT: less than
	//  GTE: greater than or equal to
	//  LTE: less than or equal to', 'zh_CN':'判定比较条件。
	//  GT：大于
	//  LT：小于
	//  GTE：大于等于
	//  LTE：小于等于'}
	JudgeType *string `json:"judgeType,omitempty" xml:"judgeType,omitempty" require:"true"`
	// {'en':'Determine comparison value.', 'zh_CN':'判定比较值。'}
	JudgeValue *int32 `json:"judgeValue,omitempty" xml:"judgeValue,omitempty" require:"true"`
	// {'en':'Customized url match type.
	//  Path: path
	//  URI: URI ', 'zh_CN':'自定义url匹配类型。
	//  Path：路径
	//  URI：URI'}
	CustomizeMatchName *string `json:"customizeMatchName,omitempty" xml:"customizeMatchName,omitempty" require:"true"`
	// {'en':'Customized url matching method.
	//  DICT: complete matching
	//  REGEX: regular matching
	//  CONTAIN: contains', 'zh_CN':'自定义url匹配方式。
	//  DICT：完整匹配
	//  REGEX：正则匹配
	// CONTAIN：包含'}
	CustomizePathMatch *string `json:"customizePathMatch,omitempty" xml:"customizePathMatch,omitempty" require:"true"`
	// {'en':'Custom url.', 'zh_CN':'自定义url。'}
	CustomizePath *string `json:"customizePath,omitempty" xml:"customizePath,omitempty" require:"true"`
}

func (s ListWorkflowRulesApiRuleConditionDTO) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesApiRuleConditionDTO) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetRequestType(v string) *ListWorkflowRulesApiRuleConditionDTO {
	s.RequestType = &v
	return s
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetJudgeType(v string) *ListWorkflowRulesApiRuleConditionDTO {
	s.JudgeType = &v
	return s
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetJudgeValue(v int32) *ListWorkflowRulesApiRuleConditionDTO {
	s.JudgeValue = &v
	return s
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetCustomizeMatchName(v string) *ListWorkflowRulesApiRuleConditionDTO {
	s.CustomizeMatchName = &v
	return s
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetCustomizePathMatch(v string) *ListWorkflowRulesApiRuleConditionDTO {
	s.CustomizePathMatch = &v
	return s
}

func (s *ListWorkflowRulesApiRuleConditionDTO) SetCustomizePath(v string) *ListWorkflowRulesApiRuleConditionDTO {
	s.CustomizePath = &v
	return s
}

type ListWorkflowRulesBotBehaviorAnalyseVO struct {
	// {'en':'Primary key id.', 'zh_CN':'主键id。'}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Rule name.', 'zh_CN':'规则名称。'}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {'en':'Rule description.', 'zh_CN':'规则描述。'}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty" require:"true"`
	// {'en':'Process actions.
	//  NO_USE: not used
	//  BLOCK: block
	//  LOG: log
	//  custom action primary key id', 'zh_CN':'处理动作。
	//  NO_USE：不使用
	//  BLOCK：拦截
	//  LOG：监控
	//  自定义处理动作主键id'}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {'en':'Action type
	//  SYS: system predefined
	//   CUSTOMIZE: customized', 'zh_CN':'处理动作类型。
	//  SYS：系统预定义
	//  CUSTOMIZE：自定义'}
	ActType *string `json:"actType,omitempty" xml:"actType,omitempty" require:"true"`
	// {'en':'Statistical period, unit is seconds.', 'zh_CN':'统计周期，单位是秒。'}
	StatisticalPeriod *int32 `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty" require:"true"`
	// {'en':'Statistical granularity.
	//  Client IP: IP
	//  IP-UA: Client IP and User-Agent', 'zh_CN':'统计粒度。
	//  IP：客户端IP
	//  IP-UA：客户端IP和User-Agent'}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty" require:"true"`
	// {'en':'Protection scope.', 'zh_CN':'防护范围。'}
	ProtectionScope []*ListWorkflowRulesProtectionPathDTO `json:"protectionScope,omitempty" xml:"protectionScope,omitempty" require:"true" type:"Repeated"`
	// {'en':'Web scene trigger conditions.', 'zh_CN':'Web场景触发条件。'}
	WebRuleCondition []*ListWorkflowRulesWebRuleConditionDTO `json:"webRuleCondition,omitempty" xml:"webRuleCondition,omitempty" require:"true" type:"Repeated"`
	// {'en':'API scene trigger conditions.', 'zh_CN':'API场景触发条件。'}
	ApiRuleCondition []*ListWorkflowRulesApiRuleConditionDTO `json:"apiRuleCondition,omitempty" xml:"apiRuleCondition,omitempty" require:"true" type:"Repeated"`
	// {'en':'Protected target.
	//  WEB: WEB
	//  API: API', 'zh_CN':'应用场景。
	//  WEB：WEB场景
	//  API：API场景'}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {'en':'Excluded path.', 'zh_CN':'例外路径。'}
	WlUri []*string `json:"wlUri,omitempty" xml:"wlUri,omitempty" require:"true" type:"Repeated"`
}

func (s ListWorkflowRulesBotBehaviorAnalyseVO) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesBotBehaviorAnalyseVO) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetId(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.Id = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetDomain(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.Domain = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetRuleName(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.RuleName = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetRuleDescription(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.RuleDescription = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetAct(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.Act = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetActType(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.ActType = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetStatisticalPeriod(v int32) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.StatisticalPeriod = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetStatisticalItem(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.StatisticalItem = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetProtectionScope(v []*ListWorkflowRulesProtectionPathDTO) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.ProtectionScope = v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetWebRuleCondition(v []*ListWorkflowRulesWebRuleConditionDTO) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.WebRuleCondition = v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetApiRuleCondition(v []*ListWorkflowRulesApiRuleConditionDTO) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.ApiRuleCondition = v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetMode(v string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.Mode = &v
	return s
}

func (s *ListWorkflowRulesBotBehaviorAnalyseVO) SetWlUri(v []*string) *ListWorkflowRulesBotBehaviorAnalyseVO {
	s.WlUri = v
	return s
}

type ListWorkflowRulesPaths struct {
}

func (s ListWorkflowRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesPaths) GoString() string {
	return s.String()
}

type ListWorkflowRulesParameters struct {
}

func (s ListWorkflowRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesParameters) GoString() string {
	return s.String()
}

type ListWorkflowRulesRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListWorkflowRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListWorkflowRulesRequestHeader) SetServiceType(v string) *ListWorkflowRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListWorkflowRulesResponseHeader struct {
}

func (s ListWorkflowRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowRulesResponseHeader) GoString() string {
	return s.String()
}

type UpdateResponsePageOfDenyActionDetailRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Interception action response mode.\nDEFAULT:System default\nCUSTOMIZE:Custom","zh_CN":"拦截动作响应模式。\nDEFAULT：系统默认\nCUSTOMIZE：自定义","exampleValue":"DEFAULT,CUSTOMIZE"}
	BlockResponseMode *string `json:"blockResponseMode,omitempty" xml:"blockResponseMode,omitempty" require:"true"`
	// {"en":"Associated custom response id, blockResponseMode=CUSTOMIZE is required.","zh_CN":"关联自定义响应id，blockResponseMode=CUSTOMIZE必填。"}
	RateShareCustomizeActionId *string `json:"rateShareCustomizeActionId,omitempty" xml:"rateShareCustomizeActionId,omitempty"`
}

func (s UpdateResponsePageOfDenyActionDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailRequest) GoString() string {
	return s.String()
}

func (s *UpdateResponsePageOfDenyActionDetailRequest) SetDomain(v string) *UpdateResponsePageOfDenyActionDetailRequest {
	s.Domain = &v
	return s
}

func (s *UpdateResponsePageOfDenyActionDetailRequest) SetBlockResponseMode(v string) *UpdateResponsePageOfDenyActionDetailRequest {
	s.BlockResponseMode = &v
	return s
}

func (s *UpdateResponsePageOfDenyActionDetailRequest) SetRateShareCustomizeActionId(v string) *UpdateResponsePageOfDenyActionDetailRequest {
	s.RateShareCustomizeActionId = &v
	return s
}

type UpdateResponsePageOfDenyActionDetailRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateResponsePageOfDenyActionDetailRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateResponsePageOfDenyActionDetailRequestHeader) SetServiceType(v string) *UpdateResponsePageOfDenyActionDetailRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateResponsePageOfDenyActionDetailPaths struct {
}

func (s UpdateResponsePageOfDenyActionDetailPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailPaths) GoString() string {
	return s.String()
}

type UpdateResponsePageOfDenyActionDetailParameters struct {
}

func (s UpdateResponsePageOfDenyActionDetailParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailParameters) GoString() string {
	return s.String()
}

type UpdateResponsePageOfDenyActionDetailResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateResponsePageOfDenyActionDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailResponse) GoString() string {
	return s.String()
}

func (s *UpdateResponsePageOfDenyActionDetailResponse) SetCode(v string) *UpdateResponsePageOfDenyActionDetailResponse {
	s.Code = &v
	return s
}

func (s *UpdateResponsePageOfDenyActionDetailResponse) SetMsg(v string) *UpdateResponsePageOfDenyActionDetailResponse {
	s.Msg = &v
	return s
}

type UpdateResponsePageOfDenyActionDetailResponseHeader struct {
}

func (s UpdateResponsePageOfDenyActionDetailResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateResponsePageOfDenyActionDetailResponseHeader) GoString() string {
	return s.String()
}

type CreateBuiltInRuleRequest struct {
	// {"en":"Template name.", "zh_CN":"模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"
	//     Enable: The updated rules are automatically added to the template, and the rule action is automatically set to the recommended action;
	//     Disable: The updated rules are automatically added to the template, and the rule action is set to log by default.
	//     1: yes
	//     0: no.", "zh_CN":"
	//     开启：更新的规则自动加入到模板中，规则动作会自动设置为建议动作；
	//     关闭：更新的规则自动加入到模板中，规则动作默认设置为监控。
	//     1：是
	//     0：否。"}
	UpdateType *int32 `json:"updateType,omitempty" xml:"updateType,omitempty" require:"true"`
	// {"en":"Template description.", "zh_CN":"模板描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Enter the name of reference template, the new template will copy the configuration of the reference template.", "zh_CN":"参考模板的名称，新模板将复制参考模板的配置。"}
	CopyName *string `json:"copyName,omitempty" xml:"copyName,omitempty"`
	// {"en":"Have to change the rule configuration, array,The default data synchronization from the system", "zh_CN":"缺省状态下默认采用参考模板的配置或者系统默认配置（若参考模板缺省），也可修改指定规则的配置，未指定的规则采用默认配置。"}
	CreateBuiltInRuleRuleConfig []*CreateBuiltInRuleRuleConfig `json:"ruleConfig,omitempty" xml:"ruleConfig,omitempty" type:"Repeated"`
}

func (s CreateBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateBuiltInRuleRequest) SetName(v string) *CreateBuiltInRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateBuiltInRuleRequest) SetUpdateType(v int32) *CreateBuiltInRuleRequest {
	s.UpdateType = &v
	return s
}

func (s *CreateBuiltInRuleRequest) SetMsg(v string) *CreateBuiltInRuleRequest {
	s.Msg = &v
	return s
}

func (s *CreateBuiltInRuleRequest) SetCopyName(v string) *CreateBuiltInRuleRequest {
	s.CopyName = &v
	return s
}

func (s *CreateBuiltInRuleRequest) SetRuleConfig(v []*CreateBuiltInRuleRuleConfig) *CreateBuiltInRuleRequest {
	s.CreateBuiltInRuleRuleConfig = v
	return s
}

type CreateBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s CreateBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateBuiltInRuleResponse) SetCode(v string) *CreateBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateBuiltInRuleResponse) SetMessage(v string) *CreateBuiltInRuleResponse {
	s.Message = &v
	return s
}

type CreateBuiltInRuleRuleConfig struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Off
	//     1: Block
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"The rules of RFC can be customized by the config configuration. If left blank, the default configuration will be used, detailed configuration instructions are as follows:
	//
	//     The config configuration of each rule for RFC is as follows:
	//     rule ID: 7500    rule name: header_miss
	//     configurable options: Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	//     example config configuration:
	//     {
	//       \"header_miss\": [
	//         \"Accept\",
	//         \"Accept-Encoding\"
	//       ]
	//     }
	//
	//     rule ID: 7502    rule name: uncommon_request_method
	//     configurable options: HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	//     example config configuration:
	//     {
	//       \"method\": [
	//         \"CONNECT\",
	//         \"PROPFIND\",
	//         \"PUT\"
	//       ]
	//     }
	//
	//     rule ID: 7503    rule name: uncommon_protocol
	//     configurable options: 1.0, 1.1, 2.0 and customized http version, Set protocol_other to 1 if you want to restrict all versions except HTTP1.0, HTTP1.1, HTTP2.0.
	//     1.0: HTTP1.0
	//     1.1: HTTP1.1
	//     2.0: HTTP2.0
	//     example config configuration:
	//     {
	//       \"protocol\": [
	//         \"1.0\",
	//         \"1.1\",
	//         \"2.0\",
	//         \"3.0\"
	//       ],
	//       \"protocol_other\": 1
	//     }
	//
	//     rule ID: 7600    rule name: big_request_line
	//     required fields, Three types of units are available (B,KB,MB).
	//         uri_len: Maximum length of URI (default: 4096B),
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"uri_len\": \"4096KB\"
	//       }
	//     }
	//
	//     rule ID: 7601    rule name: big_header_line
	//     required fields, Three types of units are available (B,KB,MB,The default unit is B).
	//         header_name_len: Maximum length of HTTP header field name (default: 64B),
	//         header_value_len: Maximum length of HTTP header field value (default: 4096B),
	//         user_agent_len: Maximum length of User-Agent (default: 1024B),
	//         referer_len: Maximum length of Referer (default: 4096B),
	//         accept_len: Maximum length of Accept (default: 1024B),
	//         accept_charset_len: Maximum length of Accept-Charset (default: 128B),
	//         cookie_len: Maximum length of Cookie (default: 8192B)
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"cookie_len\": \"8192\",
	//         \"header_name_len\": \"64\",
	//         \"accept_len\": \"1024\",
	//         \"referer_len\": \"4096\",
	//         \"header_value_len\": \"4096\",
	//         \"accept_charset_len\": \"128MB\",
	//         \"user_agent_len\": \"1024KB\"
	//       }
	//     }
	//
	//     rule ID: 7603    rule name: big_headers_num
	//     required fields:
	//         header_num: Maximum length of HTTP header field (default: 50)
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"header_num\": \"50\"
	//       }
	//     }
	//
	//     rule ID: 7605    rule name: big_body_num
	//     required fields:
	//         body_param_num: Limit on the number of body parameters (default: 0)
	//     example config configuration:
	//     {
	//       \"body_param_num\": \"2\"
	//     }","zh_CN":"归属协议攻击类型的规则可以自定义config配置,config置空将采用默认配置，具体配置说明如下:
	//     规则ID: 7500    规则名称: header_miss
	//     配置项说明: Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	//     config配置示例:
	//     {
	//       \"header_miss\": [
	//         \"Accept\",
	//         \"Accept-Encoding\"
	//       ]
	//     }
	//
	//     规则ID: 7502    规则名称: uncommon_request_method
	//     配置项说明: HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	//     config配置示例:
	//     {
	//       \"method\": [
	//         \"CONNECT\",
	//         \"PROPFIND\",
	//         \"PUT\"
	//       ]
	//     }
	//
	//     规则ID: 7503    规则名称: uncommon_protocol
	//     配置项说明: 1.0, 1.1, 2.0, 及自定义版本, 要限制除了HTTP1.0,HTTP1.1,HTTP2.0以外的所有版本请将protocol_other的值配置为1
	//     1.0：HTTP1.0
	//     1.1：HTTP1.1
	//     2.0：HTTP2.0
	//     config配置示例:
	//     {
	//       \"protocol\": [
	//         \"1.0\",
	//         \"1.1\",
	//         \"2.0\",
	//         \"3.0\"
	//       ],
	//       \"protocol_other\": 1
	//     }
	//
	//     规则ID: 7600    规则名称: big_request_line
	//     配置项说明：
	//     uri_len：URI最大长度 (默认值4096B)，单位可选 (B,KB,MB)
	//     config配置示例：
	//     {
	//       \"header_restrict\": {
	//         \"uri_len\": \"4096KB\"
	//       }
	//     }
	//
	//     规则ID: 7601    规则名称: big_header_line
	//     配置项说明, 单位可选 (B,KB,MB,默认B):
	//         header_name_len: 请求头部参数名最大长度 (默认值64B),
	//         header_value_len: 请求头部参数值最大长度 (默认值4096B),
	//         user_agent_len: User-Agent最大长度 (默认值1024B),
	//         referer_len: Referer最大长度 (默认值4096B),
	//         accept_len: Accept最大长度 (默认值1024B),
	//         accept_charset_len: Accept-Charset最大长度 (默认值128B),
	//         cookie_len: Cookie最大长度 (默认值8192B)
	//     config配置示例 (不带单位默认单位为B)：
	//     {
	//       \"header_restrict\": {
	//         \"cookie_len\": \"8192\",
	//         \"header_name_len\": \"64\",
	//         \"accept_len\": \"1024\",
	//         \"referer_len\": \"4096\",
	//         \"header_value_len\": \"4096\",
	//         \"accept_charset_len\": \"128MB\",
	//         \"user_agent_len\": \"1024KB\"
	//       }
	//     }
	//
	//     规则ID: 7603    规则名称: big_headers_num
	//     配置项说明:
	//     header_num: 请求头部参数最大个数 (默认值50)
	//     config配置示例:
	//     {
	//       \"header_restrict\": {
	//         \"header_num\": \"50\"
	//       }
	//     }
	//
	//     规则ID: 7605    规则名称: big_body_num
	//     配置项说明:
	//     body_param_num: Body参数个数限制 (默认值0)
	//     config配置示例:
	//     {
	//       \"body_param_num\": \"2\"
	//     }"}
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s CreateBuiltInRuleRuleConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleRuleConfig) GoString() string {
	return s.String()
}

func (s *CreateBuiltInRuleRuleConfig) SetRuleId(v int32) *CreateBuiltInRuleRuleConfig {
	s.RuleId = &v
	return s
}

func (s *CreateBuiltInRuleRuleConfig) SetMode(v int32) *CreateBuiltInRuleRuleConfig {
	s.Mode = &v
	return s
}

func (s *CreateBuiltInRuleRuleConfig) SetConfig(v string) *CreateBuiltInRuleRuleConfig {
	s.Config = &v
	return s
}

type CreateBuiltInRulePaths struct {
}

func (s CreateBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRulePaths) GoString() string {
	return s.String()
}

type CreateBuiltInRuleParameters struct {
}

func (s CreateBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleParameters) GoString() string {
	return s.String()
}

type CreateBuiltInRuleRequestHeader struct {
}

func (s CreateBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type CreateBuiltInRuleResponseHeader struct {
}

func (s CreateBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type RejectRecommendationsRequest struct {
	// {'en':'Recommendation ID.', 'zh_CN':'规则建议ID。'}
	IdList []*string `json:"idList,omitempty" xml:"idList,omitempty" require:"true" type:"Repeated"`
}

func (s RejectRecommendationsRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsRequest) GoString() string {
	return s.String()
}

func (s *RejectRecommendationsRequest) SetIdList(v []*string) *RejectRecommendationsRequest {
	s.IdList = v
	return s
}

type RejectRecommendationsResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s RejectRecommendationsResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsResponse) GoString() string {
	return s.String()
}

func (s *RejectRecommendationsResponse) SetCode(v string) *RejectRecommendationsResponse {
	s.Code = &v
	return s
}

func (s *RejectRecommendationsResponse) SetMsg(v string) *RejectRecommendationsResponse {
	s.Msg = &v
	return s
}

type RejectRecommendationsPaths struct {
}

func (s RejectRecommendationsPaths) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsPaths) GoString() string {
	return s.String()
}

type RejectRecommendationsParameters struct {
}

func (s RejectRecommendationsParameters) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsParameters) GoString() string {
	return s.String()
}

type RejectRecommendationsRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s RejectRecommendationsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsRequestHeader) GoString() string {
	return s.String()
}

func (s *RejectRecommendationsRequestHeader) SetServiceType(v string) *RejectRecommendationsRequestHeader {
	s.ServiceType = &v
	return s
}

type RejectRecommendationsResponseHeader struct {
}

func (s RejectRecommendationsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RejectRecommendationsResponseHeader) GoString() string {
	return s.String()
}

type ListWAFBasicConfigOfDomainsRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s ListWAFBasicConfigOfDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsRequest) GoString() string {
	return s.String()
}

func (s *ListWAFBasicConfigOfDomainsRequest) SetDomainList(v []*string) *ListWAFBasicConfigOfDomainsRequest {
	s.DomainList = v
	return s
}

type ListWAFBasicConfigOfDomainsRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListWAFBasicConfigOfDomainsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListWAFBasicConfigOfDomainsRequestHeader) SetServiceType(v string) *ListWAFBasicConfigOfDomainsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListWAFBasicConfigOfDomainsPaths struct {
}

func (s ListWAFBasicConfigOfDomainsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsPaths) GoString() string {
	return s.String()
}

type ListWAFBasicConfigOfDomainsParameters struct {
}

func (s ListWAFBasicConfigOfDomainsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsParameters) GoString() string {
	return s.String()
}

type ListWAFBasicConfigOfDomainsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListWAFBasicConfigOfDomainsResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListWAFBasicConfigOfDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsResponse) GoString() string {
	return s.String()
}

func (s *ListWAFBasicConfigOfDomainsResponse) SetCode(v string) *ListWAFBasicConfigOfDomainsResponse {
	s.Code = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponse) SetMsg(v string) *ListWAFBasicConfigOfDomainsResponse {
	s.Msg = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponse) SetData(v []*ListWAFBasicConfigOfDomainsResponseData) *ListWAFBasicConfigOfDomainsResponse {
	s.Data = v
	return s
}

type ListWAFBasicConfigOfDomainsResponseData struct {
	// {"en":"ID.","zh_CN":"ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Protection Mode.\nBLOCK: Block the attack request directly.\nLOG: Only log the attack request without blocking it.","zh_CN":"防护模式。\nBLOCK：直接拦截攻击请求。\nLOG：记录日志，不拦截攻击请求。","exampleValue":"BLOCK,LOG"}
	DefendMode *string `json:"defendMode,omitempty" xml:"defendMode,omitempty" require:"true"`
	// {"en":"Ruleset Mode.\nMANUAL:  Check Ruleset update and all Recommendations on the Console, decide to apply them or not, all of these must be done by yourself manually.\nAUTO: Automatically upgrade the Ruleset to the latest version and apply the Recommendations learned from your website traffic to Exception, which can keep your website with high-level security anytime.","zh_CN":"规则集模式。\nMANUAL：规则集有更新，或系统自动学习网站流量生成规则例外建议时，需自主评估是否更新配置。\nAUTO：规则集有更新，或系统自动学习网站流量生成规则例外建议时，自动更新配置。","exampleValue":"MANUAL,AUTO"}
	RuleUpdateMode *string `json:"ruleUpdateMode,omitempty" xml:"ruleUpdateMode,omitempty" require:"true"`
	// {"en":"Ruleset version.","zh_CN":"规则集版本。"}
	RuleVersion *string `json:"ruleVersion,omitempty" xml:"ruleVersion,omitempty" require:"true"`
}

func (s ListWAFBasicConfigOfDomainsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsResponseData) GoString() string {
	return s.String()
}

func (s *ListWAFBasicConfigOfDomainsResponseData) SetId(v string) *ListWAFBasicConfigOfDomainsResponseData {
	s.Id = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponseData) SetDomain(v string) *ListWAFBasicConfigOfDomainsResponseData {
	s.Domain = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponseData) SetDefendMode(v string) *ListWAFBasicConfigOfDomainsResponseData {
	s.DefendMode = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponseData) SetRuleUpdateMode(v string) *ListWAFBasicConfigOfDomainsResponseData {
	s.RuleUpdateMode = &v
	return s
}

func (s *ListWAFBasicConfigOfDomainsResponseData) SetRuleVersion(v string) *ListWAFBasicConfigOfDomainsResponseData {
	s.RuleVersion = &v
	return s
}

type ListWAFBasicConfigOfDomainsResponseHeader struct {
}

func (s ListWAFBasicConfigOfDomainsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWAFBasicConfigOfDomainsResponseHeader) GoString() string {
	return s.String()
}

type GetWAFScanProtectionConfigRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetWAFScanProtectionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigRequest) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigRequest) SetDomainList(v []*string) *GetWAFScanProtectionConfigRequest {
	s.DomainList = v
	return s
}

type GetWAFScanProtectionConfigRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetWAFScanProtectionConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigRequestHeader) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigRequestHeader) SetServiceType(v string) *GetWAFScanProtectionConfigRequestHeader {
	s.ServiceType = &v
	return s
}

type GetWAFScanProtectionConfigPaths struct {
}

func (s GetWAFScanProtectionConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigPaths) GoString() string {
	return s.String()
}

type GetWAFScanProtectionConfigParameters struct {
}

func (s GetWAFScanProtectionConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigParameters) GoString() string {
	return s.String()
}

type GetWAFScanProtectionConfigResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *GetWAFScanProtectionConfigResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetWAFScanProtectionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponse) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponse) SetCode(v string) *GetWAFScanProtectionConfigResponse {
	s.Code = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponse) SetMsg(v string) *GetWAFScanProtectionConfigResponse {
	s.Msg = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponse) SetData(v *GetWAFScanProtectionConfigResponseData) *GetWAFScanProtectionConfigResponse {
	s.Data = v
	return s
}

type GetWAFScanProtectionConfigResponseData struct {
	// {"en":"Array.","zh_CN":"数组。"}
	Array []*GetWAFScanProtectionConfigResponseDataArray `json:"array,omitempty" xml:"array,omitempty" require:"true" type:"Repeated"`
}

func (s GetWAFScanProtectionConfigResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseData) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponseData) SetArray(v []*GetWAFScanProtectionConfigResponseDataArray) *GetWAFScanProtectionConfigResponseData {
	s.Array = v
	return s
}

type GetWAFScanProtectionConfigResponseDataArray struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Scanning tool detection configuration.","zh_CN":"扫描工具检测配置。"}
	ScanToolsConfig *GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig `json:"scanToolsConfig,omitempty" xml:"scanToolsConfig,omitempty" require:"true" type:"Struct"`
	// {"en":"Repeated violation detection configuration.","zh_CN":"反复违规检测配置。"}
	RepeatedViolationConfig *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig `json:"repeatedViolationConfig,omitempty" xml:"repeatedViolationConfig,omitempty" require:"true" type:"Struct"`
	// {"en":"Directory probing detection configuration.","zh_CN":"目录嗅探检测配置。"}
	DirectoryProbingConfig *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig `json:"directoryProbingConfig,omitempty" xml:"directoryProbingConfig,omitempty" require:"true" type:"Struct"`
}

func (s GetWAFScanProtectionConfigResponseDataArray) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseDataArray) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponseDataArray) SetDomain(v string) *GetWAFScanProtectionConfigResponseDataArray {
	s.Domain = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArray) SetScanToolsConfig(v *GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig) *GetWAFScanProtectionConfigResponseDataArray {
	s.ScanToolsConfig = v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArray) SetRepeatedViolationConfig(v *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) *GetWAFScanProtectionConfigResponseDataArray {
	s.RepeatedViolationConfig = v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArray) SetDirectoryProbingConfig(v *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) *GetWAFScanProtectionConfigResponseDataArray {
	s.DirectoryProbingConfig = v
	return s
}

type GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig) SetAction(v string) *GetWAFScanProtectionConfigResponseDataArrayScanToolsConfig {
	s.Action = &v
	return s
}

type GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Statistical subject. \nIP: IP. \nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	// {"en":"Time range, in seconds.","zh_CN":"时间范围，单位秒。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"Number of WAF built-in rule triggers.","zh_CN":"WAF内置规则触发种类数。"}
	WafRuleTypeCount *int `json:"wafRuleTypeCount,omitempty" xml:"wafRuleTypeCount,omitempty" require:"true"`
	// {"en":"Number of block actions.","zh_CN":"拦截次数"}
	BlockCount *int `json:"blockCount,omitempty" xml:"blockCount,omitempty" require:"true"`
	// {"en":"Handling action duration, in seconds.","zh_CN":"处理动作持续时间，单位秒。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty" require:"true"`
}

func (s GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetAction(v string) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Action = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetTarget(v string) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Target = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetPeriod(v int) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Period = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetWafRuleTypeCount(v int) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.WafRuleTypeCount = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetBlockCount(v int) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.BlockCount = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetDuration(v int) *GetWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Duration = &v
	return s
}

type GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Statistical subject. \nIP: IP. \nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	// {"en":"Time range, in seconds.","zh_CN":"时间范围，单位秒。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"Number of requests.","zh_CN":"请求次数。"}
	RequestCountThreshold *int `json:"requestCountThreshold,omitempty" xml:"requestCountThreshold,omitempty" require:"true"`
	// {"en":"Number of non-existent directory requests.","zh_CN":"请求不存在的目录数量。"}
	NonExistentDirectoryThreshold *int `json:"nonExistentDirectoryThreshold,omitempty" xml:"nonExistentDirectoryThreshold,omitempty" require:"true"`
	// {"en":"Proportion of 404 status codes.","zh_CN":"404状态码占比。"}
	Rate404Threshold *int `json:"rate404Threshold,omitempty" xml:"rate404Threshold,omitempty" require:"true"`
	// {"en":"Handling action duration, in seconds.","zh_CN":"处理动作持续时间，单位秒。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty" require:"true"`
}

func (s GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) GoString() string {
	return s.String()
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetAction(v string) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Action = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetTarget(v string) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Target = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetPeriod(v int) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Period = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetRequestCountThreshold(v int) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.RequestCountThreshold = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetNonExistentDirectoryThreshold(v int) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.NonExistentDirectoryThreshold = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetRate404Threshold(v int) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Rate404Threshold = &v
	return s
}

func (s *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetDuration(v int) *GetWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Duration = &v
	return s
}

type GetWAFScanProtectionConfigResponseHeader struct {
}

func (s GetWAFScanProtectionConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetWAFScanProtectionConfigResponseHeader) GoString() string {
	return s.String()
}

type GetConcurrencyLimitRuleListRequest struct {
}

func (s GetConcurrencyLimitRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListRequest) GoString() string {
	return s.String()
}

type GetConcurrencyLimitRuleListResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data *GetConcurrencyLimitRuleListPage `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetConcurrencyLimitRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetConcurrencyLimitRuleListResponse) SetCode(v int) *GetConcurrencyLimitRuleListResponse {
	s.Code = &v
	return s
}

func (s *GetConcurrencyLimitRuleListResponse) SetMsg(v string) *GetConcurrencyLimitRuleListResponse {
	s.Msg = &v
	return s
}

func (s *GetConcurrencyLimitRuleListResponse) SetData(v *GetConcurrencyLimitRuleListPage) *GetConcurrencyLimitRuleListResponse {
	s.Data = v
	return s
}

type GetConcurrencyLimitRuleListPage struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	Current *int `json:"current,omitempty" xml:"current,omitempty" require:"true"`
	// {"en":"The total number of pages.", "zh_CN":"总页数。"}
	Pages *int `json:"pages,omitempty" xml:"pages,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页规则条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"The total number of records.", "zh_CN":"总条数。"}
	Total *int `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// {"en":"List of high concurrency limit rule.", "zh_CN":"限流规则列表。"}
	Records []*GetConcurrencyLimitRuleListVo `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s GetConcurrencyLimitRuleListPage) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListPage) GoString() string {
	return s.String()
}

func (s *GetConcurrencyLimitRuleListPage) SetCurrent(v int) *GetConcurrencyLimitRuleListPage {
	s.Current = &v
	return s
}

func (s *GetConcurrencyLimitRuleListPage) SetPages(v int) *GetConcurrencyLimitRuleListPage {
	s.Pages = &v
	return s
}

func (s *GetConcurrencyLimitRuleListPage) SetSize(v int) *GetConcurrencyLimitRuleListPage {
	s.Size = &v
	return s
}

func (s *GetConcurrencyLimitRuleListPage) SetTotal(v int) *GetConcurrencyLimitRuleListPage {
	s.Total = &v
	return s
}

func (s *GetConcurrencyLimitRuleListPage) SetRecords(v []*GetConcurrencyLimitRuleListVo) *GetConcurrencyLimitRuleListPage {
	s.Records = v
	return s
}

type GetConcurrencyLimitRuleListVo struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"The number of APIs.", "zh_CN":"API数。"}
	ApiCount *int `json:"apiCount,omitempty" xml:"apiCount,omitempty" require:"true"`
	// {"en":"Control action,default value: INTERCEPT.
	// INTERCEPT:Block
	// MONITOR:Log", "zh_CN":"控制动作，默认值：INTERCEPT。
	// INTERCEPT：拦截
	// MONITOR：监控"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty" require:"true"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *string `json:"limitDuration,omitempty" xml:"limitDuration,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty" require:"true"`
	// {"en":"Note.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// {"en":"Status.
	// ON:on
	// OFF:off", "zh_CN":"状态。
	// ON：开
	// OFF：关"}
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// {"en":"API current limiting threshold.", "zh_CN":"API限流阈值。"}
	ThresholdValue *string `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty" require:"true"`
	// {"en":"Update time,format: yyyy-MM-dd HH:mm:ss.", "zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s GetConcurrencyLimitRuleListVo) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListVo) GoString() string {
	return s.String()
}

func (s *GetConcurrencyLimitRuleListVo) SetId(v string) *GetConcurrencyLimitRuleListVo {
	s.Id = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetApiCount(v int) *GetConcurrencyLimitRuleListVo {
	s.ApiCount = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetControlAction(v string) *GetConcurrencyLimitRuleListVo {
	s.ControlAction = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetLimitDuration(v string) *GetConcurrencyLimitRuleListVo {
	s.LimitDuration = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetPolicyName(v string) *GetConcurrencyLimitRuleListVo {
	s.PolicyName = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetRemark(v string) *GetConcurrencyLimitRuleListVo {
	s.Remark = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetStatus(v string) *GetConcurrencyLimitRuleListVo {
	s.Status = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetThresholdValue(v string) *GetConcurrencyLimitRuleListVo {
	s.ThresholdValue = &v
	return s
}

func (s *GetConcurrencyLimitRuleListVo) SetUpdateTime(v string) *GetConcurrencyLimitRuleListVo {
	s.UpdateTime = &v
	return s
}

type GetConcurrencyLimitRuleListPaths struct {
}

func (s GetConcurrencyLimitRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListPaths) GoString() string {
	return s.String()
}

type GetConcurrencyLimitRuleListParameters struct {
	// {"en":"The current page number.", "zh_CN":"当前页码。"}
	GetConcurrencyLimitRuleListPage *int `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// {"en":"The number of records per page.", "zh_CN":"每页规则条数。"}
	Size *int `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty"`
}

func (s GetConcurrencyLimitRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListParameters) GoString() string {
	return s.String()
}

func (s *GetConcurrencyLimitRuleListParameters) SetPage(v int) *GetConcurrencyLimitRuleListParameters {
	s.GetConcurrencyLimitRuleListPage = &v
	return s
}

func (s *GetConcurrencyLimitRuleListParameters) SetSize(v int) *GetConcurrencyLimitRuleListParameters {
	s.Size = &v
	return s
}

func (s *GetConcurrencyLimitRuleListParameters) SetPolicyName(v string) *GetConcurrencyLimitRuleListParameters {
	s.PolicyName = &v
	return s
}

type GetConcurrencyLimitRuleListRequestHeader struct {
}

func (s GetConcurrencyLimitRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListRequestHeader) GoString() string {
	return s.String()
}

type GetConcurrencyLimitRuleListResponseHeader struct {
}

func (s GetConcurrencyLimitRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetConcurrencyLimitRuleListResponseHeader) GoString() string {
	return s.String()
}

type CreateExceptionToWAFManagedRulesRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Matching conditions.\nip: IP\npath: Path\nuri: URI\nurlParamName: URI Parameter Name\nurlParamValue: URI Parameter Value\nuserAgent: User Agent\nhttpHeaderName: Request Header Name\nhttpHeaderValue: Request Header Value\ncookie: Cookie\nbody: Body\nbodyParamName: Body Parameter Name\nbodyParamValue: Body Parameter Value","zh_CN":"匹配条件。\nip：IP\npath：路径\nuri：URI\nurlParamName：URI参数名\nurlParamValue：URI参数值\nuserAgent：User Agent\nhttpHeaderName：请求头部名称\nhttpHeaderValue：请求头部值\ncookie：Cookie\nbody：Body\nbodyParamName：Body参数名\nbodyParamValue：Body参数值","exampleValue":"ip,path,uri,urlParamName,urlParamValue,userAgent,httpHeaderName,httpHeaderValue,cookie,body,bodyParamName,bodyParamValue"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Match type,IP can only be EQUAL.\nEQUAL: Equal\nCONTAIN: Contains\nREGEX: Regular match","zh_CN":"匹配类型，IP只能是等于。\nEQUAL：等于\nCONTAIN：包含\nREGEX：正则匹配","exampleValue":"EQUAL,CONTAIN,REGEX"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Rule exceptions.\nWhen matchType=EQUAL, case-sensitive, path and uri must start with \"/\", and body can only pass one value;\nWhen matchType=REGEX, only one value can be passed.","zh_CN":"规则例外内容。\nmatchType=EQUAL时，大小写敏感，path和uri必须以\"/\"开头，body只能传一个值；\nmatchType=REGEX时，只能传一个值。"}
	ContentList []*string `json:"contentList,omitempty" xml:"contentList,omitempty" require:"true" type:"Repeated"`
}

func (s CreateExceptionToWAFManagedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesRequest) GoString() string {
	return s.String()
}

func (s *CreateExceptionToWAFManagedRulesRequest) SetDomain(v string) *CreateExceptionToWAFManagedRulesRequest {
	s.Domain = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesRequest) SetRuleId(v int) *CreateExceptionToWAFManagedRulesRequest {
	s.RuleId = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesRequest) SetType(v string) *CreateExceptionToWAFManagedRulesRequest {
	s.Type = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesRequest) SetMatchType(v string) *CreateExceptionToWAFManagedRulesRequest {
	s.MatchType = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesRequest) SetContentList(v []*string) *CreateExceptionToWAFManagedRulesRequest {
	s.ContentList = v
	return s
}

type CreateExceptionToWAFManagedRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s CreateExceptionToWAFManagedRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *CreateExceptionToWAFManagedRulesRequestHeader) SetServiceType(v string) *CreateExceptionToWAFManagedRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type CreateExceptionToWAFManagedRulesPaths struct {
}

func (s CreateExceptionToWAFManagedRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesPaths) GoString() string {
	return s.String()
}

type CreateExceptionToWAFManagedRulesParameters struct {
}

func (s CreateExceptionToWAFManagedRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesParameters) GoString() string {
	return s.String()
}

type CreateExceptionToWAFManagedRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Rule exception ID.","zh_CN":"规则例外ID。"}
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateExceptionToWAFManagedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesResponse) GoString() string {
	return s.String()
}

func (s *CreateExceptionToWAFManagedRulesResponse) SetCode(v string) *CreateExceptionToWAFManagedRulesResponse {
	s.Code = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesResponse) SetMsg(v string) *CreateExceptionToWAFManagedRulesResponse {
	s.Msg = &v
	return s
}

func (s *CreateExceptionToWAFManagedRulesResponse) SetData(v string) *CreateExceptionToWAFManagedRulesResponse {
	s.Data = &v
	return s
}

type CreateExceptionToWAFManagedRulesResponseHeader struct {
}

func (s CreateExceptionToWAFManagedRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateExceptionToWAFManagedRulesResponseHeader) GoString() string {
	return s.String()
}

type UpdateModeOfWAFRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Protection Mode.\nBLOCK: Block the attack request directly.\nLOG: Only log the attack request without blocking it.","zh_CN":"防护模式。\nBLOCK：直接拦截攻击请求。\nLOG：记录日志，不拦截攻击请求。","exampleValue":"BLOCK,LOG"}
	DefendMode *string `json:"defendMode,omitempty" xml:"defendMode,omitempty" require:"true"`
	// {"en":"Ruleset Mode.\nMANUAL: Check Ruleset update and all Recommendations on the Console, decide to apply them or not, all of these must be done by yourself manually.\nAUTO: Automatically upgrade the Ruleset to the latest version and apply the Recommendations learned from your website traffic to Exception, which can keep your website with high-level security anytime.","zh_CN":"规则集模式。\nMANUAL：规则集有更新，或系统自动学习网站流量生成规则例外建议时，需自主评估是否更新配置。\nAUTO：规则集有更新，或系统自动学习网站流量生成规则例外建议时，自动更新配置。","exampleValue":"MANUAL,AUTO"}
	RuleUpdateMode *string `json:"ruleUpdateMode,omitempty" xml:"ruleUpdateMode,omitempty" require:"true"`
}

func (s UpdateModeOfWAFRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFRequest) GoString() string {
	return s.String()
}

func (s *UpdateModeOfWAFRequest) SetDomainList(v []*string) *UpdateModeOfWAFRequest {
	s.DomainList = v
	return s
}

func (s *UpdateModeOfWAFRequest) SetDefendMode(v string) *UpdateModeOfWAFRequest {
	s.DefendMode = &v
	return s
}

func (s *UpdateModeOfWAFRequest) SetRuleUpdateMode(v string) *UpdateModeOfWAFRequest {
	s.RuleUpdateMode = &v
	return s
}

type UpdateModeOfWAFRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateModeOfWAFRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateModeOfWAFRequestHeader) SetServiceType(v string) *UpdateModeOfWAFRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateModeOfWAFPaths struct {
}

func (s UpdateModeOfWAFPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFPaths) GoString() string {
	return s.String()
}

type UpdateModeOfWAFParameters struct {
}

func (s UpdateModeOfWAFParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFParameters) GoString() string {
	return s.String()
}

type UpdateModeOfWAFResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateModeOfWAFResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFResponse) GoString() string {
	return s.String()
}

func (s *UpdateModeOfWAFResponse) SetCode(v string) *UpdateModeOfWAFResponse {
	s.Code = &v
	return s
}

func (s *UpdateModeOfWAFResponse) SetMsg(v string) *UpdateModeOfWAFResponse {
	s.Msg = &v
	return s
}

type UpdateModeOfWAFResponseHeader struct {
}

func (s UpdateModeOfWAFResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateModeOfWAFResponseHeader) GoString() string {
	return s.String()
}

type DeleteConcurrencyLimitRuleRequest struct {
	// {"en":"List of high concurrency limit rule ID to delete.", "zh_CN":"要删除的限流规则ID列表。"}
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteConcurrencyLimitRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteConcurrencyLimitRuleRequest) SetIds(v []*string) *DeleteConcurrencyLimitRuleRequest {
	s.Ids = v
	return s
}

type DeleteConcurrencyLimitRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"List of deleted high concurrency limit rule name.", "zh_CN":"被删除的规则名称。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteConcurrencyLimitRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteConcurrencyLimitRuleResponse) SetCode(v int) *DeleteConcurrencyLimitRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteConcurrencyLimitRuleResponse) SetMsg(v string) *DeleteConcurrencyLimitRuleResponse {
	s.Msg = &v
	return s
}

func (s *DeleteConcurrencyLimitRuleResponse) SetData(v []*string) *DeleteConcurrencyLimitRuleResponse {
	s.Data = v
	return s
}

type DeleteConcurrencyLimitRulePaths struct {
}

func (s DeleteConcurrencyLimitRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRulePaths) GoString() string {
	return s.String()
}

type DeleteConcurrencyLimitRuleParameters struct {
}

func (s DeleteConcurrencyLimitRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRuleParameters) GoString() string {
	return s.String()
}

type DeleteConcurrencyLimitRuleRequestHeader struct {
}

func (s DeleteConcurrencyLimitRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRuleRequestHeader) GoString() string {
	return s.String()
}

type DeleteConcurrencyLimitRuleResponseHeader struct {
}

func (s DeleteConcurrencyLimitRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteConcurrencyLimitRuleResponseHeader) GoString() string {
	return s.String()
}

type AssociateShareWAFRuleExceptionRequest struct {
	// {"en":"Introduced sharing.","zh_CN":"引入的共享。"}
	ShareExceptionList []*AssociateShareWAFRuleExceptionRequestShareExceptionList `json:"shareExceptionList,omitempty" xml:"shareExceptionList,omitempty" require:"true" type:"Repeated"`
}

func (s AssociateShareWAFRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *AssociateShareWAFRuleExceptionRequest) SetShareExceptionList(v []*AssociateShareWAFRuleExceptionRequestShareExceptionList) *AssociateShareWAFRuleExceptionRequest {
	s.ShareExceptionList = v
	return s
}

type AssociateShareWAFRuleExceptionRequestShareExceptionList struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Shared configuration WAF rule exception ID.","zh_CN":"共享的WAF规则例外ID。"}
	ShareId *string `json:"shareId,omitempty" xml:"shareId,omitempty" require:"true"`
}

func (s AssociateShareWAFRuleExceptionRequestShareExceptionList) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionRequestShareExceptionList) GoString() string {
	return s.String()
}

func (s *AssociateShareWAFRuleExceptionRequestShareExceptionList) SetDomain(v string) *AssociateShareWAFRuleExceptionRequestShareExceptionList {
	s.Domain = &v
	return s
}

func (s *AssociateShareWAFRuleExceptionRequestShareExceptionList) SetRuleId(v int) *AssociateShareWAFRuleExceptionRequestShareExceptionList {
	s.RuleId = &v
	return s
}

func (s *AssociateShareWAFRuleExceptionRequestShareExceptionList) SetShareId(v string) *AssociateShareWAFRuleExceptionRequestShareExceptionList {
	s.ShareId = &v
	return s
}

type AssociateShareWAFRuleExceptionRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s AssociateShareWAFRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

func (s *AssociateShareWAFRuleExceptionRequestHeader) SetServiceType(v string) *AssociateShareWAFRuleExceptionRequestHeader {
	s.ServiceType = &v
	return s
}

type AssociateShareWAFRuleExceptionPaths struct {
}

func (s AssociateShareWAFRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionPaths) GoString() string {
	return s.String()
}

type AssociateShareWAFRuleExceptionParameters struct {
}

func (s AssociateShareWAFRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionParameters) GoString() string {
	return s.String()
}

type AssociateShareWAFRuleExceptionResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s AssociateShareWAFRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *AssociateShareWAFRuleExceptionResponse) SetCode(v string) *AssociateShareWAFRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *AssociateShareWAFRuleExceptionResponse) SetMsg(v string) *AssociateShareWAFRuleExceptionResponse {
	s.Msg = &v
	return s
}

type AssociateShareWAFRuleExceptionResponseHeader struct {
}

func (s AssociateShareWAFRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateShareWAFRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type ListDomainInfosRequest struct {
	// {"en":"Protection status, If not specified, it means all the protection status.\nPROTECTING: Protecting\nUNPROTECTED: Unprotected","zh_CN":"防护状态，未指定时查询所有防护状态。\nPROTECTING：防护中\nUNPROTECTED：未防护","exampleValue":"PROTECTING,UNPROTECTED"}
	DefendStatus *string `json:"defendStatus,omitempty" xml:"defendStatus,omitempty"`
	// {"en":"Domain list. Queries all domains under the account when not specified.","zh_CN":"域名列表，未指定时查询账号下的所有域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"DDoS protection switch, if not specified, it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"DDoS防护开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	DmsDefendSwitch *string `json:"dmsDefendSwitch,omitempty" xml:"dmsDefendSwitch,omitempty"`
	// {"en":"Rate limiting switch, if not specified,  it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"频率限制开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	RateLimitSwitch *string `json:"rateLimitSwitch,omitempty" xml:"rateLimitSwitch,omitempty"`
	// {"en":"IP/Geo blocking switch, if not specified,  it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"IP/区域封禁开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BlockSwitch *string `json:"blockSwitch,omitempty" xml:"blockSwitch,omitempty"`
	// {"en":"WAF protection switch, if not specified, it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"WAF防护开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WafDefendSwitch *string `json:"wafDefendSwitch,omitempty" xml:"wafDefendSwitch,omitempty"`
	// {"en":"Threat intelligence switch, if not specified,  it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"威胁情报开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	IntelligenceSwitch *string `json:"intelligenceSwitch,omitempty" xml:"intelligenceSwitch,omitempty"`
	// {"en":"Whitelist switch, if not specified,  it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"白名单开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WhitelistSwitch *string `json:"whitelistSwitch,omitempty" xml:"whitelistSwitch,omitempty"`
	// {"en":"Bot management switch, if not specified,  it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"Bot管理开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BotManageSwitch *string `json:"botManageSwitch,omitempty" xml:"botManageSwitch,omitempty"`
	// {"en":"Custom rules switch, if not specified, it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"自定义规则开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	CustomizeRuleSwitch *string `json:"customizeRuleSwitch,omitempty" xml:"customizeRuleSwitch,omitempty"`
	// {"en":"API security switch, if not specified, it means all the status.\nON: Enabled\nOFF: Disabled","zh_CN":"API安全开关，未指定时查询该开关所有状态。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ApiDefendSwitch *string `json:"apiDefendSwitch,omitempty" xml:"apiDefendSwitch,omitempty"`
}

func (s ListDomainInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosRequest) GoString() string {
	return s.String()
}

func (s *ListDomainInfosRequest) SetDefendStatus(v string) *ListDomainInfosRequest {
	s.DefendStatus = &v
	return s
}

func (s *ListDomainInfosRequest) SetDomainList(v []*string) *ListDomainInfosRequest {
	s.DomainList = v
	return s
}

func (s *ListDomainInfosRequest) SetDmsDefendSwitch(v string) *ListDomainInfosRequest {
	s.DmsDefendSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetRateLimitSwitch(v string) *ListDomainInfosRequest {
	s.RateLimitSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetBlockSwitch(v string) *ListDomainInfosRequest {
	s.BlockSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetWafDefendSwitch(v string) *ListDomainInfosRequest {
	s.WafDefendSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetIntelligenceSwitch(v string) *ListDomainInfosRequest {
	s.IntelligenceSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetWhitelistSwitch(v string) *ListDomainInfosRequest {
	s.WhitelistSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetBotManageSwitch(v string) *ListDomainInfosRequest {
	s.BotManageSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetCustomizeRuleSwitch(v string) *ListDomainInfosRequest {
	s.CustomizeRuleSwitch = &v
	return s
}

func (s *ListDomainInfosRequest) SetApiDefendSwitch(v string) *ListDomainInfosRequest {
	s.ApiDefendSwitch = &v
	return s
}

type ListDomainInfosRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListDomainInfosRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosRequestHeader) GoString() string {
	return s.String()
}

func (s *ListDomainInfosRequestHeader) SetServiceType(v string) *ListDomainInfosRequestHeader {
	s.ServiceType = &v
	return s
}

type ListDomainInfosPaths struct {
}

func (s ListDomainInfosPaths) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosPaths) GoString() string {
	return s.String()
}

type ListDomainInfosParameters struct {
}

func (s ListDomainInfosParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosParameters) GoString() string {
	return s.String()
}

type ListDomainInfosResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListDomainInfosResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListDomainInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosResponse) GoString() string {
	return s.String()
}

func (s *ListDomainInfosResponse) SetCode(v string) *ListDomainInfosResponse {
	s.Code = &v
	return s
}

func (s *ListDomainInfosResponse) SetMsg(v string) *ListDomainInfosResponse {
	s.Msg = &v
	return s
}

func (s *ListDomainInfosResponse) SetData(v []*ListDomainInfosResponseData) *ListDomainInfosResponse {
	s.Data = v
	return s
}

type ListDomainInfosResponseData struct {
	// {"en":"ID.","zh_CN":"ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Creation time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"接入时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Deployment status.\nDEPLOYING: Publishing\nSUCCESS: Success","zh_CN":"部署状态。\nDEPLOYING：部署中\nSUCCESS：部署成功","exampleValue":"DEPLOYING,SUCCESS"}
	DeployStatus *string `json:"deployStatus,omitempty" xml:"deployStatus,omitempty" require:"true"`
	// {"en":"IP/Geo blocking switch.\nON: Enabled\nOFF: Disabled","zh_CN":"IP/区域封禁开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BlockSwitch *string `json:"blockSwitch,omitempty" xml:"blockSwitch,omitempty" require:"true"`
	// {"en":"Protection status.\nPROTECTING: Protecting\nUNPROTECTED: Unprotected","zh_CN":"防护状态。\nPROTECTING：防护中\nUNPROTECTED：未防护","exampleValue":"PROTECTING,UNPROTECTED"}
	DefendStatus *string `json:"defendStatus,omitempty" xml:"defendStatus,omitempty" require:"true"`
	// {"en":"DDoS protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"DDoS防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	DmsDefendSwitch *string `json:"dmsDefendSwitch,omitempty" xml:"dmsDefendSwitch,omitempty" require:"true"`
	// {"en":"Bot management switch.\nON: Enabled\nOFF: Disabled","zh_CN":"Bot管理开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BotManageSwitch *string `json:"botManageSwitch,omitempty" xml:"botManageSwitch,omitempty" require:"true"`
	// {"en":"Custom rules switch.\nON: Enabled\nOFF: Disabled","zh_CN":"自定义规则开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	CustomizeRuleSwitch *string `json:"customizeRuleSwitch,omitempty" xml:"customizeRuleSwitch,omitempty" require:"true"`
	// {"en":"API security switch.\nON: Enabled\nOFF: Disabled","zh_CN":"API安全开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ApiDefendSwitch *string `json:"apiDefendSwitch,omitempty" xml:"apiDefendSwitch,omitempty" require:"true"`
	// {"en":"Rate limiting switch.\nON: Enabled\nOFF: Disabled","zh_CN":"频率限制开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	RateLimitSwitch *string `json:"rateLimitSwitch,omitempty" xml:"rateLimitSwitch,omitempty" require:"true"`
	// {"en":"Whitelist switch.\nON: Enabled\nOFF: Disabled","zh_CN":"白名单开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WhitelistSwitch *string `json:"whitelistSwitch,omitempty" xml:"whitelistSwitch,omitempty" require:"true"`
	// {"en":"Threat intelligence switch.\nON: Enabled\nOFF: Disabled","zh_CN":"威胁情报开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	IntelligenceSwitch *string `json:"intelligenceSwitch,omitempty" xml:"intelligenceSwitch,omitempty" require:"true"`
	// {"en":"WAF protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"WAF防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WafDefendSwitch *string `json:"wafDefendSwitch,omitempty" xml:"wafDefendSwitch,omitempty" require:"true"`
}

func (s ListDomainInfosResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosResponseData) GoString() string {
	return s.String()
}

func (s *ListDomainInfosResponseData) SetId(v string) *ListDomainInfosResponseData {
	s.Id = &v
	return s
}

func (s *ListDomainInfosResponseData) SetDomain(v string) *ListDomainInfosResponseData {
	s.Domain = &v
	return s
}

func (s *ListDomainInfosResponseData) SetCreateTime(v string) *ListDomainInfosResponseData {
	s.CreateTime = &v
	return s
}

func (s *ListDomainInfosResponseData) SetDeployStatus(v string) *ListDomainInfosResponseData {
	s.DeployStatus = &v
	return s
}

func (s *ListDomainInfosResponseData) SetBlockSwitch(v string) *ListDomainInfosResponseData {
	s.BlockSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetDefendStatus(v string) *ListDomainInfosResponseData {
	s.DefendStatus = &v
	return s
}

func (s *ListDomainInfosResponseData) SetDmsDefendSwitch(v string) *ListDomainInfosResponseData {
	s.DmsDefendSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetBotManageSwitch(v string) *ListDomainInfosResponseData {
	s.BotManageSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetCustomizeRuleSwitch(v string) *ListDomainInfosResponseData {
	s.CustomizeRuleSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetApiDefendSwitch(v string) *ListDomainInfosResponseData {
	s.ApiDefendSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetRateLimitSwitch(v string) *ListDomainInfosResponseData {
	s.RateLimitSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetWhitelistSwitch(v string) *ListDomainInfosResponseData {
	s.WhitelistSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetIntelligenceSwitch(v string) *ListDomainInfosResponseData {
	s.IntelligenceSwitch = &v
	return s
}

func (s *ListDomainInfosResponseData) SetWafDefendSwitch(v string) *ListDomainInfosResponseData {
	s.WafDefendSwitch = &v
	return s
}

type ListDomainInfosResponseHeader struct {
}

func (s ListDomainInfosResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListDomainInfosResponseHeader) GoString() string {
	return s.String()
}

type UpdateWhitelistRuleRequest struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Rule name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"Match conditions, at least one, at most five.","zh_CN":"匹配条件，至少一个，至多五个。"}
	Conditions *UpdateWhitelistRuleRequestConditions `json:"conditions,omitempty" xml:"conditions,omitempty" type:"Struct"`
}

func (s UpdateWhitelistRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequest) SetId(v string) *UpdateWhitelistRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateWhitelistRuleRequest) SetRuleName(v string) *UpdateWhitelistRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateWhitelistRuleRequest) SetDescription(v string) *UpdateWhitelistRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateWhitelistRuleRequest) SetConditions(v *UpdateWhitelistRuleRequestConditions) *UpdateWhitelistRuleRequest {
	s.Conditions = v
	return s
}

type UpdateWhitelistRuleRequestConditions struct {
	// {"en":"IP/CIDR match conditions, match type cannot be repeated.","zh_CN":"IP/IP段匹配条件，匹配类型不可重复。"}
	IpOrIpsConditions []*UpdateWhitelistRuleRequestConditionsIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"Path match conditions, match type cannot be repeated.","zh_CN":"路径匹配条件，匹配类型不可重复。"}
	PathConditions []*UpdateWhitelistRuleRequestConditionsPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI match conditions, match type cannot be repeated.","zh_CN":"URI匹配条件，匹配类型不可重复。"}
	UriConditions []*UpdateWhitelistRuleRequestConditionsUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"User agent match conditions, match type cannot be repeated.","zh_CN":"User-Agent 匹配条件，匹配类型不可重复。"}
	UaConditions []*UpdateWhitelistRuleRequestConditionsUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Referer match conditions, match type cannot be repeated.","zh_CN":"Referer 匹配条件，匹配类型不可重复。"}
	RefererConditions []*UpdateWhitelistRuleRequestConditionsRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"Request header match conditions.","zh_CN":"请求头匹配条件。"}
	HeaderConditions []*UpdateWhitelistRuleRequestConditionsHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditions) SetIpOrIpsConditions(v []*UpdateWhitelistRuleRequestConditionsIpOrIpsConditions) *UpdateWhitelistRuleRequestConditions {
	s.IpOrIpsConditions = v
	return s
}

func (s *UpdateWhitelistRuleRequestConditions) SetPathConditions(v []*UpdateWhitelistRuleRequestConditionsPathConditions) *UpdateWhitelistRuleRequestConditions {
	s.PathConditions = v
	return s
}

func (s *UpdateWhitelistRuleRequestConditions) SetUriConditions(v []*UpdateWhitelistRuleRequestConditionsUriConditions) *UpdateWhitelistRuleRequestConditions {
	s.UriConditions = v
	return s
}

func (s *UpdateWhitelistRuleRequestConditions) SetUaConditions(v []*UpdateWhitelistRuleRequestConditionsUaConditions) *UpdateWhitelistRuleRequestConditions {
	s.UaConditions = v
	return s
}

func (s *UpdateWhitelistRuleRequestConditions) SetRefererConditions(v []*UpdateWhitelistRuleRequestConditionsRefererConditions) *UpdateWhitelistRuleRequestConditions {
	s.RefererConditions = v
	return s
}

func (s *UpdateWhitelistRuleRequestConditions) SetHeaderConditions(v []*UpdateWhitelistRuleRequestConditionsHeaderConditions) *UpdateWhitelistRuleRequestConditions {
	s.HeaderConditions = v
	return s
}

type UpdateWhitelistRuleRequestConditionsIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsIpOrIpsConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsIpOrIpsConditions) SetIpOrIps(v []*string) *UpdateWhitelistRuleRequestConditionsIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type UpdateWhitelistRuleRequestConditionsPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	UpdateWhitelistRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsPathConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsPathConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsPathConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsPathConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsPathConditions) SetUpdateWhitelistRulePaths(v []*string) *UpdateWhitelistRuleRequestConditionsPathConditions {
	s.UpdateWhitelistRulePaths = v
	return s
}

type UpdateWhitelistRuleRequestConditionsUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsUriConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsUriConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsUriConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsUriConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsUriConditions) SetUri(v []*string) *UpdateWhitelistRuleRequestConditionsUriConditions {
	s.Uri = v
	return s
}

type UpdateWhitelistRuleRequestConditionsUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsUaConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsUaConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsUaConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsUaConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsUaConditions) SetUa(v []*string) *UpdateWhitelistRuleRequestConditionsUaConditions {
	s.Ua = v
	return s
}

type UpdateWhitelistRuleRequestConditionsRefererConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsRefererConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsRefererConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsRefererConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsRefererConditions) SetReferer(v []*string) *UpdateWhitelistRuleRequestConditionsRefererConditions {
	s.Referer = v
	return s
}

type UpdateWhitelistRuleRequestConditionsHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, request header values case sensitive\nNOT_EQUAL: Does not equal, request header values case sensitive\nCONTAIN: Contains, request header values case insensitive\nNOT_CONTAIN: Does not Contains, request header values case insensitive\nREGEX: Regex match, request header values case insensitive\nNOT_REGEX: Regular does not match, request header values case insensitive\nSTART_WITH: Starts with, request header values case insensitive\nEND_WITH: Ends with, request header values case insensitive\nWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，头部值大小写敏感\nNOT_EQUAL：不等于，头部值大小写敏感\nCONTAIN：包含，头部值大小写不敏感\nNOT_CONTAIN：不包含，头部值大小写不敏感\nREGEX：匹配正则，头部值大小写不敏感\nNOT_REGEX：正则不匹配，头部值大小写不敏感\nSTART_WITH：开头是，头部值大小写不敏感\nEND_WITH：结尾是，头部值大小写不敏感\nWILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWhitelistRuleRequestConditionsHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestConditionsHeaderConditions) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestConditionsHeaderConditions) SetMatchType(v string) *UpdateWhitelistRuleRequestConditionsHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsHeaderConditions) SetKey(v string) *UpdateWhitelistRuleRequestConditionsHeaderConditions {
	s.Key = &v
	return s
}

func (s *UpdateWhitelistRuleRequestConditionsHeaderConditions) SetValueList(v []*string) *UpdateWhitelistRuleRequestConditionsHeaderConditions {
	s.ValueList = v
	return s
}

type UpdateWhitelistRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateWhitelistRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleRequestHeader) SetServiceType(v string) *UpdateWhitelistRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateWhitelistRulePaths struct {
}

func (s UpdateWhitelistRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRulePaths) GoString() string {
	return s.String()
}

type UpdateWhitelistRuleParameters struct {
}

func (s UpdateWhitelistRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleParameters) GoString() string {
	return s.String()
}

type UpdateWhitelistRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateWhitelistRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateWhitelistRuleResponse) SetCode(v string) *UpdateWhitelistRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateWhitelistRuleResponse) SetMsg(v string) *UpdateWhitelistRuleResponse {
	s.Msg = &v
	return s
}

type UpdateWhitelistRuleResponseHeader struct {
}

func (s UpdateWhitelistRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWhitelistRuleResponseHeader) GoString() string {
	return s.String()
}

type GetDetectionLengthLimitConfigurationRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s GetDetectionLengthLimitConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetDetectionLengthLimitConfigurationRequest) SetDomainList(v []*string) *GetDetectionLengthLimitConfigurationRequest {
	s.DomainList = v
	return s
}

type GetDetectionLengthLimitConfigurationRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetDetectionLengthLimitConfigurationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationRequestHeader) GoString() string {
	return s.String()
}

func (s *GetDetectionLengthLimitConfigurationRequestHeader) SetServiceType(v string) *GetDetectionLengthLimitConfigurationRequestHeader {
	s.ServiceType = &v
	return s
}

type GetDetectionLengthLimitConfigurationPaths struct {
}

func (s GetDetectionLengthLimitConfigurationPaths) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationPaths) GoString() string {
	return s.String()
}

type GetDetectionLengthLimitConfigurationParameters struct {
}

func (s GetDetectionLengthLimitConfigurationParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationParameters) GoString() string {
	return s.String()
}

type GetDetectionLengthLimitConfigurationResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *GetDetectionLengthLimitConfigurationResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetDetectionLengthLimitConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetDetectionLengthLimitConfigurationResponse) SetCode(v int) *GetDetectionLengthLimitConfigurationResponse {
	s.Code = &v
	return s
}

func (s *GetDetectionLengthLimitConfigurationResponse) SetMsg(v string) *GetDetectionLengthLimitConfigurationResponse {
	s.Msg = &v
	return s
}

func (s *GetDetectionLengthLimitConfigurationResponse) SetData(v *GetDetectionLengthLimitConfigurationResponseData) *GetDetectionLengthLimitConfigurationResponse {
	s.Data = v
	return s
}

type GetDetectionLengthLimitConfigurationResponseData struct {
	// {"en":"Array.","zh_CN":"数组。"}
	Array []*GetDetectionLengthLimitConfigurationResponseDataArray `json:"array,omitempty" xml:"array,omitempty" require:"true" type:"Repeated"`
}

func (s GetDetectionLengthLimitConfigurationResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationResponseData) GoString() string {
	return s.String()
}

func (s *GetDetectionLengthLimitConfigurationResponseData) SetArray(v []*GetDetectionLengthLimitConfigurationResponseDataArray) *GetDetectionLengthLimitConfigurationResponseData {
	s.Array = v
	return s
}

type GetDetectionLengthLimitConfigurationResponseDataArray struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Maximum detection length of the request body, in KB.","zh_CN":"请求正文最大检测长度，单位 KB。"}
	BodyDetectionLength *int `json:"bodyDetectionLength,omitempty" xml:"bodyDetectionLength,omitempty" require:"true"`
}

func (s GetDetectionLengthLimitConfigurationResponseDataArray) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationResponseDataArray) GoString() string {
	return s.String()
}

func (s *GetDetectionLengthLimitConfigurationResponseDataArray) SetDomain(v string) *GetDetectionLengthLimitConfigurationResponseDataArray {
	s.Domain = &v
	return s
}

func (s *GetDetectionLengthLimitConfigurationResponseDataArray) SetBodyDetectionLength(v int) *GetDetectionLengthLimitConfigurationResponseDataArray {
	s.BodyDetectionLength = &v
	return s
}

type GetDetectionLengthLimitConfigurationResponseHeader struct {
}

func (s GetDetectionLengthLimitConfigurationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetDetectionLengthLimitConfigurationResponseHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForBuiltInRuleRequest struct {
	// {"en":"Template name.", "zh_CN":"模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Cancel the associated domain name, array.", "zh_CN":"取消关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveDomainsForBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForBuiltInRuleRequest) SetName(v string) *RemoveDomainsForBuiltInRuleRequest {
	s.Name = &v
	return s
}

func (s *RemoveDomainsForBuiltInRuleRequest) SetDomainList(v []*string) *RemoveDomainsForBuiltInRuleRequest {
	s.DomainList = v
	return s
}

type RemoveDomainsForBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s RemoveDomainsForBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForBuiltInRuleResponse) SetCode(v string) *RemoveDomainsForBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *RemoveDomainsForBuiltInRuleResponse) SetMessage(v string) *RemoveDomainsForBuiltInRuleResponse {
	s.Message = &v
	return s
}

type RemoveDomainsForBuiltInRulePaths struct {
}

func (s RemoveDomainsForBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRulePaths) GoString() string {
	return s.String()
}

type RemoveDomainsForBuiltInRuleParameters struct {
}

func (s RemoveDomainsForBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRuleParameters) GoString() string {
	return s.String()
}

type RemoveDomainsForBuiltInRuleRequestHeader struct {
}

func (s RemoveDomainsForBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForBuiltInRuleResponseHeader struct {
}

func (s RemoveDomainsForBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type ListKnownBotsRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s ListKnownBotsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsRequest) GoString() string {
	return s.String()
}

func (s *ListKnownBotsRequest) SetDomain(v string) *ListKnownBotsRequest {
	s.Domain = &v
	return s
}

type ListKnownBotsResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Data.', 'zh_CN':'出参数据。'}
	Data []*ListKnownBotsBotPublicBotsReturnVO `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListKnownBotsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsResponse) GoString() string {
	return s.String()
}

func (s *ListKnownBotsResponse) SetCode(v string) *ListKnownBotsResponse {
	s.Code = &v
	return s
}

func (s *ListKnownBotsResponse) SetMsg(v string) *ListKnownBotsResponse {
	s.Msg = &v
	return s
}

func (s *ListKnownBotsResponse) SetData(v []*ListKnownBotsBotPublicBotsReturnVO) *ListKnownBotsResponse {
	s.Data = v
	return s
}

type ListKnownBotsBotPublicBotsReturnVO struct {
	// {'en':'Good bots ID.', 'zh_CN':'ID。'}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {'en':'Known Bot category.
	//  search_engine_bot: Search Engines
	//  marketing_analysis: Marketing Analysis
	//  site_monitor: Site Monitor
	//  feed_fetcher: Feed Fetcher
	//  tool: Practical Tools
	//  illegal_public_crawler: Illegal Known Bots
	//  other: Other Known Bots', 'zh_CN':'已知Bot类别。
	//  search_engine_bot：搜索引擎
	//  marketing_analysis：市场分析
	//  site_monitor：网站监控
	//  feed_fetcher：信息流聚合
	//  tool：实用工具
	//  illegal_public_crawler：非法的已知Bot
	//  other：其他已知Bot'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty" require:"true"`
	// {'en':'Actions.
	// NO_USE: not used
	// BLOCK: block
	// LOG: log
	// ACCEPT: release', 'zh_CN':'处理动作。
	// NO_USE：不使用
	// BLOCK：拦截
	// LOG：监控
	// ACCEPT：放行'}
	BotAct *string `json:"botAct,omitempty" xml:"botAct,omitempty" require:"true"`
	// {'en':'Specific Bot information.', 'zh_CN':'具体的Bot信息。'}
	BotNameInfoList []*ListKnownBotsBotNameInfoVO `json:"botNameInfoList,omitempty" xml:"botNameInfoList,omitempty" require:"true" type:"Repeated"`
}

func (s ListKnownBotsBotPublicBotsReturnVO) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsBotPublicBotsReturnVO) GoString() string {
	return s.String()
}

func (s *ListKnownBotsBotPublicBotsReturnVO) SetId(v string) *ListKnownBotsBotPublicBotsReturnVO {
	s.Id = &v
	return s
}

func (s *ListKnownBotsBotPublicBotsReturnVO) SetBotCategory(v string) *ListKnownBotsBotPublicBotsReturnVO {
	s.BotCategory = &v
	return s
}

func (s *ListKnownBotsBotPublicBotsReturnVO) SetBotAct(v string) *ListKnownBotsBotPublicBotsReturnVO {
	s.BotAct = &v
	return s
}

func (s *ListKnownBotsBotPublicBotsReturnVO) SetBotNameInfoList(v []*ListKnownBotsBotNameInfoVO) *ListKnownBotsBotPublicBotsReturnVO {
	s.BotNameInfoList = v
	return s
}

type ListKnownBotsBotNameInfoVO struct {
	// {'en':'Bot name(Please refer to the documentation: Public Bot Dictionary).', 'zh_CN':'Bot名称（请参照说明文档：已知Bot字典）。'}
	BotName *string `json:"botName,omitempty" xml:"botName,omitempty" require:"true"`
	// {'en':'effective.
	// true:Yes
	// false:No', 'zh_CN':'是否生效。
	// true：是
	// false：否'}
	Effective *bool `json:"effective,omitempty" xml:"effective,omitempty" require:"true"`
}

func (s ListKnownBotsBotNameInfoVO) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsBotNameInfoVO) GoString() string {
	return s.String()
}

func (s *ListKnownBotsBotNameInfoVO) SetBotName(v string) *ListKnownBotsBotNameInfoVO {
	s.BotName = &v
	return s
}

func (s *ListKnownBotsBotNameInfoVO) SetEffective(v bool) *ListKnownBotsBotNameInfoVO {
	s.Effective = &v
	return s
}

type ListKnownBotsPaths struct {
}

func (s ListKnownBotsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsPaths) GoString() string {
	return s.String()
}

type ListKnownBotsParameters struct {
}

func (s ListKnownBotsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsParameters) GoString() string {
	return s.String()
}

type ListKnownBotsRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListKnownBotsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListKnownBotsRequestHeader) SetServiceType(v string) *ListKnownBotsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListKnownBotsResponseHeader struct {
}

func (s ListKnownBotsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListKnownBotsResponseHeader) GoString() string {
	return s.String()
}

type ShareDmsBuiltInRulesConfigRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"shareDomainList", "zh_CN":"shareDomainList"}
	ShareDomainList []*string `json:"shareDomainList,omitempty" xml:"shareDomainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"list of share rules", "zh_CN":"分享的规则列表"}
	RuleIds []*string `json:"ruleIds,omitempty" xml:"ruleIds,omitempty" require:"true" type:"Repeated"`
}

func (s ShareDmsBuiltInRulesConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigRequest) GoString() string {
	return s.String()
}

func (s *ShareDmsBuiltInRulesConfigRequest) SetDomain(v string) *ShareDmsBuiltInRulesConfigRequest {
	s.Domain = &v
	return s
}

func (s *ShareDmsBuiltInRulesConfigRequest) SetShareDomainList(v []*string) *ShareDmsBuiltInRulesConfigRequest {
	s.ShareDomainList = v
	return s
}

func (s *ShareDmsBuiltInRulesConfigRequest) SetRuleIds(v []*string) *ShareDmsBuiltInRulesConfigRequest {
	s.RuleIds = v
	return s
}

type ShareDmsBuiltInRulesConfigResponse struct {
	// {"en":"Normal: 200, please refer to the error code for exceptions.", "zh_CN":"正常：200，异常请参照错误码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.", "zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s ShareDmsBuiltInRulesConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigResponse) GoString() string {
	return s.String()
}

func (s *ShareDmsBuiltInRulesConfigResponse) SetCode(v int) *ShareDmsBuiltInRulesConfigResponse {
	s.Code = &v
	return s
}

func (s *ShareDmsBuiltInRulesConfigResponse) SetMsg(v string) *ShareDmsBuiltInRulesConfigResponse {
	s.Msg = &v
	return s
}

type ShareDmsBuiltInRulesConfigPaths struct {
}

func (s ShareDmsBuiltInRulesConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigPaths) GoString() string {
	return s.String()
}

type ShareDmsBuiltInRulesConfigParameters struct {
}

func (s ShareDmsBuiltInRulesConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigParameters) GoString() string {
	return s.String()
}

type ShareDmsBuiltInRulesConfigRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ShareDmsBuiltInRulesConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigRequestHeader) GoString() string {
	return s.String()
}

func (s *ShareDmsBuiltInRulesConfigRequestHeader) SetServiceType(v string) *ShareDmsBuiltInRulesConfigRequestHeader {
	s.ServiceType = &v
	return s
}

type ShareDmsBuiltInRulesConfigResponseHeader struct {
}

func (s ShareDmsBuiltInRulesConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ShareDmsBuiltInRulesConfigResponseHeader) GoString() string {
	return s.String()
}

type BatchAssiociatedExactRuleRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule id array.", "zh_CN":"规则ID数组。"}
	RuleIdList []*string `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Association domain.", "zh_CN":"关联域名数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchAssiociatedExactRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleRequest) GoString() string {
	return s.String()
}

func (s *BatchAssiociatedExactRuleRequest) SetServiceType(v string) *BatchAssiociatedExactRuleRequest {
	s.ServiceType = &v
	return s
}

func (s *BatchAssiociatedExactRuleRequest) SetRuleIdList(v []*string) *BatchAssiociatedExactRuleRequest {
	s.RuleIdList = v
	return s
}

func (s *BatchAssiociatedExactRuleRequest) SetDomainList(v []*string) *BatchAssiociatedExactRuleRequest {
	s.DomainList = v
	return s
}

type BatchAssiociatedExactRuleResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *BatchAssiociatedExactRuleResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s BatchAssiociatedExactRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleResponse) GoString() string {
	return s.String()
}

func (s *BatchAssiociatedExactRuleResponse) SetCode(v string) *BatchAssiociatedExactRuleResponse {
	s.Code = &v
	return s
}

func (s *BatchAssiociatedExactRuleResponse) SetMessage(v string) *BatchAssiociatedExactRuleResponse {
	s.Message = &v
	return s
}

func (s *BatchAssiociatedExactRuleResponse) SetData(v *BatchAssiociatedExactRuleResp) *BatchAssiociatedExactRuleResponse {
	s.Data = v
	return s
}

type BatchAssiociatedExactRuleResp struct {
	// {"en":"Association domain.", "zh_CN":"关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchAssiociatedExactRuleResp) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleResp) GoString() string {
	return s.String()
}

func (s *BatchAssiociatedExactRuleResp) SetDomainList(v []*string) *BatchAssiociatedExactRuleResp {
	s.DomainList = v
	return s
}

type BatchAssiociatedExactRulePaths struct {
}

func (s BatchAssiociatedExactRulePaths) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRulePaths) GoString() string {
	return s.String()
}

type BatchAssiociatedExactRuleParameters struct {
}

func (s BatchAssiociatedExactRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleParameters) GoString() string {
	return s.String()
}

type BatchAssiociatedExactRuleRequestHeader struct {
}

func (s BatchAssiociatedExactRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleRequestHeader) GoString() string {
	return s.String()
}

type BatchAssiociatedExactRuleResponseHeader struct {
}

func (s BatchAssiociatedExactRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s BatchAssiociatedExactRuleResponseHeader) GoString() string {
	return s.String()
}

type DeleteExceptionForWAFManagedRulesRequest struct {
	// {"en":"Removed exceptions.","zh_CN":"删除的例外。"}
	DelDTOList []*DeleteExceptionForWAFManagedRulesRequestDelDTOList `json:"delDTOList,omitempty" xml:"delDTOList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteExceptionForWAFManagedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteExceptionForWAFManagedRulesRequest) SetDelDTOList(v []*DeleteExceptionForWAFManagedRulesRequestDelDTOList) *DeleteExceptionForWAFManagedRulesRequest {
	s.DelDTOList = v
	return s
}

type DeleteExceptionForWAFManagedRulesRequestDelDTOList struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule exception ID.","zh_CN":"规则例外ID。"}
	ExceptionIdList []*string `json:"exceptionIdList,omitempty" xml:"exceptionIdList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteExceptionForWAFManagedRulesRequestDelDTOList) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesRequestDelDTOList) GoString() string {
	return s.String()
}

func (s *DeleteExceptionForWAFManagedRulesRequestDelDTOList) SetDomain(v string) *DeleteExceptionForWAFManagedRulesRequestDelDTOList {
	s.Domain = &v
	return s
}

func (s *DeleteExceptionForWAFManagedRulesRequestDelDTOList) SetRuleId(v int) *DeleteExceptionForWAFManagedRulesRequestDelDTOList {
	s.RuleId = &v
	return s
}

func (s *DeleteExceptionForWAFManagedRulesRequestDelDTOList) SetExceptionIdList(v []*string) *DeleteExceptionForWAFManagedRulesRequestDelDTOList {
	s.ExceptionIdList = v
	return s
}

type DeleteExceptionForWAFManagedRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteExceptionForWAFManagedRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteExceptionForWAFManagedRulesRequestHeader) SetServiceType(v string) *DeleteExceptionForWAFManagedRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteExceptionForWAFManagedRulesPaths struct {
}

func (s DeleteExceptionForWAFManagedRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesPaths) GoString() string {
	return s.String()
}

type DeleteExceptionForWAFManagedRulesParameters struct {
}

func (s DeleteExceptionForWAFManagedRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesParameters) GoString() string {
	return s.String()
}

type DeleteExceptionForWAFManagedRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteExceptionForWAFManagedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteExceptionForWAFManagedRulesResponse) SetCode(v string) *DeleteExceptionForWAFManagedRulesResponse {
	s.Code = &v
	return s
}

func (s *DeleteExceptionForWAFManagedRulesResponse) SetMsg(v string) *DeleteExceptionForWAFManagedRulesResponse {
	s.Msg = &v
	return s
}

type DeleteExceptionForWAFManagedRulesResponseHeader struct {
}

func (s DeleteExceptionForWAFManagedRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteExceptionForWAFManagedRulesResponseHeader) GoString() string {
	return s.String()
}

type DeleteRateLimitingRulesRequest struct {
	// {"en":"Rule ID list.","zh_CN":"规则ID列表。"}
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteRateLimitingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteRateLimitingRulesRequest) SetIds(v []*string) *DeleteRateLimitingRulesRequest {
	s.Ids = v
	return s
}

type DeleteRateLimitingRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteRateLimitingRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteRateLimitingRulesRequestHeader) SetServiceType(v string) *DeleteRateLimitingRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteRateLimitingRulesPaths struct {
}

func (s DeleteRateLimitingRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesPaths) GoString() string {
	return s.String()
}

type DeleteRateLimitingRulesParameters struct {
}

func (s DeleteRateLimitingRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesParameters) GoString() string {
	return s.String()
}

type DeleteRateLimitingRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteRateLimitingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteRateLimitingRulesResponse) SetCode(v string) *DeleteRateLimitingRulesResponse {
	s.Code = &v
	return s
}

func (s *DeleteRateLimitingRulesResponse) SetMsg(v string) *DeleteRateLimitingRulesResponse {
	s.Msg = &v
	return s
}

type DeleteRateLimitingRulesResponseHeader struct {
}

func (s DeleteRateLimitingRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteRateLimitingRulesResponseHeader) GoString() string {
	return s.String()
}

type BatchRemoveExactRuleRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule id array.", "zh_CN":"规则ID数组。"}
	RuleIdList []*string `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Remove domain.", "zh_CN":"取消关联域名数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchRemoveExactRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleRequest) GoString() string {
	return s.String()
}

func (s *BatchRemoveExactRuleRequest) SetServiceType(v string) *BatchRemoveExactRuleRequest {
	s.ServiceType = &v
	return s
}

func (s *BatchRemoveExactRuleRequest) SetRuleIdList(v []*string) *BatchRemoveExactRuleRequest {
	s.RuleIdList = v
	return s
}

func (s *BatchRemoveExactRuleRequest) SetDomainList(v []*string) *BatchRemoveExactRuleRequest {
	s.DomainList = v
	return s
}

type BatchRemoveExactRuleResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *BatchRemoveExactRuleResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s BatchRemoveExactRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleResponse) GoString() string {
	return s.String()
}

func (s *BatchRemoveExactRuleResponse) SetCode(v string) *BatchRemoveExactRuleResponse {
	s.Code = &v
	return s
}

func (s *BatchRemoveExactRuleResponse) SetMessage(v string) *BatchRemoveExactRuleResponse {
	s.Message = &v
	return s
}

func (s *BatchRemoveExactRuleResponse) SetData(v *BatchRemoveExactRuleResp) *BatchRemoveExactRuleResponse {
	s.Data = v
	return s
}

type BatchRemoveExactRuleResp struct {
	// {"en":"Remove  domain.", "zh_CN":"取消关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchRemoveExactRuleResp) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleResp) GoString() string {
	return s.String()
}

func (s *BatchRemoveExactRuleResp) SetDomainList(v []*string) *BatchRemoveExactRuleResp {
	s.DomainList = v
	return s
}

type BatchRemoveExactRulePaths struct {
}

func (s BatchRemoveExactRulePaths) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRulePaths) GoString() string {
	return s.String()
}

type BatchRemoveExactRuleParameters struct {
}

func (s BatchRemoveExactRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleParameters) GoString() string {
	return s.String()
}

type BatchRemoveExactRuleRequestHeader struct {
}

func (s BatchRemoveExactRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleRequestHeader) GoString() string {
	return s.String()
}

type BatchRemoveExactRuleResponseHeader struct {
}

func (s BatchRemoveExactRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s BatchRemoveExactRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateKnownBotsActRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Modified Bot category data.', 'zh_CN':'修改的Bot类别数据。'}
	UpdateList []*UpdateKnownBotsActBotPublicBotsDTO `json:"updateList,omitempty" xml:"updateList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateKnownBotsActRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActRequest) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsActRequest) SetDomain(v string) *UpdateKnownBotsActRequest {
	s.Domain = &v
	return s
}

func (s *UpdateKnownBotsActRequest) SetUpdateList(v []*UpdateKnownBotsActBotPublicBotsDTO) *UpdateKnownBotsActRequest {
	s.UpdateList = v
	return s
}

type UpdateKnownBotsActResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateKnownBotsActResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActResponse) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsActResponse) SetCode(v string) *UpdateKnownBotsActResponse {
	s.Code = &v
	return s
}

func (s *UpdateKnownBotsActResponse) SetMsg(v string) *UpdateKnownBotsActResponse {
	s.Msg = &v
	return s
}

type UpdateKnownBotsActBotPublicBotsDTO struct {
	// {'en':'Known Bot category.
	//  search_engine_bot: Search Engines
	//  marketing_analysis: Marketing Analysis
	//  site_monitor: Site Monitor
	//  feed_fetcher: Feed Fetcher
	//  tool: Practical Tools
	//  illegal_public_crawler: Illegal Known Bots
	//  other: Other Known Bots', 'zh_CN':'已知Bot类别。
	//  search_engine_bot：搜索引擎
	//  marketing_analysis：市场分析
	//  site_monitor：网站监控
	//  feed_fetcher：信息流聚合
	//  tool：实用工具
	//  illegal_public_crawler：非法的已知Bot
	//  other：其他已知Bot'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty" require:"true"`
	// {'en':'Action.
	//  NO_USE: not used
	//  BLOCK: block
	//  LOG: log
	//  ACCEPT: release', 'zh_CN':'处理动作。
	//  NO_USE：不使用
	//  BLOCK：拦截
	//  LOG：监控
	//  ACCEPT：放行'}
	BotAct *string `json:"botAct,omitempty" xml:"botAct,omitempty" require:"true"`
}

func (s UpdateKnownBotsActBotPublicBotsDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActBotPublicBotsDTO) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsActBotPublicBotsDTO) SetBotCategory(v string) *UpdateKnownBotsActBotPublicBotsDTO {
	s.BotCategory = &v
	return s
}

func (s *UpdateKnownBotsActBotPublicBotsDTO) SetBotAct(v string) *UpdateKnownBotsActBotPublicBotsDTO {
	s.BotAct = &v
	return s
}

type UpdateKnownBotsActPaths struct {
}

func (s UpdateKnownBotsActPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActPaths) GoString() string {
	return s.String()
}

type UpdateKnownBotsActParameters struct {
}

func (s UpdateKnownBotsActParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActParameters) GoString() string {
	return s.String()
}

type UpdateKnownBotsActRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateKnownBotsActRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateKnownBotsActRequestHeader) SetServiceType(v string) *UpdateKnownBotsActRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateKnownBotsActResponseHeader struct {
}

func (s UpdateKnownBotsActResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateKnownBotsActResponseHeader) GoString() string {
	return s.String()
}

type ListWAFRulesRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID list.","zh_CN":"WAF规则ID列表。"}
	RuleIdList []*string `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" type:"Repeated"`
	// {"en":"Fuzzy search supports searching rules by rule ID, rule name, rule description and vulnerability number. By default, all rules are returned.","zh_CN":"模糊搜索，支持按规则ID、规则名称、规则描述、漏洞编号搜索规则。缺省时，返回全部规则。"}
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
}

func (s ListWAFRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesRequest) GoString() string {
	return s.String()
}

func (s *ListWAFRulesRequest) SetDomain(v string) *ListWAFRulesRequest {
	s.Domain = &v
	return s
}

func (s *ListWAFRulesRequest) SetRuleIdList(v []*string) *ListWAFRulesRequest {
	s.RuleIdList = v
	return s
}

func (s *ListWAFRulesRequest) SetKeyword(v string) *ListWAFRulesRequest {
	s.Keyword = &v
	return s
}

type ListWAFRulesRequestHeader struct {
	// {"en":"The language of response data, default value: en.\nzh_CN: Chinese\nen: English","zh_CN":"返回内容的语言版本，默认值: en。\nzh_CN：中文\nen：英文"}
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListWAFRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListWAFRulesRequestHeader) SetLanguage(v string) *ListWAFRulesRequestHeader {
	s.Language = &v
	return s
}

func (s *ListWAFRulesRequestHeader) SetServiceType(v string) *ListWAFRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListWAFRulesPaths struct {
}

func (s ListWAFRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesPaths) GoString() string {
	return s.String()
}

type ListWAFRulesParameters struct {
}

func (s ListWAFRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesParameters) GoString() string {
	return s.String()
}

type ListWAFRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListWAFRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListWAFRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesResponse) GoString() string {
	return s.String()
}

func (s *ListWAFRulesResponse) SetCode(v string) *ListWAFRulesResponse {
	s.Code = &v
	return s
}

func (s *ListWAFRulesResponse) SetMsg(v string) *ListWAFRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListWAFRulesResponse) SetData(v []*ListWAFRulesResponseData) *ListWAFRulesResponse {
	s.Data = v
	return s
}

type ListWAFRulesResponseData struct {
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Action.\nBLOCK: Deny request by a default 403 response.\nLOG: Log request and continue further detections.\nOFF: Select if you do not a policy or rule take effect.","zh_CN":"规则动作。\nBLOCK：阻断请求并响应403。\nLOG：记录请求的攻击行为，并继续做进一步的评估。\nOFF：对应规则或策略不生效。","exampleValue":"BLOCK,LOG,OFF"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Rule type.\nWAF_XSS: Cross-Site Scripting\nWAF_RFI: File Inclusion\nWAF_FILE_UPLOAD: File Uploading\nWAF_CMDI: Command Injection\nWAF_DIR_TRAVERSAL: Directory Traversal\nWAF_THIRDCOMP: 3rd-party Component Vulnerabilities\nWAF_XPATH_LDAP_SSI: XPATH/LDAP/SSI Injection\nWAF_SCANNER: Scanners\nWAF_SHELL_BACKDOOR: Webshell Uploading\nWAF_FILE_DOWNLOAD: Unauthorized Download\nWAF_XXE: XML Injection\nWAF_SQLI: SQL Injection\nWAF_SSRF: Server-side Request Forge","zh_CN":"攻击类型。\nWAF_XSS：XSS跨站\nWAF_RFI：文件包含\nWAF_FILE_UPLOAD：文件上传\nWAF_CMDI：命令注入\nWAF_DIR_TRAVERSAL：目录遍历\nWAF_THIRDCOMP：第三方组件漏洞\nWAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入\nWAF_SCANNER：扫描器\nWAF_SHELL_BACKDOOR：木马后门\nWAF_FILE_DOWNLOAD：非法下载\nWAF_XXE：XML注入\nWAF_SQLI：SQL注入\nWAF_SSRF：服务端请求伪造","exampleValue":"WAF_XSS,WAF_RFI,WAF_FILE_UPLOAD,WAF_CMDI,WAF_DIR_TRAVERSAL,WAF_THIRDCOMP,WAF_XPATH_LDAP_SSI,WAF_SCANNER,WAF_SHELL_BACKDOOR,WAF_FILE_DOWNLOAD,WAF_XXE,WAF_SQLI,WAF_SSRF"}
	AttackType *string `json:"attackType,omitempty" xml:"attackType,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述。"}
	Des *string `json:"des,omitempty" xml:"des,omitempty" require:"true"`
	// {"en":"OWASP type.\nA1: Injection\nA2: Broken Authentication\nA3: Sensitive Data Exposure\nA4: XML External Entities(XXE)\nA5: Broken Access Control\nA7: Cross-site scripting (XSS)\nA8: Insecure Deserialization\nA9: Using Components with Known Vulnerabilities","zh_CN":"OWASP类型。\nA1：注入\nA2：失效的身份认证和会话管理\nA3：敏感信息泄露\nA4：XML外部实体（XEE）\nA5：失效的访问控制\nA7：跨站脚本（XSS）\nA8：不安全的反序列化\nA9：使用含有已知漏洞的组件","exampleValue":"A1,A2,A3,A4,A5,A7,A8,A9"}
	OwaspTypeList []*string `json:"owaspTypeList,omitempty" xml:"owaspTypeList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Vulnerability number.","zh_CN":"漏洞编号。"}
	CveList []*string `json:"cveList,omitempty" xml:"cveList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Components.","zh_CN":"关联组件。"}
	ComponentList []*string `json:"componentList,omitempty" xml:"componentList,omitempty" require:"true" type:"Repeated"`
}

func (s ListWAFRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListWAFRulesResponseData) SetRuleId(v int) *ListWAFRulesResponseData {
	s.RuleId = &v
	return s
}

func (s *ListWAFRulesResponseData) SetMode(v string) *ListWAFRulesResponseData {
	s.Mode = &v
	return s
}

func (s *ListWAFRulesResponseData) SetName(v string) *ListWAFRulesResponseData {
	s.Name = &v
	return s
}

func (s *ListWAFRulesResponseData) SetAttackType(v string) *ListWAFRulesResponseData {
	s.AttackType = &v
	return s
}

func (s *ListWAFRulesResponseData) SetDes(v string) *ListWAFRulesResponseData {
	s.Des = &v
	return s
}

func (s *ListWAFRulesResponseData) SetOwaspTypeList(v []*string) *ListWAFRulesResponseData {
	s.OwaspTypeList = v
	return s
}

func (s *ListWAFRulesResponseData) SetCveList(v []*string) *ListWAFRulesResponseData {
	s.CveList = v
	return s
}

func (s *ListWAFRulesResponseData) SetComponentList(v []*string) *ListWAFRulesResponseData {
	s.ComponentList = v
	return s
}

type ListWAFRulesResponseHeader struct {
}

func (s ListWAFRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListWAFRulesResponseHeader) GoString() string {
	return s.String()
}

type GetCrawlerGoodRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s GetCrawlerGoodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodRequest) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodRequest) SetDomain(v string) *GetCrawlerGoodRequest {
	s.Domain = &v
	return s
}

type GetCrawlerGoodResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data Returned.", "zh_CN":"返回数据。"}
	Data *GetCrawlerGoodResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetCrawlerGoodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodResponse) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodResponse) SetCode(v string) *GetCrawlerGoodResponse {
	s.Code = &v
	return s
}

func (s *GetCrawlerGoodResponse) SetMessage(v string) *GetCrawlerGoodResponse {
	s.Message = &v
	return s
}

func (s *GetCrawlerGoodResponse) SetData(v *GetCrawlerGoodResult) *GetCrawlerGoodResponse {
	s.Data = v
	return s
}

type GetCrawlerGoodResult struct {
	// {"en":"Public Bots.", "zh_CN":"公开类型Bot。"}
	Edgebot_crawler_good *GetCrawlerGoodPgRows `json:"edgebot_crawler_good,omitempty" xml:"edgebot_crawler_good,omitempty" require:"true"`
	// {"en":"User-Agent Intelligence.", "zh_CN":"User-Agent情报。"}
	Edgebot_user_agent *GetCrawlerGoodPgRowsAgent `json:"edgebot_user_agent,omitempty" xml:"edgebot_user_agent,omitempty" require:"true"`
	// {"en":"IP Intelligence.", "zh_CN":"IP情报。"}
	Edgebot_bot_intelligence *GetCrawlerGoodPgRows `json:"edgebot_bot_intelligence,omitempty" xml:"edgebot_bot_intelligence,omitempty" require:"true"`
}

func (s GetCrawlerGoodResult) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodResult) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodResult) SetEdgebot_crawler_good(v *GetCrawlerGoodPgRows) *GetCrawlerGoodResult {
	s.Edgebot_crawler_good = v
	return s
}

func (s *GetCrawlerGoodResult) SetEdgebot_user_agent(v *GetCrawlerGoodPgRowsAgent) *GetCrawlerGoodResult {
	s.Edgebot_user_agent = v
	return s
}

func (s *GetCrawlerGoodResult) SetEdgebot_bot_intelligence(v *GetCrawlerGoodPgRows) *GetCrawlerGoodResult {
	s.Edgebot_bot_intelligence = v
	return s
}

type GetCrawlerGoodPgRowsAgent struct {
	// {"en":"BOT name.", "zh_CN":"Bot标识。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Off
	//  1:Block
	//  2:Log
	//  3:Bypass", "zh_CN":"处理动作。
	//  0：关闭
	//  1：拦截
	//  2：告警
	//  3：放行"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"HTTP library.
	//  Python;Python-requests;Python-urllib;PHP;Ruby;GO HttpClient;Guzzle Http Client;Libcurl;Apache ;HttpClient;Jakarta Commons HttpClient;Axios;Other",
	//     "zh_CN":"HTTP库。
	//  Python;Python-requests;Python-urllib;PHP;Ruby;GO HttpClient;Guzzle Http Client;Libcurl;Apache ;HttpClient;Jakarta Commons HttpClient;Axios;Other"}
	Check []*string `json:"check,omitempty" xml:"check,omitempty" type:"Repeated"`
}

func (s GetCrawlerGoodPgRowsAgent) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodPgRowsAgent) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodPgRowsAgent) SetName(v string) *GetCrawlerGoodPgRowsAgent {
	s.Name = &v
	return s
}

func (s *GetCrawlerGoodPgRowsAgent) SetEnable(v int) *GetCrawlerGoodPgRowsAgent {
	s.Enable = &v
	return s
}

func (s *GetCrawlerGoodPgRowsAgent) SetCheck(v []*string) *GetCrawlerGoodPgRowsAgent {
	s.Check = v
	return s
}

type GetCrawlerGoodPgRows struct {
	// {"en":"Record of single Bots.", "zh_CN":"单条Bot记录。"}
	Pg_rows []*GetCrawlerGoodRow `json:"pg_rows,omitempty" xml:"pg_rows,omitempty" require:"true" type:"Repeated"`
}

func (s GetCrawlerGoodPgRows) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodPgRows) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodPgRows) SetPg_rows(v []*GetCrawlerGoodRow) *GetCrawlerGoodPgRows {
	s.Pg_rows = v
	return s
}

type GetCrawlerGoodRow struct {
	// {"en":"BOT name.", "zh_CN":"Bot标识。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Action.
	//  0:Off
	//  1:Block
	//  2:Log
	//  3:Bypass", "zh_CN":"处理动作。
	//  0：关闭
	//  1：拦截
	//  2：告警
	//  3：放行"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
}

func (s GetCrawlerGoodRow) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodRow) GoString() string {
	return s.String()
}

func (s *GetCrawlerGoodRow) SetName(v string) *GetCrawlerGoodRow {
	s.Name = &v
	return s
}

func (s *GetCrawlerGoodRow) SetEnable(v int) *GetCrawlerGoodRow {
	s.Enable = &v
	return s
}

type GetCrawlerGoodPaths struct {
}

func (s GetCrawlerGoodPaths) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodPaths) GoString() string {
	return s.String()
}

type GetCrawlerGoodParameters struct {
}

func (s GetCrawlerGoodParameters) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodParameters) GoString() string {
	return s.String()
}

type GetCrawlerGoodRequestHeader struct {
}

func (s GetCrawlerGoodRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodRequestHeader) GoString() string {
	return s.String()
}

type GetCrawlerGoodResponseHeader struct {
}

func (s GetCrawlerGoodResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetCrawlerGoodResponseHeader) GoString() string {
	return s.String()
}

type GetBuiltInRuleInfoRequest struct {
	// {"en":"Template name, Precise matching.", "zh_CN":"模板名称，精准匹配。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"The language of response data, default value: cn.
	//     cn: Chinese
	//     en: English", "zh_CN":"返回内容的语言版本，默认值：cn。
	//     cn：中文
	//     en：英文"}
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
}

func (s GetBuiltInRuleInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoRequest) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleInfoRequest) SetName(v string) *GetBuiltInRuleInfoRequest {
	s.Name = &v
	return s
}

func (s *GetBuiltInRuleInfoRequest) SetLang(v string) *GetBuiltInRuleInfoRequest {
	s.Lang = &v
	return s
}

type GetBuiltInRuleInfoResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data *GetBuiltInRuleInfoRuleTemplate `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetBuiltInRuleInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoResponse) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleInfoResponse) SetCode(v string) *GetBuiltInRuleInfoResponse {
	s.Code = &v
	return s
}

func (s *GetBuiltInRuleInfoResponse) SetMessage(v string) *GetBuiltInRuleInfoResponse {
	s.Message = &v
	return s
}

func (s *GetBuiltInRuleInfoResponse) SetData(v *GetBuiltInRuleInfoRuleTemplate) *GetBuiltInRuleInfoResponse {
	s.Data = v
	return s
}

type GetBuiltInRuleInfoRuleTemplate struct {
	// {"en":"Template ID.", "zh_CN":"模板ID。"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Template name.", "zh_CN":"模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"
	//     Enable：The updated rules are automatically added to the template, and the rule action is automatically set to the recommended action；
	//     Disable：The updated rules are automatically added to the template, and the rule action is set to log by default.
	//     1: yes
	//     0: no", "zh_CN":"开启：更新的规则自动加入到模板中，规则动作会自动设置为建议动作；关闭：更新的规则自动加入到模板中，规则动作默认设置为监控。
	//     1：是
	//     0：否"}
	UpdateType *int32 `json:"updateType,omitempty" xml:"updateType,omitempty" require:"true"`
	// {"en":"Update time,GMT+8.", "zh_CN":"更新时间，GMT+8。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"Template description.", "zh_CN":"模板描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Rule configuration, array.", "zh_CN":"规则配置，数组。"}
	GetBuiltInRuleInfoRuleConfig []*GetBuiltInRuleInfoRuleConfig `json:"ruleConfig,omitempty" xml:"ruleConfig,omitempty" require:"true" type:"Repeated"`
}

func (s GetBuiltInRuleInfoRuleTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoRuleTemplate) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetId(v int32) *GetBuiltInRuleInfoRuleTemplate {
	s.Id = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetName(v string) *GetBuiltInRuleInfoRuleTemplate {
	s.Name = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetUpdateType(v int32) *GetBuiltInRuleInfoRuleTemplate {
	s.UpdateType = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetUpdateTime(v string) *GetBuiltInRuleInfoRuleTemplate {
	s.UpdateTime = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetMsg(v string) *GetBuiltInRuleInfoRuleTemplate {
	s.Msg = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetDomainList(v []*string) *GetBuiltInRuleInfoRuleTemplate {
	s.DomainList = v
	return s
}

func (s *GetBuiltInRuleInfoRuleTemplate) SetRuleConfig(v []*GetBuiltInRuleInfoRuleConfig) *GetBuiltInRuleInfoRuleTemplate {
	s.GetBuiltInRuleInfoRuleConfig = v
	return s
}

type GetBuiltInRuleInfoRuleConfig struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule action.
	//     0:Off
	//     1:Block
	//     2:Log", "zh_CN":"规则动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Rule description.", "zh_CN":"规则描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"The attack types are as follows,
	// 	[attackType]:[attackTypeName]
	//     RFC:Protocol compliance
	//     WAF_SQLI:SQL Injection
	//     WAF_XSS:X-Site Scripting
	//     WAF_RFI:File Inclusion
	//     WAF_DIR_TRAVERSAL:Directory Traversal
	//     WAF_SHELL_BACKDOOR:Webshell Uploading
	//     WAF_SERVER_ERROR_LEAKAGE:Server Sensitive Info Leakage
	//     WAF_FILE_UPLOAD:File Uploading
	//     WAF_CMDI:Command Injection
	//     WAF_XPATH_LDAP_SSI:XPATH/LADP/SSI Injection
	//     WAF_SCANNER:Malicious Scan
	//     WAF_FILE_DOWNLOAD:Unauthorized Download
	//     WAF_THIRDCOMP:3rd Party Component Exploit
	//     WAF_XXE:XML Injection
	//     WAF_SSRF:Server-side Request Forge", "zh_CN":"攻击类型如下，
	// 	[攻击类型]:[攻击类型名称]
	//     RFC：协议合规
	//     WAF_SQLI：SQL注入
	//     WAF_XSS：XSS跨站
	//     WAF_RFI：文件包含
	//     WAF_DIR_TRAVERSAL：目录遍历
	//     WAF_SHELL_BACKDOOR：木马后门
	//     WAF_SERVER_ERROR_LEAKAGE：服务器信息泄漏
	//     WAF_FILE_UPLOAD：文件上传
	//     WAF_CMDI：命令注入
	//     WAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入
	//     WAF_SCANNER：扫描器
	//     WAF_FILE_DOWNLOAD：非法下载
	//     WAF_THIRDCOMP：第三方组件漏洞
	//     WAF_XXE：XML注入
	//     WAF_SSRF：服务端请求伪造"}
	AttackType *string `json:"attackType,omitempty" xml:"attackType,omitempty" require:"true"`
	// {"en":"Please see description of attacktype.", "zh_CN":"攻击类型名称，详见attackType的描述。"}
	AttackTypeName *string `json:"attackTypeName,omitempty" xml:"attackTypeName,omitempty" require:"true"`
	// {"en":"The rules of RFC can be customized by the config configuration. If left blank, the default configuration will be used, detailed configuration instructions are as follows:
	//
	// The config configuration of each rule for RFC is as follows:
	// rule ID：7500    rule name：header_miss
	// configurable options：Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	// example config configuration：
	// {
	//   \"header_miss\": [
	//     \"Accept\",
	//     \"Accept-Encoding\"
	//   ]
	// }
	//
	// rule ID：7502    rule name：uncommon_request_method
	// configurable options：HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	// example config configuration：
	// {
	//   \"method\": [
	//     \"CONNECT\",
	//     \"PROPFIND\",
	//     \"PUT\"
	//   ]
	// }
	//
	// rule ID：7503    rule name：uncommon_protocol
	// configurable options：1.0, 1.1, 2.0 and customized http version, ，Set protocol_other to 1 if you want to restrict all versions except HTTP1.0, HTTP1.1, HTTP2.0.
	// 1.0：HTTP1.0
	// 1.1：HTTP1.1
	// 2.0：HTTP2.0
	// example config configuration：
	// {
	//   \"protocol\": [
	//     \"1.0\",
	//     \"1.1\",
	//     \"2.0\",
	//     \"3.0\"
	//   ],
	//   \"protocol_other\": 1
	// }
	//
	// rule ID：7600    rule name：big_request_line
	// required fields, Three types of units are available（B,KB,MB）.
	//     uri_len: Maximum length of URI（default: 4096B），
	// example config configuration：
	// {
	//   \"header_restrict\": {
	//     \"uri_len\": \"4096KB\"
	//   }
	// }
	//
	// rule ID：7601    rule name：big_header_line
	// required fields，Three types of units are available（B,KB,MB,The default unit is B）).
	//     header_name_len: Maximum length of HTTP header field name（default: 64B）,
	//     header_value_len: Maximum length of HTTP header field value（default: 4096B），
	//     user_agent_len: Maximum length of User-Agent（default: 1024B），
	//     referer_len: Maximum length of Referer（default: 4096B），
	//     accept_len: Maximum length of Accept（default: 1024B），
	//     accept_charset_len: Maximum length of Accept-Charset（default: 128B），
	//     cookie_len: Maximum length of Cookie（default: 8192B）
	// example config configuration：
	// {
	//   \"header_restrict\": {
	//     \"cookie_len\": \"8192\",
	//     \"header_name_len\": \"64\",
	//     \"accept_len\": \"1024\",
	//     \"referer_len\": \"4096\",
	//     \"header_value_len\": \"4096\",
	//     \"accept_charset_len\": \"128MB\",
	//     \"user_agent_len\": \"1024KB\"
	//   }
	// }
	//
	// rule ID：7603    rule name：big_headers_num
	// required fields:
	//     header_num: Maximum length of HTTP header field（default: 50）
	// example config configuration：
	// {
	//   \"header_restrict\": {
	//     \"header_num\": \"50\"
	//   }
	// }
	//
	// rule ID：7605    rule name：big_body_num
	// required fields：
	//     body_param_num: Limit on the number of body parameters（default: 0）
	// example config configuration：
	// {
	//   \"body_param_num\": \"2\"
	// }","zh_CN":"归属协议攻击类型的规则可以自定义config配置,config置空将采用默认配置，具体配置说明如下：
	// 规则ID：7500    规则名称：header_miss
	// 配置项说明：Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	// config配置示例：
	// {
	//   \"header_miss\": [
	//     \"Accept\",
	//     \"Accept-Encoding\"
	//   ]
	// }
	//
	// 规则ID：7502    规则名称：uncommon_request_method
	// 配置项说明：HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	// config配置示例：
	// {
	//   \"method\": [
	//     \"CONNECT\",
	//     \"PROPFIND\",
	//     \"PUT\"
	//   ]
	// }
	//
	// 规则ID：7503    规则名称：uncommon_protocol
	// 配置项说明：1.0, 1.1, 2.0, 及自定义版本，要限制除了HTTP1.0，HTTP1.1，HTTP2.0以外的所有版本请将protocol_other的值配置为1
	// 1.0：HTTP1.0
	// 1.1：HTTP1.1
	// 2.0：HTTP2.0
	// config配置示例：
	// {
	//   \"protocol\": [
	//     \"1.0\",
	//     \"1.1\",
	//     \"2.0\",
	//     \"3.0\"
	//   ],
	//   \"protocol_other\": 1
	// }
	//
	// 规则ID：7600    规则名称：big_request_line
	// 配置项说明：
	// uri_len：URI最大长度（默认值4096B），单位可选（B,KB,MB）
	// config配置示例：
	// {
	//   \"header_restrict\": {
	//     \"uri_len\": \"4096KB\"
	//   }
	// }
	//
	// 规则ID：7601    规则名称：big_header_line
	// 配置项说明，单位可选（B,KB,MB,默认B）：
	//     header_name_len：请求头部参数名最大长度（默认值64B）,
	//     header_value_len：请求头部参数值最大长度（默认值4096B），
	//     user_agent_len：User-Agent最大长度（默认值1024B），
	//     referer_len：Referer最大长度（默认值4096B），
	//     accept_len：Accept最大长度（默认值1024B），
	//     accept_charset_len：Accept-Charset最大长度（默认值128B），
	//     cookie_len：Cookie最大长度（默认值8192B）
	// config配置示例（不带单位默认单位为B）：
	// {
	//   \"header_restrict\": {
	//     \"cookie_len\": \"8192\",
	//     \"header_name_len\": \"64\",
	//     \"accept_len\": \"1024\",
	//     \"referer_len\": \"4096\",
	//     \"header_value_len\": \"4096\",
	//     \"accept_charset_len\": \"128MB\",
	//     \"user_agent_len\": \"1024KB\"
	//   }
	// }
	//
	// 规则ID：7603    规则名称：big_headers_num
	// 配置项说明:
	// header_num：请求头部参数最大个数（默认值50）
	// config配置示例：
	// {
	//   \"header_restrict\": {
	//     \"header_num\": \"50\"
	//   }
	// }
	//
	// 规则ID：7605    规则名称：big_body_num
	// 配置项说明：
	// body_param_num：Body参数个数限制（默认值0）
	// config配置示例：
	// {
	//   \"body_param_num\": \"2\"
	// }"}
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s GetBuiltInRuleInfoRuleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoRuleConfig) GoString() string {
	return s.String()
}

func (s *GetBuiltInRuleInfoRuleConfig) SetRuleId(v int32) *GetBuiltInRuleInfoRuleConfig {
	s.RuleId = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetRuleName(v string) *GetBuiltInRuleInfoRuleConfig {
	s.RuleName = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetMode(v int32) *GetBuiltInRuleInfoRuleConfig {
	s.Mode = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetMsg(v string) *GetBuiltInRuleInfoRuleConfig {
	s.Msg = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetAttackType(v string) *GetBuiltInRuleInfoRuleConfig {
	s.AttackType = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetAttackTypeName(v string) *GetBuiltInRuleInfoRuleConfig {
	s.AttackTypeName = &v
	return s
}

func (s *GetBuiltInRuleInfoRuleConfig) SetConfig(v string) *GetBuiltInRuleInfoRuleConfig {
	s.Config = &v
	return s
}

type GetBuiltInRuleInfoPaths struct {
}

func (s GetBuiltInRuleInfoPaths) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoPaths) GoString() string {
	return s.String()
}

type GetBuiltInRuleInfoParameters struct {
}

func (s GetBuiltInRuleInfoParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoParameters) GoString() string {
	return s.String()
}

type GetBuiltInRuleInfoRequestHeader struct {
}

func (s GetBuiltInRuleInfoRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoRequestHeader) GoString() string {
	return s.String()
}

type GetBuiltInRuleInfoResponseHeader struct {
}

func (s GetBuiltInRuleInfoResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBuiltInRuleInfoResponseHeader) GoString() string {
	return s.String()
}

type QueryCaptchaVerificationRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s QueryCaptchaVerificationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationRequest) GoString() string {
	return s.String()
}

func (s *QueryCaptchaVerificationRequest) SetDomain(v string) *QueryCaptchaVerificationRequest {
	s.Domain = &v
	return s
}

type QueryCaptchaVerificationResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"QueryCaptchaVerificationData returned.", "zh_CN":"返回数据。"}
	QueryCaptchaVerificationData *QueryCaptchaVerificationData `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryCaptchaVerificationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationResponse) GoString() string {
	return s.String()
}

func (s *QueryCaptchaVerificationResponse) SetCode(v string) *QueryCaptchaVerificationResponse {
	s.Code = &v
	return s
}

func (s *QueryCaptchaVerificationResponse) SetMessage(v string) *QueryCaptchaVerificationResponse {
	s.Message = &v
	return s
}

func (s *QueryCaptchaVerificationResponse) SetData(v *QueryCaptchaVerificationData) *QueryCaptchaVerificationResponse {
	s.QueryCaptchaVerificationData = v
	return s
}

type QueryCaptchaVerificationData struct {
	// {"en":"CAPTCHA verification.", "zh_CN":"验证码校验。"}
	Edgebot_captcha_challenge *QueryCaptchaVerificationCaptcha `json:"edgebot_captcha_challenge,omitempty" xml:"edgebot_captcha_challenge,omitempty" require:"true"`
}

func (s QueryCaptchaVerificationData) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationData) GoString() string {
	return s.String()
}

func (s *QueryCaptchaVerificationData) SetEdgebot_captcha_challenge(v *QueryCaptchaVerificationCaptcha) *QueryCaptchaVerificationData {
	s.Edgebot_captcha_challenge = v
	return s
}

type QueryCaptchaVerificationCaptcha struct {
	// {"en":"Switch for CAPTCHA verification.
	//  0:OFF
	//  1:ON", "zh_CN":"验证码校验开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Verification code refresh frequency.", "zh_CN":"验证码刷新频率。"}
	Captcha_expire_time *int `json:"captcha_expire_time,omitempty" xml:"captcha_expire_time,omitempty" require:"true"`
	// {"en":"Verification object.
	//  0:IP
	//  1:IP&UA
	//  2:User fingerprint", "zh_CN":"校验对象。
	//  0：IP
	//  1：IP&UA
	//  2：用户指纹"}
	Protection_type *int `json:"protection_type,omitempty" xml:"protection_type,omitempty" require:"true"`
	// {"en":"Abnormal handling cycle.Unit: s", "zh_CN":"异常处置周期。单位：秒"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Number of validation failures.", "zh_CN":"验证失败次数。"}
	Trigger_threshold *int `json:"trigger_threshold,omitempty" xml:"trigger_threshold,omitempty" require:"true"`
	// {"en":"Interception duration. Unit: s", "zh_CN":"拦截时长。单位：秒"}
	Intercept_time *int `json:"intercept_time,omitempty" xml:"intercept_time,omitempty" require:"true"`
	// {"en":"Verification frequency.", "zh_CN":"验证频率。"}
	Accept_time *int `json:"accept_time,omitempty" xml:"accept_time,omitempty" require:"true"`
	// {"en":"Verification path.", "zh_CN":"校验路径。"}
	Ca_rows []*QueryCaptchaVerificationCaRows `json:"ca_rows,omitempty" xml:"ca_rows,omitempty" require:"true" type:"Repeated"`
}

func (s QueryCaptchaVerificationCaptcha) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationCaptcha) GoString() string {
	return s.String()
}

func (s *QueryCaptchaVerificationCaptcha) SetEnable(v int) *QueryCaptchaVerificationCaptcha {
	s.Enable = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetCaptcha_expire_time(v int) *QueryCaptchaVerificationCaptcha {
	s.Captcha_expire_time = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetProtection_type(v int) *QueryCaptchaVerificationCaptcha {
	s.Protection_type = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetStatistical_period(v int) *QueryCaptchaVerificationCaptcha {
	s.Statistical_period = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetTrigger_threshold(v int) *QueryCaptchaVerificationCaptcha {
	s.Trigger_threshold = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetIntercept_time(v int) *QueryCaptchaVerificationCaptcha {
	s.Intercept_time = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetAccept_time(v int) *QueryCaptchaVerificationCaptcha {
	s.Accept_time = &v
	return s
}

func (s *QueryCaptchaVerificationCaptcha) SetCa_rows(v []*QueryCaptchaVerificationCaRows) *QueryCaptchaVerificationCaptcha {
	s.Ca_rows = v
	return s
}

type QueryCaptchaVerificationCaRows struct {
	// {"en":"Verification URL.", "zh_CN":"校验路径。"}
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// {"en":"Request method. Only GET is supported.
	//  3:GET", "zh_CN":"请求方法。仅支持GET。
	//  3：GET"}
	Scope *int `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
}

func (s QueryCaptchaVerificationCaRows) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationCaRows) GoString() string {
	return s.String()
}

func (s *QueryCaptchaVerificationCaRows) SetUrl(v string) *QueryCaptchaVerificationCaRows {
	s.Url = &v
	return s
}

func (s *QueryCaptchaVerificationCaRows) SetScope(v int) *QueryCaptchaVerificationCaRows {
	s.Scope = &v
	return s
}

type QueryCaptchaVerificationPaths struct {
}

func (s QueryCaptchaVerificationPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationPaths) GoString() string {
	return s.String()
}

type QueryCaptchaVerificationParameters struct {
}

func (s QueryCaptchaVerificationParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationParameters) GoString() string {
	return s.String()
}

type QueryCaptchaVerificationRequestHeader struct {
}

func (s QueryCaptchaVerificationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationRequestHeader) GoString() string {
	return s.String()
}

type QueryCaptchaVerificationResponseHeader struct {
}

func (s QueryCaptchaVerificationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryCaptchaVerificationResponseHeader) GoString() string {
	return s.String()
}

type ListUaBotsRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s ListUaBotsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsRequest) GoString() string {
	return s.String()
}

func (s *ListUaBotsRequest) SetDomain(v string) *ListUaBotsRequest {
	s.Domain = &v
	return s
}

type ListUaBotsResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Data.', 'zh_CN':'出参数据。'}
	Data []*ListUaBotsBotUaBotsReturnVO `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListUaBotsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsResponse) GoString() string {
	return s.String()
}

func (s *ListUaBotsResponse) SetCode(v string) *ListUaBotsResponse {
	s.Code = &v
	return s
}

func (s *ListUaBotsResponse) SetMsg(v string) *ListUaBotsResponse {
	s.Msg = &v
	return s
}

func (s *ListUaBotsResponse) SetData(v []*ListUaBotsBotUaBotsReturnVO) *ListUaBotsResponse {
	s.Data = v
	return s
}

type ListUaBotsBotUaBotsReturnVO struct {
	// {'en':'Primary key id.', 'zh_CN':'主键id。'}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {'en':'User-Agent based detection category.
	//  auto_version: Automated Tools
	//  crawler_version: Crawler Tools
	//  df_version: Development Framework
	//  http_version: HTTP Library
	//  low_version: Low Version User-Agent
	//  scanner_version: Scanner
	//  wz_version: Fake User-Agent', 'zh_CN':'UA特征检测类别。
	//  auto_version：自动化工具
	//  crawler_version：爬虫工具
	//  df_version：开发框架
	//  http_version：HTTP库
	//  low_version：低版本UA
	//  scanner_version：扫描器
	//  wz_version：伪造UA'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty" require:"true"`
	// {'en':'Actions.
	// NO_USE: not used
	// BLOCK: block
	// LOG: log
	// ACCEPT: release', 'zh_CN':'处理动作。
	// NO_USE：不使用
	// BLOCK：拦截
	// LOG：监控
	// ACCEPT：放行'}
	BotAct *string `json:"botAct,omitempty" xml:"botAct,omitempty" require:"true"`
	// {'en':'Specific Bot information.', 'zh_CN':'具体的Bot信息。'}
	BotNameInfoList []*ListUaBotsBotNameInfoVO `json:"botNameInfoList,omitempty" xml:"botNameInfoList,omitempty" require:"true" type:"Repeated"`
}

func (s ListUaBotsBotUaBotsReturnVO) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsBotUaBotsReturnVO) GoString() string {
	return s.String()
}

func (s *ListUaBotsBotUaBotsReturnVO) SetId(v string) *ListUaBotsBotUaBotsReturnVO {
	s.Id = &v
	return s
}

func (s *ListUaBotsBotUaBotsReturnVO) SetBotCategory(v string) *ListUaBotsBotUaBotsReturnVO {
	s.BotCategory = &v
	return s
}

func (s *ListUaBotsBotUaBotsReturnVO) SetBotAct(v string) *ListUaBotsBotUaBotsReturnVO {
	s.BotAct = &v
	return s
}

func (s *ListUaBotsBotUaBotsReturnVO) SetBotNameInfoList(v []*ListUaBotsBotNameInfoVO) *ListUaBotsBotUaBotsReturnVO {
	s.BotNameInfoList = v
	return s
}

type ListUaBotsBotNameInfoVO struct {
	// {'en':'Bot name(Please refer to the documentation: UA Bot Dictionary).', 'zh_CN':'Bot名称（请参照说明文档：UA Bot字典）。'}
	BotName *string `json:"botName,omitempty" xml:"botName,omitempty" require:"true"`
	// {'en':'effective.
	// true:Yes
	// false:No', 'zh_CN':'是否生效。
	// true：是
	// false：否'}
	Effective *bool `json:"effective,omitempty" xml:"effective,omitempty" require:"true"`
}

func (s ListUaBotsBotNameInfoVO) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsBotNameInfoVO) GoString() string {
	return s.String()
}

func (s *ListUaBotsBotNameInfoVO) SetBotName(v string) *ListUaBotsBotNameInfoVO {
	s.BotName = &v
	return s
}

func (s *ListUaBotsBotNameInfoVO) SetEffective(v bool) *ListUaBotsBotNameInfoVO {
	s.Effective = &v
	return s
}

type ListUaBotsPaths struct {
}

func (s ListUaBotsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsPaths) GoString() string {
	return s.String()
}

type ListUaBotsParameters struct {
}

func (s ListUaBotsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsParameters) GoString() string {
	return s.String()
}

type ListUaBotsRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListUaBotsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListUaBotsRequestHeader) SetServiceType(v string) *ListUaBotsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListUaBotsResponseHeader struct {
}

func (s ListUaBotsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListUaBotsResponseHeader) GoString() string {
	return s.String()
}

type CreateCustomRuleRequest struct {
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Off
	//     1: Block
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Regular expressions.", "zh_CN":"正则表达式。"}
	RuleReg *string `json:"ruleReg,omitempty" xml:"ruleReg,omitempty" require:"true"`
	// {"en":"Rule description, cannot exceed 200 characters.", "zh_CN":"规则描述，长度不能超过200个字符。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Matching area,array,
	//     url:URL(without param)
	//     urlParam:URL Param
	//     headers:Headers
	//     body:Body
	//     response:Response
	//     fileExt:Upload File Extension
	//     fileContent:Upload File Content", "zh_CN":"匹配区域，数组，
	//     url：URL（不含参数）
	//     urlParam：URL参数
	//     headers：请求头
	//     body：请求体
	//     response：响应体
	//     fileExt：上传文件后缀
	//     fileContent：上传文件内容"}
	MatchZoneMerge []*string `json:"matchZoneMerge,omitempty" xml:"matchZoneMerge,omitempty" require:"true" type:"Repeated"`
	// {"en":"Status codek,English half width comma splicing,Required when the matching area contains response,2:2xx, 3:3xx, 4:4xx, 5:5xx.", "zh_CN":"状态码，英文半角逗号分隔，匹配区域包含response时必填,2:2xx, 3:3xx, 4:4xx, 5:5xx"}
	StatusCode *string `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s CreateCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomRuleRequest) SetRuleName(v string) *CreateCustomRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateCustomRuleRequest) SetMode(v int32) *CreateCustomRuleRequest {
	s.Mode = &v
	return s
}

func (s *CreateCustomRuleRequest) SetRuleReg(v string) *CreateCustomRuleRequest {
	s.RuleReg = &v
	return s
}

func (s *CreateCustomRuleRequest) SetMsg(v string) *CreateCustomRuleRequest {
	s.Msg = &v
	return s
}

func (s *CreateCustomRuleRequest) SetMatchZoneMerge(v []*string) *CreateCustomRuleRequest {
	s.MatchZoneMerge = v
	return s
}

func (s *CreateCustomRuleRequest) SetStatusCode(v string) *CreateCustomRuleRequest {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomRuleRequest) SetDomainList(v []*string) *CreateCustomRuleRequest {
	s.DomainList = v
	return s
}

type CreateCustomRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Return data.", "zh_CN":"返回值。"}
	Data *CreateCustomRuleCustomRule `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomRuleResponse) SetCode(v string) *CreateCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateCustomRuleResponse) SetMessage(v string) *CreateCustomRuleResponse {
	s.Message = &v
	return s
}

func (s *CreateCustomRuleResponse) SetData(v *CreateCustomRuleCustomRule) *CreateCustomRuleResponse {
	s.Data = v
	return s
}

type CreateCustomRuleCustomRule struct {
	// {"en":"Rule ID", "zh_CN":"规则ID"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule name", "zh_CN":"规则名称"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
}

func (s CreateCustomRuleCustomRule) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleCustomRule) GoString() string {
	return s.String()
}

func (s *CreateCustomRuleCustomRule) SetRuleId(v int32) *CreateCustomRuleCustomRule {
	s.RuleId = &v
	return s
}

func (s *CreateCustomRuleCustomRule) SetRuleName(v string) *CreateCustomRuleCustomRule {
	s.RuleName = &v
	return s
}

type CreateCustomRulePaths struct {
}

func (s CreateCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRulePaths) GoString() string {
	return s.String()
}

type CreateCustomRuleParameters struct {
}

func (s CreateCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleParameters) GoString() string {
	return s.String()
}

type CreateCustomRuleRequestHeader struct {
}

func (s CreateCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleRequestHeader) GoString() string {
	return s.String()
}

type CreateCustomRuleResponseHeader struct {
}

func (s CreateCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type CreateConcurrencyLimitRuleRequest struct {
	// {"en":"Control action,default value: INTERCEPT.
	// INTERCEPT:Block
	// MONITOR:Log", "zh_CN":"控制动作。
	// INTERCEPT：拦截
	// MONITOR：监控"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty" require:"true"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *string `json:"limitDuration,omitempty" xml:"limitDuration,omitempty" require:"true"`
	// {"en":"Detailing unit,default value:s.
	// s:Second
	// m:Minute.", "zh_CN":"时长单位，默认值：s。
	// s：秒
	// m：分。"}
	LimitUnit *string `json:"limitUnit,omitempty" xml:"limitUnit,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty" require:"true"`
	// {"en":"Note.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"API current limiting threshold.", "zh_CN":"API限流阈值。"}
	ThresholdValue *string `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty" require:"true"`
}

func (s CreateConcurrencyLimitRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateConcurrencyLimitRuleRequest) SetControlAction(v string) *CreateConcurrencyLimitRuleRequest {
	s.ControlAction = &v
	return s
}

func (s *CreateConcurrencyLimitRuleRequest) SetLimitDuration(v string) *CreateConcurrencyLimitRuleRequest {
	s.LimitDuration = &v
	return s
}

func (s *CreateConcurrencyLimitRuleRequest) SetLimitUnit(v string) *CreateConcurrencyLimitRuleRequest {
	s.LimitUnit = &v
	return s
}

func (s *CreateConcurrencyLimitRuleRequest) SetPolicyName(v string) *CreateConcurrencyLimitRuleRequest {
	s.PolicyName = &v
	return s
}

func (s *CreateConcurrencyLimitRuleRequest) SetRemark(v string) *CreateConcurrencyLimitRuleRequest {
	s.Remark = &v
	return s
}

func (s *CreateConcurrencyLimitRuleRequest) SetThresholdValue(v string) *CreateConcurrencyLimitRuleRequest {
	s.ThresholdValue = &v
	return s
}

type CreateConcurrencyLimitRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateConcurrencyLimitRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateConcurrencyLimitRuleResponse) SetCode(v int) *CreateConcurrencyLimitRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateConcurrencyLimitRuleResponse) SetMsg(v string) *CreateConcurrencyLimitRuleResponse {
	s.Msg = &v
	return s
}

func (s *CreateConcurrencyLimitRuleResponse) SetData(v map[string]interface{}) *CreateConcurrencyLimitRuleResponse {
	s.Data = v
	return s
}

type CreateConcurrencyLimitRulePaths struct {
}

func (s CreateConcurrencyLimitRulePaths) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRulePaths) GoString() string {
	return s.String()
}

type CreateConcurrencyLimitRuleParameters struct {
}

func (s CreateConcurrencyLimitRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRuleParameters) GoString() string {
	return s.String()
}

type CreateConcurrencyLimitRuleRequestHeader struct {
}

func (s CreateConcurrencyLimitRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRuleRequestHeader) GoString() string {
	return s.String()
}

type CreateConcurrencyLimitRuleResponseHeader struct {
}

func (s CreateConcurrencyLimitRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateConcurrencyLimitRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateBuiltInRuleRequest struct {
	// {"en":"The name of the rule template which the configuration to be modified.", "zh_CN":"要进行配置修改的规则模板的模板名称。"}
	RuleTemplateName *string `json:"ruleTemplateName,omitempty" xml:"ruleTemplateName,omitempty" require:"true"`
	// {"en":"New template name.", "zh_CN":"新的模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"
	//     Enable: The updated rules are automatically added to the template, and the rule action is automatically set to the recommended action;
	//     Disable: The updated rules are automatically added to the template, and the rule action is set to log by default.
	//     1: yes
	//     0: no.", "zh_CN":"
	//     开启：更新的规则自动加入到模板中，规则动作会自动设置为建议动作；
	//     关闭：更新的规则自动加入到模板中，规则动作默认设置为监控。
	//     1：是
	//     0：否。"}
	UpdateType *int32 `json:"updateType,omitempty" xml:"updateType,omitempty" require:"true"`
	// {"en":"Template description.", "zh_CN":"模板描述。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Have to change the rule configurationn, array.", "zh_CN":"要变更规则配置，数组。"}
	UpdateBuiltInRuleRuleConfig []*UpdateBuiltInRuleRuleConfig `json:"ruleConfig,omitempty" xml:"ruleConfig,omitempty" type:"Repeated"`
}

func (s UpdateBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateBuiltInRuleRequest) SetRuleTemplateName(v string) *UpdateBuiltInRuleRequest {
	s.RuleTemplateName = &v
	return s
}

func (s *UpdateBuiltInRuleRequest) SetName(v string) *UpdateBuiltInRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateBuiltInRuleRequest) SetUpdateType(v int32) *UpdateBuiltInRuleRequest {
	s.UpdateType = &v
	return s
}

func (s *UpdateBuiltInRuleRequest) SetMsg(v string) *UpdateBuiltInRuleRequest {
	s.Msg = &v
	return s
}

func (s *UpdateBuiltInRuleRequest) SetRuleConfig(v []*UpdateBuiltInRuleRuleConfig) *UpdateBuiltInRuleRequest {
	s.UpdateBuiltInRuleRuleConfig = v
	return s
}

type UpdateBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s UpdateBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateBuiltInRuleResponse) SetCode(v string) *UpdateBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateBuiltInRuleResponse) SetMessage(v string) *UpdateBuiltInRuleResponse {
	s.Message = &v
	return s
}

type UpdateBuiltInRuleRuleConfig struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	RuleId *int32 `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Off
	//     1: Block
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：关闭
	//     1：拦截
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"The rules of RFC can be customized by the config configuration. If left blank, the default configuration will be used, detailed configuration instructions are as follows:
	//
	//     The config configuration of each rule for RFC is as follows:
	//     rule ID: 7500    rule name: header_miss
	//     configurable options: Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	//     example config configuration:
	//     {
	//       \"header_miss\": [
	//         \"Accept\",
	//         \"Accept-Encoding\"
	//       ]
	//     }
	//
	//     rule ID: 7502    rule name: uncommon_request_method
	//     configurable options: HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	//     example config configuration:
	//     {
	//       \"method\": [
	//         \"CONNECT\",
	//         \"PROPFIND\",
	//         \"PUT\"
	//       ]
	//     }
	//
	//     rule ID: 7503    rule name: uncommon_protocol
	//     configurable options: 1.0, 1.1, 2.0 and customized http version, Set protocol_other to 1 if you want to restrict all versions except HTTP1.0, HTTP1.1, HTTP2.0.
	//     1.0: HTTP1.0
	//     1.1: HTTP1.1
	//     2.0: HTTP2.0
	//     example config configuration:
	//     {
	//       \"protocol\": [
	//         \"1.0\",
	//         \"1.1\",
	//         \"2.0\",
	//         \"3.0\"
	//       ],
	//       \"protocol_other\": 1
	//     }
	//
	//     rule ID: 7600    rule name: big_request_line
	//     required fields, Three types of units are available (B,KB,MB).
	//         uri_len: Maximum length of URI(default: 4096B)
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"uri_len\": \"4096KB\"
	//       }
	//     }
	//
	//     rule ID: 7601    rule name: big_header_line
	//     required fields, Three types of units are available(B,KB,MB,The default unit is B).
	//         header_name_len: Maximum length of HTTP header field name(default: 64B),
	//         header_value_len: Maximum length of HTTP header field value(default: 4096B),
	//         user_agent_len: Maximum length of User-Agent(default: 1024B),
	//         referer_len: Maximum length of Referer(default: 4096B),
	//         accept_len: Maximum length of Accept(default: 1024B),
	//         accept_charset_len: Maximum length of Accept-Charset(default: 128B),
	//         cookie_len: Maximum length of Cookie(default: 8192B)
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"cookie_len\": \"8192\",
	//         \"header_name_len\": \"64\",
	//         \"accept_len\": \"1024\",
	//         \"referer_len\": \"4096\",
	//         \"header_value_len\": \"4096\",
	//         \"accept_charset_len\": \"128MB\",
	//         \"user_agent_len\": \"1024KB\"
	//       }
	//     }
	//
	//     rule ID: 7603    rule name: big_headers_num
	//     required fields:
	//         header_num: Maximum length of HTTP header field(default: 50)
	//     example config configuration:
	//     {
	//       \"header_restrict\": {
	//         \"header_num\": \"50\"
	//       }
	//     }
	//
	//     rule ID: 7605    rule name: big_body_num
	//     required fields:
	//         body_param_num: Limit on the number of body parameters(default: 0)
	//     example config configuration:
	//     {
	//       \"body_param_num\": \"2\"
	//     }","zh_CN":"归属协议攻击类型的规则可以自定义config配置,config置空将采用默认配置,具体配置说明如下:
	//     规则ID: 7500    规则名称: header_miss
	//     配置项说明: Host, User-Agent, Accept, Accept-Language, Accept-Encoding
	//     config配置示例:
	//     {
	//       \"header_miss\": [
	//         \"Accept\",
	//         \"Accept-Encoding\"
	//       ]
	//     }
	//
	//     规则ID: 7502    规则名称: uncommon_request_method
	//     配置项说明: HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH, PROPFIND, MKCOL, COPY, MOVE, LOCK, UNLOCK
	//     config配置示例:
	//     {
	//       \"method\": [
	//         \"CONNECT\",
	//         \"PROPFIND\",
	//         \"PUT\"
	//       ]
	//     }
	//
	//     规则ID: 7503    规则名称: uncommon_protocol
	//     配置项说明: 1.0, 1.1, 2.0, 及自定义版本,要限制除了HTTP1.0,HTTP1.1,HTTP2.0以外的所有版本请将protocol_other的值配置为1
	//     1.0: HTTP1.0
	//     1.1: HTTP1.1
	//     2.0: HTTP2.0
	//     config配置示例:
	//     {
	//       \"protocol\": [
	//         \"1.0\",
	//         \"1.1\",
	//         \"2.0\",
	//         \"3.0\"
	//       ],
	//       \"protocol_other\": 1
	//     }
	//
	//     规则ID: 7600    规则名称: big_request_line
	//     配置项说明:
	//     uri_len: URI最大长度 (默认值4096B),单位可选 (B,KB,MB)
	//     config配置示例:
	//     {
	//       \"header_restrict\": {
	//         \"uri_len\": \"4096KB\"
	//       }
	//     }
	//
	//     规则ID: 7601    规则名称: big_header_line
	//     配置项说明,单位可选 (B,KB,MB,默认B):
	//         header_name_len: 请求头部参数名最大长度 (默认值64B),
	//         header_value_len: 请求头部参数值最大长度 (默认值4096B),
	//         user_agent_len: User-Agent最大长度 (默认值1024B),
	//         referer_len: Referer最大长度 (默认值4096B),
	//         accept_len: Accept最大长度 (默认值1024B),
	//         accept_charset_len: Accept-Charset最大长度 (默认值128B),
	//         cookie_len: Cookie最大长度 (默认值8192B)
	//     config配置示例 (不带单位默认单位为B):
	//     {
	//       \"header_restrict\": {
	//         \"cookie_len\": \"8192\",
	//         \"header_name_len\": \"64\",
	//         \"accept_len\": \"1024\",
	//         \"referer_len\": \"4096\",
	//         \"header_value_len\": \"4096\",
	//         \"accept_charset_len\": \"128MB\",
	//         \"user_agent_len\": \"1024KB\"
	//       }
	//     }
	//
	//     规则ID: 7603    规则名称: big_headers_num
	//     配置项说明:
	//     header_num: 请求头部参数最大个数 (默认值50)
	//     config配置示例:
	//     {
	//       \"header_restrict\": {
	//         \"header_num\": \"50\"
	//       }
	//     }
	//
	//     规则ID: 7605    规则名称: big_body_num
	//     配置项说明：
	//     body_param_num: Body参数个数限制 (默认值0)
	//     config配置示例:
	//     {
	//       \"body_param_num\": \"2\"
	//     }"}
	Config *string `json:"config,omitempty" xml:"config,omitempty"`
}

func (s UpdateBuiltInRuleRuleConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleRuleConfig) GoString() string {
	return s.String()
}

func (s *UpdateBuiltInRuleRuleConfig) SetRuleId(v int32) *UpdateBuiltInRuleRuleConfig {
	s.RuleId = &v
	return s
}

func (s *UpdateBuiltInRuleRuleConfig) SetMode(v int32) *UpdateBuiltInRuleRuleConfig {
	s.Mode = &v
	return s
}

func (s *UpdateBuiltInRuleRuleConfig) SetConfig(v string) *UpdateBuiltInRuleRuleConfig {
	s.Config = &v
	return s
}

type UpdateBuiltInRulePaths struct {
}

func (s UpdateBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRulePaths) GoString() string {
	return s.String()
}

type UpdateBuiltInRuleParameters struct {
}

func (s UpdateBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleParameters) GoString() string {
	return s.String()
}

type UpdateBuiltInRuleRequestHeader struct {
}

func (s UpdateBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type UpdateBuiltInRuleResponseHeader struct {
}

func (s UpdateBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type ModifyPolicyStatusRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Bot management switch.\nON: Enabled\nOFF: Disabled","zh_CN":"Bot管理开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BotManageSwitch *string `json:"botManageSwitch,omitempty" xml:"botManageSwitch,omitempty"`
	// {"en":"Custom rules switch.\nON: Enabled\nOFF: Disabled","zh_CN":"自定义规则开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	CustomizeRuleSwitch *string `json:"customizeRuleSwitch,omitempty" xml:"customizeRuleSwitch,omitempty"`
	// {"en":"IP/Geo blocking switch.\nON: Enabled\nOFF: Disabled","zh_CN":"IP/区域封禁开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	BlockSwitch *string `json:"blockSwitch,omitempty" xml:"blockSwitch,omitempty"`
	// {"en":"Rate limiting switch.\nON: Enabled\nOFF: Disabled","zh_CN":"频率限制开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	RateLimitSwitch *string `json:"rateLimitSwitch,omitempty" xml:"rateLimitSwitch,omitempty"`
	// {"en":"Whitelist switch.\nON: Enabled\nOFF: Disabled","zh_CN":"白名单开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WhitelistSwitch *string `json:"whitelistSwitch,omitempty" xml:"whitelistSwitch,omitempty"`
	// {"en":"API security switch.\nON: Enabled\nOFF: Disabled","zh_CN":"API安全开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	ApiDefendSwitch *string `json:"apiDefendSwitch,omitempty" xml:"apiDefendSwitch,omitempty"`
	// {"en":"DDoS protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"DDoS防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	DmsDefendSwitch *string `json:"dmsDefendSwitch,omitempty" xml:"dmsDefendSwitch,omitempty"`
	// {"en":"Threat intelligence switch.\nON: Enabled\nOFF: Disabled","zh_CN":"威胁情报开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	IntelligenceSwitch *string `json:"intelligenceSwitch,omitempty" xml:"intelligenceSwitch,omitempty"`
	// {"en":"WAF protection switch.\nON: Enabled\nOFF: Disabled","zh_CN":"WAF防护开关。\nON：开启\nOFF：关闭","exampleValue":"ON,OFF"}
	WafDefendSwitch *string `json:"wafDefendSwitch,omitempty" xml:"wafDefendSwitch,omitempty"`
}

func (s ModifyPolicyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyPolicyStatusRequest) SetDomainList(v []*string) *ModifyPolicyStatusRequest {
	s.DomainList = v
	return s
}

func (s *ModifyPolicyStatusRequest) SetBotManageSwitch(v string) *ModifyPolicyStatusRequest {
	s.BotManageSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetCustomizeRuleSwitch(v string) *ModifyPolicyStatusRequest {
	s.CustomizeRuleSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetBlockSwitch(v string) *ModifyPolicyStatusRequest {
	s.BlockSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetRateLimitSwitch(v string) *ModifyPolicyStatusRequest {
	s.RateLimitSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetWhitelistSwitch(v string) *ModifyPolicyStatusRequest {
	s.WhitelistSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetApiDefendSwitch(v string) *ModifyPolicyStatusRequest {
	s.ApiDefendSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetDmsDefendSwitch(v string) *ModifyPolicyStatusRequest {
	s.DmsDefendSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetIntelligenceSwitch(v string) *ModifyPolicyStatusRequest {
	s.IntelligenceSwitch = &v
	return s
}

func (s *ModifyPolicyStatusRequest) SetWafDefendSwitch(v string) *ModifyPolicyStatusRequest {
	s.WafDefendSwitch = &v
	return s
}

type ModifyPolicyStatusRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ModifyPolicyStatusRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusRequestHeader) GoString() string {
	return s.String()
}

func (s *ModifyPolicyStatusRequestHeader) SetServiceType(v string) *ModifyPolicyStatusRequestHeader {
	s.ServiceType = &v
	return s
}

type ModifyPolicyStatusPaths struct {
}

func (s ModifyPolicyStatusPaths) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusPaths) GoString() string {
	return s.String()
}

type ModifyPolicyStatusParameters struct {
}

func (s ModifyPolicyStatusParameters) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusParameters) GoString() string {
	return s.String()
}

type ModifyPolicyStatusResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s ModifyPolicyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyPolicyStatusResponse) SetCode(v string) *ModifyPolicyStatusResponse {
	s.Code = &v
	return s
}

func (s *ModifyPolicyStatusResponse) SetMsg(v string) *ModifyPolicyStatusResponse {
	s.Msg = &v
	return s
}

type ModifyPolicyStatusResponseHeader struct {
}

func (s ModifyPolicyStatusResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyStatusResponseHeader) GoString() string {
	return s.String()
}

type UpdateWAFScanProtectionConfigRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Scanning tool detection configuration.","zh_CN":"扫描工具检测配置。"}
	ScanToolsConfig *UpdateWAFScanProtectionConfigRequestScanToolsConfig `json:"scanToolsConfig,omitempty" xml:"scanToolsConfig,omitempty" type:"Struct"`
	// {"en":"Repeated violation detection configuration.","zh_CN":"反复违规检测配置。"}
	RepeatedViolationConfig *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig `json:"repeatedViolationConfig,omitempty" xml:"repeatedViolationConfig,omitempty" type:"Struct"`
	// {"en":"Directory probing detection configuration.","zh_CN":"目录嗅探检测配置。"}
	DirectoryProbingConfig *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig `json:"directoryProbingConfig,omitempty" xml:"directoryProbingConfig,omitempty" type:"Struct"`
}

func (s UpdateWAFScanProtectionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigRequest) SetDomainList(v []*string) *UpdateWAFScanProtectionConfigRequest {
	s.DomainList = v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequest) SetScanToolsConfig(v *UpdateWAFScanProtectionConfigRequestScanToolsConfig) *UpdateWAFScanProtectionConfigRequest {
	s.ScanToolsConfig = v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequest) SetRepeatedViolationConfig(v *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) *UpdateWAFScanProtectionConfigRequest {
	s.RepeatedViolationConfig = v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequest) SetDirectoryProbingConfig(v *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) *UpdateWAFScanProtectionConfigRequest {
	s.DirectoryProbingConfig = v
	return s
}

type UpdateWAFScanProtectionConfigRequestScanToolsConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
}

func (s UpdateWAFScanProtectionConfigRequestScanToolsConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigRequestScanToolsConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigRequestScanToolsConfig) SetAction(v string) *UpdateWAFScanProtectionConfigRequestScanToolsConfig {
	s.Action = &v
	return s
}

type UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nBLOCK：拦截。\nLOG：监控。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// {"en":"Statistical subject.\nIP: IP.\nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// {"en":"Time range, in seconds. Allowed values are from 5 to 1800.","zh_CN":"时间范围，单位秒。取值范围为 5~1800。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty"`
	// {"en":"Number of WAF built-in rule triggers.must be greater than 1.","zh_CN":"WAF内置规则触发种类数。至少一种。"}
	WafRuleTypeCount *int `json:"wafRuleTypeCount,omitempty" xml:"wafRuleTypeCount,omitempty"`
	// {"en":"Number of block actions.Allowed values are from 1 to 99999.","zh_CN":"拦截次数。取值范围为 1~99999。"}
	BlockCount *int `json:"blockCount,omitempty" xml:"blockCount,omitempty"`
	// {"en":"Action duration, in seconds.Allowed values are from 10 to 604800.","zh_CN":"处理动作持续时间，单位秒。取值范围为 10~604800。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty"`
}

func (s UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetAction(v string) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.Action = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetTarget(v string) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.Target = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetPeriod(v int) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.Period = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetWafRuleTypeCount(v int) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.WafRuleTypeCount = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetBlockCount(v int) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.BlockCount = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig) SetDuration(v int) *UpdateWAFScanProtectionConfigRequestRepeatedViolationConfig {
	s.Duration = &v
	return s
}

type UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// {"en":"Statistical subject. \nIP: IP. \nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// {"en":"Time range, in seconds. Allowed values are from 5 to 1800.","zh_CN":"时间范围，单位秒。取值范围为 5~1800。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty"`
	// {"en":"Number of requests.Allowed values are from 1 to 99999.","zh_CN":"请求次数。取值范围为 1~99999。"}
	RequestCountThreshold *int `json:"requestCountThreshold,omitempty" xml:"requestCountThreshold,omitempty"`
	// {"en":"Number of non-existent directory requests.Allowed values are from 1 to 500.","zh_CN":"请求不存在的目录数量。取值范围为 1~500。"}
	NonExistentDirectoryThreshold *int `json:"nonExistentDirectoryThreshold,omitempty" xml:"nonExistentDirectoryThreshold,omitempty"`
	// {"en":"Proportion of 404 status codes.Allowed values are from 0 to 100.","zh_CN":"404状态码占比。取值范围为 0~100。"}
	Rate404Threshold *int `json:"rate404Threshold,omitempty" xml:"rate404Threshold,omitempty"`
	// {"en":"Action duration, in seconds.Allowed values are from 10 to 604800.","zh_CN":"处理动作持续时间，单位秒。取值范围为 10~604800。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty"`
}

func (s UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetAction(v string) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.Action = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetTarget(v string) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.Target = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetPeriod(v int) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.Period = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetRequestCountThreshold(v int) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.RequestCountThreshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetNonExistentDirectoryThreshold(v int) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.NonExistentDirectoryThreshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetRate404Threshold(v int) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.Rate404Threshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig) SetDuration(v int) *UpdateWAFScanProtectionConfigRequestDirectoryProbingConfig {
	s.Duration = &v
	return s
}

type UpdateWAFScanProtectionConfigRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateWAFScanProtectionConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigRequestHeader) SetServiceType(v string) *UpdateWAFScanProtectionConfigRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateWAFScanProtectionConfigPaths struct {
}

func (s UpdateWAFScanProtectionConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigPaths) GoString() string {
	return s.String()
}

type UpdateWAFScanProtectionConfigParameters struct {
}

func (s UpdateWAFScanProtectionConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigParameters) GoString() string {
	return s.String()
}

type UpdateWAFScanProtectionConfigResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data *UpdateWAFScanProtectionConfigResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateWAFScanProtectionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponse) SetCode(v int) *UpdateWAFScanProtectionConfigResponse {
	s.Code = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponse) SetMsg(v string) *UpdateWAFScanProtectionConfigResponse {
	s.Msg = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponse) SetData(v *UpdateWAFScanProtectionConfigResponseData) *UpdateWAFScanProtectionConfigResponse {
	s.Data = v
	return s
}

type UpdateWAFScanProtectionConfigResponseData struct {
	// {"en":"Array.","zh_CN":"数组。"}
	Array []*UpdateWAFScanProtectionConfigResponseDataArray `json:"array,omitempty" xml:"array,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateWAFScanProtectionConfigResponseData) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseData) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponseData) SetArray(v []*UpdateWAFScanProtectionConfigResponseDataArray) *UpdateWAFScanProtectionConfigResponseData {
	s.Array = v
	return s
}

type UpdateWAFScanProtectionConfigResponseDataArray struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Scanning tool detection configuration.Returns updated configuration only when modified;null when unchanged.","zh_CN":"扫描工具检测配置。仅当修改该部分时返回最新配置，未修改时返回 null。"}
	ScanToolsConfig *UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig `json:"scanToolsConfig,omitempty" xml:"scanToolsConfig,omitempty" require:"true" type:"Struct"`
	// {"en":"Repeated violation detection configuration.Returns updated configuration only when modified;null when unchanged.","zh_CN":"反复违规检测配置。仅当修改该部分时返回最新配置，未修改时返回 null。"}
	RepeatedViolationConfig *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig `json:"repeatedViolationConfig,omitempty" xml:"repeatedViolationConfig,omitempty" require:"true" type:"Struct"`
	// {"en":"Directory probing detection configuration.Returns updated configuration only when modified;null when unchanged.","zh_CN":"目录嗅探检测配置。仅当修改该部分时返回最新配置，未修改时返回 null。"}
	DirectoryProbingConfig *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig `json:"directoryProbingConfig,omitempty" xml:"directoryProbingConfig,omitempty" require:"true" type:"Struct"`
}

func (s UpdateWAFScanProtectionConfigResponseDataArray) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseDataArray) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponseDataArray) SetDomain(v string) *UpdateWAFScanProtectionConfigResponseDataArray {
	s.Domain = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArray) SetScanToolsConfig(v *UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig) *UpdateWAFScanProtectionConfigResponseDataArray {
	s.ScanToolsConfig = v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArray) SetRepeatedViolationConfig(v *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) *UpdateWAFScanProtectionConfigResponseDataArray {
	s.RepeatedViolationConfig = v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArray) SetDirectoryProbingConfig(v *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) *UpdateWAFScanProtectionConfigResponseDataArray {
	s.DirectoryProbingConfig = v
	return s
}

type UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig) SetAction(v string) *UpdateWAFScanProtectionConfigResponseDataArrayScanToolsConfig {
	s.Action = &v
	return s
}

type UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Statistical subject. \nIP: IP. \nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	// {"en":"Time range, in seconds.","zh_CN":"时间范围，单位秒。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"Number of WAF built-in rule triggers.","zh_CN":"WAF内置规则触发种类数。"}
	WafRuleTypeCount *int `json:"wafRuleTypeCount,omitempty" xml:"wafRuleTypeCount,omitempty" require:"true"`
	// {"en":"Number of block actions.","zh_CN":"拦截次数"}
	BlockCount *int `json:"blockCount,omitempty" xml:"blockCount,omitempty" require:"true"`
	// {"en":"Handling action duration, in seconds.","zh_CN":"处理动作持续时间，单位秒。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty" require:"true"`
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetAction(v string) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Action = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetTarget(v string) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Target = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetPeriod(v int) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Period = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetWafRuleTypeCount(v int) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.WafRuleTypeCount = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetBlockCount(v int) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.BlockCount = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig) SetDuration(v int) *UpdateWAFScanProtectionConfigResponseDataArrayRepeatedViolationConfig {
	s.Duration = &v
	return s
}

type UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig struct {
	// {"en":"Action.\nNO_USE:Not Used.\nLOG:Log.\nBLOCK:Deny.","zh_CN":"处理动作。\nNO_USE：不使用。\nLOG：监控。\nBLOCK：拦截。","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Statistical subject.\nIP: IP. \nIP_JA3: IP and JA3 fingerprint.","zh_CN":"统计对象。\nIP：IP。\nIP_JA3：IP+JA3指纹。","exampleValue":"IP,IP_JA3"}
	Target *string `json:"target,omitempty" xml:"target,omitempty" require:"true"`
	// {"en":"Time range, in seconds.","zh_CN":"时间范围，单位秒。"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"Number of requests.","zh_CN":"请求次数。"}
	RequestCountThreshold *int `json:"requestCountThreshold,omitempty" xml:"requestCountThreshold,omitempty" require:"true"`
	// {"en":"Number of non-existent directory requests.","zh_CN":"请求不存在的目录数量。"}
	NonExistentDirectoryThreshold *int `json:"nonExistentDirectoryThreshold,omitempty" xml:"nonExistentDirectoryThreshold,omitempty" require:"true"`
	// {"en":"Proportion of 404 status codes.","zh_CN":"404状态码占比。"}
	Rate404Threshold *int `json:"rate404Threshold,omitempty" xml:"rate404Threshold,omitempty" require:"true"`
	// {"en":"Handling action duration, in seconds.","zh_CN":"处理动作持续时间，单位秒。"}
	Duration *int `json:"duration,omitempty" xml:"duration,omitempty" require:"true"`
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) GoString() string {
	return s.String()
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetAction(v string) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Action = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetTarget(v string) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Target = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetPeriod(v int) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Period = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetRequestCountThreshold(v int) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.RequestCountThreshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetNonExistentDirectoryThreshold(v int) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.NonExistentDirectoryThreshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetRate404Threshold(v int) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Rate404Threshold = &v
	return s
}

func (s *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig) SetDuration(v int) *UpdateWAFScanProtectionConfigResponseDataArrayDirectoryProbingConfig {
	s.Duration = &v
	return s
}

type UpdateWAFScanProtectionConfigResponseHeader struct {
}

func (s UpdateWAFScanProtectionConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWAFScanProtectionConfigResponseHeader) GoString() string {
	return s.String()
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest) SetDomain(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest {
	s.Domain = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest) SetRuleName(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequest {
	s.RuleName = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) SetServiceType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader {
	s.ServiceType = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths struct {
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths) GoString() string {
	return s.String()
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainParameters struct {
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainParameters) GoString() string {
	return s.String()
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetCode(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Code = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetMsg(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Msg = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetData(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Data = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Creator.","zh_CN":"创建者。"}
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// {"en":"Can be shared.","zh_CN":"是否可被共享。"}
	Shareable *bool `json:"shareable,omitempty" xml:"shareable,omitempty" require:"true"`
	// {"en":"Rule Name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"规则描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"Statistical stage.\nREQUEST:Request\nRESPONSE:Response","zh_CN":"统计阶段。\nREQUEST：请求\nRESPONSE：响应"}
	StatisticalStage *string `json:"statisticalStage,omitempty" xml:"statisticalStage,omitempty" require:"true"`
	// {"en":"Statistical granularity.\nIP:Client IP\nIP_UA:Client IP and User-Agent\nCOOKIE:Cookie\nIP_COOKIE:Client IP and Cookie\nHEADER:Request Header\nIP_HEADER:Client IP and Request Header","zh_CN":"统计粒度。\nIP：客户端IP\nIP_UA：客户端IP和User-Agent\nCOOKIE：Cookie\nIP_COOKIE：客户端IP和Cookie\nHEADER：请求头\nIP_HEADER：客户端IP和请求头"}
	StatisticalItem *string `json:"statisticalItem,omitempty" xml:"statisticalItem,omitempty" require:"true"`
	// {"en":"Statistical key value.","zh_CN":"统计key值。"}
	StatisticsKey *string `json:"statisticsKey,omitempty" xml:"statisticsKey,omitempty" require:"true"`
	// {"en":"Statistics period, unit: seconds.","zh_CN":"统计周期，单位：秒。"}
	StatisticalPeriod *int `json:"statisticalPeriod,omitempty" xml:"statisticalPeriod,omitempty" require:"true"`
	// {"en":"Trigger threshold, unit: times.","zh_CN":"触发阈值，单位：次。"}
	TriggerThreshold *int `json:"triggerThreshold,omitempty" xml:"triggerThreshold,omitempty" require:"true"`
	// {"en":"Action duration, unit: seconds.","zh_CN":"处理动作持续时间，单位：秒。"}
	InterceptTime *int `json:"interceptTime,omitempty" xml:"interceptTime,omitempty" require:"true"`
	// {"en":"Cycle effective status.\nPERMANENT:Permanent\nWITHOUT:Does not take effect during the period\nWITHIN:Effective period","zh_CN":"周期生效状态。\nPERMANENT：永久生效\nWITHOUT：周期内不生效\nWITHIN：周期内生效"}
	EffectiveStatus *string `json:"effectiveStatus,omitempty" xml:"effectiveStatus,omitempty" require:"true"`
	// {"en":"Effective period.","zh_CN":"规则生效周期。"}
	RateLimitEffective *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective `json:"rateLimitEffective,omitempty" xml:"rateLimitEffective,omitempty" require:"true" type:"Struct"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nCOOKIE:Cookie verification\nJS_CHECK:Javascript verification\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection\nCustom response ID:Custom response ID","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nCOOKIE：Cookie校验\nJS_CHECK：JavaScript校验\nDELAY：延迟响应\nBLOCK：拦截\nRESET：断开连接\n自定义响应ID：自定义响应ID"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Matching conditions.","zh_CN":"匹配条件。"}
	RateLimitRuleCondition *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition `json:"rateLimitRuleCondition,omitempty" xml:"rateLimitRuleCondition,omitempty" require:"true" type:"Struct"`
	// {"en":"Update time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetId(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Id = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetCreator(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Creator = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetShareable(v bool) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Shareable = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetRuleName(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.RuleName = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetDescription(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Description = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetStatisticalStage(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.StatisticalStage = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetStatisticalItem(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.StatisticalItem = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetStatisticsKey(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.StatisticsKey = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetStatisticalPeriod(v int) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.StatisticalPeriod = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetTriggerThreshold(v int) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.TriggerThreshold = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetInterceptTime(v int) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.InterceptTime = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetEffectiveStatus(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.EffectiveStatus = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetRateLimitEffective(v *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.RateLimitEffective = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetAction(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Action = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetRateLimitRuleCondition(v *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.RateLimitRuleCondition = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetUpdateTime(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.UpdateTime = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective struct {
	// {"en":"effective.\nMON:Monday\nTUE:Tuesday\nWED:Wednesday\nTHU:Thursday\nFRI:Friday\nSAT:Saturday\nSUN:Sunday","zh_CN":"周期。\nMON：星期一\nTUE：星期二\nWED：星期三\nTHU：星期四\nFRI：星期五\nSAT：星期六\nSUN：星期天"}
	Effective []*string `json:"effective,omitempty" xml:"effective,omitempty" require:"true" type:"Repeated"`
	// {"en":"Start time, format: HH:mm.","zh_CN":"开始时间，格式：HH:mm。"}
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// {"en":"End time, format: HH:mm.","zh_CN":"结束时间，格式：HH:mm。"}
	End *string `json:"end,omitempty" xml:"end,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_timezone","en":"Timezone,default value: GTM+8.","zh_CN":"时区，默认：GTM+8。"}
	Timezone *string `json:"timezone,omitempty" xml:"timezone,omitempty" require:"true"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) SetEffective(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective {
	s.Effective = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) SetStart(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective {
	s.Start = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) SetEnd(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective {
	s.End = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective) SetTimezone(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitEffective {
	s.Timezone = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition struct {
	// {"en":"IP/CIDR, match type cannot be repeated.","zh_CN":"IP/IP段，匹配类型不可重复。"}
	IpOrIpsConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"路径，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	PathConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI, match type cannot be repeated.\nWhen the business scenario is API, this matching condition is not supported.","zh_CN":"URI，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	UriConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User Agent, match type cannot be repeated.","zh_CN":"User-Agent，匹配类型不可重复。"}
	UaConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Method.\nWhen the business scenario is API,this matching condition is not supported.","zh_CN":"请求方法，匹配类型不可重复。\n当业务场景为API业务时不支持此匹配条件。"}
	MethodConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer, match type cannot be repeated.","zh_CN":"Referer，匹配类型不可重复。"}
	RefererConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Header, match type can be repeated.","zh_CN":"请求头，匹配类型可重复。"}
	HeaderConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Geo, match type cannot be repeated.","zh_CN":"区域，匹配类型不可重复。"}
	AreaConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"HTTP/S, match type cannot be repeated.","zh_CN":"应用层协议，匹配类型不可重复。"}
	SchemeConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions `json:"schemeConditions,omitempty" xml:"schemeConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Response Code, match type cannot be repeated.","zh_CN":"状态码，匹配类型不可重复。"}
	StatusCodeConditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions `json:"statusCodeConditions,omitempty" xml:"statusCodeConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetIpOrIpsConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetPathConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.PathConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetUriConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.UriConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetUaConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.UaConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetMethodConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.MethodConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetRefererConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.RefererConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetHeaderConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.HeaderConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetAreaConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.AreaConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetSchemeConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.SchemeConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetStatusCodeConditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.StatusCodeConditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetJa3Conditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.Ja3Conditions = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition) SetJa4Conditions(v []*GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleCondition {
	s.Ja4Conditions = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions) SetIpOrIps(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions) SetGetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionPathConditions {
	s.GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainPaths = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions) SetUri(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUriConditions {
	s.Uri = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions) SetUa(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionUaConditions {
	s.Ua = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY。","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions) SetRequestMethod(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions struct {
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nNONE:Empty or non-existent\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nNONE：为空或不存在\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions) SetReferer(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionRefererConditions {
	s.MatchType = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions struct {
	// {"en":"Match type.EQUAL: Equals, request header values case sensitiveNOT_EQUAL: Does not equal, request header values case sensitiveCONTAIN: Contains, request header values case insensitiveNOT_CONTAIN: Does not Contains, request header values case insensitiveNONE: Empty or non-existentREGEX: Regex match, request header values case insensitiveNOT_REGEX: Regular does not match, request header values case insensitiveSTART_WITH: Starts with, request header values case insensitiveEND_WITH: Ends with, request header values case insensitiveWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single characterNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。EQUAL：等于，头部值大小写敏感NOT_EQUAL：不等于，头部值大小写敏感CONTAIN：包含，头部值大小写不敏感NOT_CONTAIN：不包含，头部值大小写不敏感NONE：为空或不存在REGEX：匹配正则，头部值大小写不敏感NOT_REGEX：正则不匹配，头部值大小写不敏感START_WITH：开头是，头部值大小写不敏感END_WITH：结尾是，头部值大小写不敏感WILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符NOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) SetValueList(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions) SetKey(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionHeaderConditions {
	s.Key = &v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions) SetAreas(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionAreaConditions {
	s.Areas = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"HTTP/S.\nSupported values: HTTP/HTTPS.","zh_CN":"应用层协议。\n支持的值：HTTP/HTTPS。","exampleValue":"HTTP,HTTPS"}
	Scheme []*string `json:"scheme,omitempty" xml:"scheme,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions) SetScheme(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionSchemeConditions {
	s.Scheme = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Response Code.","zh_CN":"状态码。"}
	StatusCode []*string `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions) SetStatusCode(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionStatusCodeConditions {
	s.StatusCode = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List, maximum 300 JA3 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's character length must be 32 and can only include numbers and lowercase letters.","zh_CN":"JA3指纹列表，最多300个JA3指纹。\n当匹配类型为等于/不等于时，每项字符长度必须为32，且仅限数字和小写字母。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions) SetJa3List(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List, maximum 300 JA4 Fingerprint.\nWhen the match type is EQUAL/NOT_EQUAL, each item's format must be 10 characters + 12 characters + 12 characters, separated by underscores, and can only include underscores, numbers, and lowercase letters.\nWhen the match type is CONTAIN/NOT_CONTAIN/START_WITH/END_WITH, each item is only allowed to include underscores, numbers, and lowercase letters.\nWhen the match type is WILDCARD/NOT_WILDCARD, each item, aside from  ** and ?, is only allowed to include underscores, numbers, and lowercase letters.","zh_CN":"JA4指纹列表，最多300个JA4指纹。\n当匹配类型为等于/不等于时，每项格式必须为10位字符+12位字符+12位字符，中间以“_”分隔，且仅限下划线、数字和小写字母。\n当匹配类型为包含/不包含/开头是/结尾是时，每项只允许输入下划线、数字和小写字母。\n当匹配类型为通配符匹配/通配符不匹配时，每项除*和?外，只允许输入下划线、数字和小写字母。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions) SetMatchType(v string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions) SetJa4List(v []*string) *GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseDataRateLimitRuleConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader struct {
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetRateLimitingRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader) GoString() string {
	return s.String()
}

type CreateRuleExceptionRequest struct {
	// {"en":"Exception name.", "zh_CN":"例外名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: bypass
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：放行
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Effective scope.
	//     1: All rule
	//     2: Specific rule ids
	//     3: Specific attack types", "zh_CN":"生效范围。
	//     1：全部规则
	//     2：特定规则ID
	//     3：特定攻击类型"}
	RangeType *int32 `json:"rangeType,omitempty" xml:"rangeType,omitempty" require:"true"`
	// {"en":"Description, the length cannot exceed 200 characters.", "zh_CN":"描述，长度不能超过200个字符。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
	// {"en":"Effective rule ID,Required when rangetype = 2.", "zh_CN":"生效的规则ID，rangeType=2时必填。"}
	RuleIds []*int32 `json:"ruleIds,omitempty" xml:"ruleIds,omitempty" type:"Repeated"`
	// {"en":"Effective attack types,Required when rangetype = 3
	//     RFC: Protocol compliance
	//     WAF_SQLI: SQL Injection
	//     WAF_XSS: X-Site Scripting
	//     WAF_RFI: File Inclusion
	//     WAF_DIR_TRAVERSAL: Directory Traversal
	//     WAF_SHELL_BACKDOOR: Webshell Uploading
	//     WAF_SERVER_ERROR_LEAKAGE: Server Sensitive Info Leakage
	//     WAF_FILE_UPLOAD: File Uploading
	//     WAF_CMDI: Command Injection
	//     WAF_XPATH_LDAP_SSI: XPATH/LADP/SSI Injection
	//     WAF_SCANNER: Malicious Scan
	//     WAF_FILE_DOWNLOAD: Unauthorized Download
	//     WAF_THIRDCOMP: 3rd Party Component Exploit
	//     WAF_XXE: XML Injection
	//     WAF_SSRF: Server-side Request Forge
	//     WAF_CUSTOM_RULE: Custom Rule", "zh_CN":"生效的攻击类型，rangeType=3时必填
	//     RFC：协议合规
	//     WAF_SQLI：SQL注入
	//     WAF_XSS：XSS跨站
	//     WAF_RFI：文件包含
	//     WAF_DIR_TRAVERSAL：目录遍历
	//     WAF_SHELL_BACKDOOR：木马后门
	//     WAF_SERVER_ERROR_LEAKAGE：服务器信息泄漏
	//     WAF_FILE_UPLOAD：文件上传
	//     WAF_CMDI：命令注入
	//     WAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入
	//     WAF_SCANNER：扫描器
	//     WAF_FILE_DOWNLOAD：非法下载
	//     WAF_THIRDCOMP：第三方组件漏洞
	//     WAF_XXE：XML注入
	//     WAF_SSRF：服务端请求伪造
	//     WAF_CUSTOM_RULE：自定义规则"}
	AttackTypes []*string `json:"attackTypes,omitempty" xml:"attackTypes,omitempty" type:"Repeated"`
	// {"en":"Matching conditions,array,Currently only one is supported.", "zh_CN":"匹配条件，数组，目前只支持一个。"}
	TemplateRuleWhiteConditions []*CreateRuleExceptionRuleWhiteCondition `json:"templateRuleWhiteConditions,omitempty" xml:"templateRuleWhiteConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s CreateRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleExceptionRequest) SetName(v string) *CreateRuleExceptionRequest {
	s.Name = &v
	return s
}

func (s *CreateRuleExceptionRequest) SetMode(v int32) *CreateRuleExceptionRequest {
	s.Mode = &v
	return s
}

func (s *CreateRuleExceptionRequest) SetRangeType(v int32) *CreateRuleExceptionRequest {
	s.RangeType = &v
	return s
}

func (s *CreateRuleExceptionRequest) SetMsg(v string) *CreateRuleExceptionRequest {
	s.Msg = &v
	return s
}

func (s *CreateRuleExceptionRequest) SetRuleIds(v []*int32) *CreateRuleExceptionRequest {
	s.RuleIds = v
	return s
}

func (s *CreateRuleExceptionRequest) SetAttackTypes(v []*string) *CreateRuleExceptionRequest {
	s.AttackTypes = v
	return s
}

func (s *CreateRuleExceptionRequest) SetTemplateRuleWhiteConditions(v []*CreateRuleExceptionRuleWhiteCondition) *CreateRuleExceptionRequest {
	s.TemplateRuleWhiteConditions = v
	return s
}

func (s *CreateRuleExceptionRequest) SetDomainList(v []*string) *CreateRuleExceptionRequest {
	s.DomainList = v
	return s
}

type CreateRuleExceptionResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"return data.", "zh_CN":"返回值。"}
	Data *CreateRuleExceptionRuleWhite `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleExceptionResponse) SetCode(v string) *CreateRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *CreateRuleExceptionResponse) SetMessage(v string) *CreateRuleExceptionResponse {
	s.Message = &v
	return s
}

func (s *CreateRuleExceptionResponse) SetData(v *CreateRuleExceptionRuleWhite) *CreateRuleExceptionResponse {
	s.Data = v
	return s
}

type CreateRuleExceptionRuleWhiteCondition struct {
	// {"en":"Type
	//     path: Path
	//     uri: URI
	//     urlParamName: URL Parameter Name
	//     urlParamValue: URL Parameter Value
	//     clientIP: IP
	//     userAgent: User Agent
	//     httpHeaderName: HTTP Header Name
	//     httpHeaderValue: HTTP Header Value
	//     cookie: Cookie
	//     bodyParamName: Body Parameter Name
	//     bodyParamValue: Body Parameter Value
	//     body: Body", "zh_CN":"类型
	//     path：路径
	//     uri：URI
	//     urlParamName：URL Parameter Name
	//     urlParamValue：URL Parameter Value
	//     clientIP：IP
	//     userAgent：User Agent
	//     httpHeaderName：HTTP Header Name
	//     httpHeaderValue：HTTP Header Value
	//     cookie：Cookie
	//     bodyParamName：Body Parameter Name
	//     bodyParamValue：Body Parameter Value
	//     body：Body"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Regular or not
	//     0: yes
	//     1: no", "zh_CN":"是否正则。
	//     0：否
	//     1：是"}
	IsReg *int32 `json:"isReg,omitempty" xml:"isReg,omitempty" require:"true"`
	// {"en":"Enter the exception configuration. Except for Body, multiple values can be set at the same time.The clientIP type uses English half-corner commas to separate multiple values, and other types use newlines to separate multiple values.", "zh_CN":"例外内容，除了body类型以外，支持多个，clientIP类型用英文半角逗号分隔，其他类型用换行符分隔"}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s CreateRuleExceptionRuleWhiteCondition) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionRuleWhiteCondition) GoString() string {
	return s.String()
}

func (s *CreateRuleExceptionRuleWhiteCondition) SetType(v string) *CreateRuleExceptionRuleWhiteCondition {
	s.Type = &v
	return s
}

func (s *CreateRuleExceptionRuleWhiteCondition) SetIsReg(v int32) *CreateRuleExceptionRuleWhiteCondition {
	s.IsReg = &v
	return s
}

func (s *CreateRuleExceptionRuleWhiteCondition) SetContent(v string) *CreateRuleExceptionRuleWhiteCondition {
	s.Content = &v
	return s
}

type CreateRuleExceptionRuleWhite struct {
	// {"en":"Exception ID", "zh_CN":"例外ID"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Exception name", "zh_CN":"例外名称"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s CreateRuleExceptionRuleWhite) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionRuleWhite) GoString() string {
	return s.String()
}

func (s *CreateRuleExceptionRuleWhite) SetId(v int32) *CreateRuleExceptionRuleWhite {
	s.Id = &v
	return s
}

func (s *CreateRuleExceptionRuleWhite) SetName(v string) *CreateRuleExceptionRuleWhite {
	s.Name = &v
	return s
}

type CreateRuleExceptionPaths struct {
}

func (s CreateRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionPaths) GoString() string {
	return s.String()
}

type CreateRuleExceptionParameters struct {
}

func (s CreateRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionParameters) GoString() string {
	return s.String()
}

type CreateRuleExceptionRequestHeader struct {
}

func (s CreateRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

type CreateRuleExceptionResponseHeader struct {
}

func (s CreateRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type ListCustomRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Rule name, fuzzy query.","zh_CN":"规则名称，模糊查询。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
}

func (s ListCustomRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomRulesRequest) SetDomainList(v []*string) *ListCustomRulesRequest {
	s.DomainList = v
	return s
}

func (s *ListCustomRulesRequest) SetRuleName(v string) *ListCustomRulesRequest {
	s.RuleName = &v
	return s
}

type ListCustomRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListCustomRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListCustomRulesRequestHeader) SetServiceType(v string) *ListCustomRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListCustomRulesPaths struct {
}

func (s ListCustomRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesPaths) GoString() string {
	return s.String()
}

type ListCustomRulesParameters struct {
}

func (s ListCustomRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesParameters) GoString() string {
	return s.String()
}

type ListCustomRulesResponse struct {
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListCustomRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponse) SetMsg(v string) *ListCustomRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListCustomRulesResponse) SetCode(v string) *ListCustomRulesResponse {
	s.Code = &v
	return s
}

func (s *ListCustomRulesResponse) SetData(v []*ListCustomRulesResponseData) *ListCustomRulesResponse {
	s.Data = v
	return s
}

type ListCustomRulesResponseData struct {
	// {"en":"Match Conditions.","zh_CN":"匹配条件。"}
	ConditionList *ListCustomRulesResponseDataConditionList `json:"conditionList,omitempty" xml:"conditionList,omitempty" require:"true" type:"Struct"`
	// {"en":"Action.\nNO_USE:Not Used\nLOG:Log\nDELAY:Delay\nBLOCK:Deny\nRESET:Reset Connection","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nDELAY：延迟响应\nBLOCK：拦截\nRESET:断开连接","exampleValue":"NO_USE,LOG,DELAY,BLOCK,RESET"}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"API ID, multiple separated by ; sign.","zh_CN":"API业务下的API ID，多个用 ; 隔开。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty" require:"true"`
	// {"en":"Protected target.\nWEB:Website\nAPI:API","zh_CN":"业务场景。\nWEB：WEB业务\nAPI：API业务","exampleValue":"WEB,API"}
	Scene *string `json:"scene,omitempty" xml:"scene,omitempty" require:"true"`
}

func (s ListCustomRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseData) SetConditionList(v *ListCustomRulesResponseDataConditionList) *ListCustomRulesResponseData {
	s.ConditionList = v
	return s
}

func (s *ListCustomRulesResponseData) SetAct(v string) *ListCustomRulesResponseData {
	s.Act = &v
	return s
}

func (s *ListCustomRulesResponseData) SetDomain(v string) *ListCustomRulesResponseData {
	s.Domain = &v
	return s
}

func (s *ListCustomRulesResponseData) SetRuleName(v string) *ListCustomRulesResponseData {
	s.RuleName = &v
	return s
}

func (s *ListCustomRulesResponseData) SetDescription(v string) *ListCustomRulesResponseData {
	s.Description = &v
	return s
}

func (s *ListCustomRulesResponseData) SetId(v string) *ListCustomRulesResponseData {
	s.Id = &v
	return s
}

func (s *ListCustomRulesResponseData) SetApiId(v string) *ListCustomRulesResponseData {
	s.ApiId = &v
	return s
}

func (s *ListCustomRulesResponseData) SetScene(v string) *ListCustomRulesResponseData {
	s.Scene = &v
	return s
}

type ListCustomRulesResponseDataConditionList struct {
	// {"en":"Request Method.","zh_CN":"请求方法。"}
	MethodConditions []*ListCustomRulesResponseDataConditionListMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Geo.","zh_CN":"区域。"}
	AreaConditions []*ListCustomRulesResponseDataConditionListAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIpsConditions []*ListCustomRulesResponseDataConditionListIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI.","zh_CN":"URI。"}
	UriConditions []*ListCustomRulesResponseDataConditionListUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path.","zh_CN":"路径。"}
	PathConditions []*ListCustomRulesResponseDataConditionListPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI Parameter.","zh_CN":"URI参数。"}
	UriParamConditions []*ListCustomRulesResponseDataConditionListUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User Agent.","zh_CN":"User-Agent。"}
	UaConditions []*ListCustomRulesResponseDataConditionListUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Header.","zh_CN":"请求头。"}
	HeaderConditions []*ListCustomRulesResponseDataConditionListHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer.","zh_CN":"Referer。"}
	RefererConditions []*ListCustomRulesResponseDataConditionListRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*ListCustomRulesResponseDataConditionListJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*ListCustomRulesResponseDataConditionListJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionList) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionList) SetMethodConditions(v []*ListCustomRulesResponseDataConditionListMethodConditions) *ListCustomRulesResponseDataConditionList {
	s.MethodConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetAreaConditions(v []*ListCustomRulesResponseDataConditionListAreaConditions) *ListCustomRulesResponseDataConditionList {
	s.AreaConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetIpOrIpsConditions(v []*ListCustomRulesResponseDataConditionListIpOrIpsConditions) *ListCustomRulesResponseDataConditionList {
	s.IpOrIpsConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetUriConditions(v []*ListCustomRulesResponseDataConditionListUriConditions) *ListCustomRulesResponseDataConditionList {
	s.UriConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetPathConditions(v []*ListCustomRulesResponseDataConditionListPathConditions) *ListCustomRulesResponseDataConditionList {
	s.PathConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetUriParamConditions(v []*ListCustomRulesResponseDataConditionListUriParamConditions) *ListCustomRulesResponseDataConditionList {
	s.UriParamConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetUaConditions(v []*ListCustomRulesResponseDataConditionListUaConditions) *ListCustomRulesResponseDataConditionList {
	s.UaConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetHeaderConditions(v []*ListCustomRulesResponseDataConditionListHeaderConditions) *ListCustomRulesResponseDataConditionList {
	s.HeaderConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetRefererConditions(v []*ListCustomRulesResponseDataConditionListRefererConditions) *ListCustomRulesResponseDataConditionList {
	s.RefererConditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetJa3Conditions(v []*ListCustomRulesResponseDataConditionListJa3Conditions) *ListCustomRulesResponseDataConditionList {
	s.Ja3Conditions = v
	return s
}

func (s *ListCustomRulesResponseDataConditionList) SetJa4Conditions(v []*ListCustomRulesResponseDataConditionListJa4Conditions) *ListCustomRulesResponseDataConditionList {
	s.Ja4Conditions = v
	return s
}

type ListCustomRulesResponseDataConditionListMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListMethodConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListMethodConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListMethodConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListMethodConditions) SetRequestMethod(v []*string) *ListCustomRulesResponseDataConditionListMethodConditions {
	s.RequestMethod = v
	return s
}

type ListCustomRulesResponseDataConditionListAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListAreaConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListAreaConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListAreaConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListAreaConditions) SetAreas(v []*string) *ListCustomRulesResponseDataConditionListAreaConditions {
	s.Areas = v
	return s
}

type ListCustomRulesResponseDataConditionListIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListIpOrIpsConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListIpOrIpsConditions) SetIpOrIps(v []*string) *ListCustomRulesResponseDataConditionListIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type ListCustomRulesResponseDataConditionListUriConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.","zh_CN":"URI。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListUriConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListUriConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListUriConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListUriConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListUriConditions) SetUri(v []*string) *ListCustomRulesResponseDataConditionListUriConditions {
	s.Uri = v
	return s
}

type ListCustomRulesResponseDataConditionListPathConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.","zh_CN":"路径。"}
	ListCustomRulesPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListPathConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListPathConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListPathConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListPathConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListPathConditions) SetListCustomRulesPaths(v []*string) *ListCustomRulesResponseDataConditionListPathConditions {
	s.ListCustomRulesPaths = v
	return s
}

type ListCustomRulesResponseDataConditionListUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal\nCONTAIN:Contains\nNOT_CONTAIN:Does not contains\nREGEX:Regex match\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name.","zh_CN":"参数名。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListUriParamConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListUriParamConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListUriParamConditions) SetParamName(v string) *ListCustomRulesResponseDataConditionListUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListUriParamConditions) SetParamValue(v []*string) *ListCustomRulesResponseDataConditionListUriParamConditions {
	s.ParamValue = v
	return s
}

type ListCustomRulesResponseDataConditionListUaConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User-Agent.","zh_CN":"User-Agent。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListUaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListUaConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListUaConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListUaConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListUaConditions) SetUa(v []*string) *ListCustomRulesResponseDataConditionListUaConditions {
	s.Ua = v
	return s
}

type ListCustomRulesResponseDataConditionListHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.","zh_CN":"头部值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request header name.","zh_CN":"头部名称。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s ListCustomRulesResponseDataConditionListHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListHeaderConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListHeaderConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListHeaderConditions) SetValueList(v []*string) *ListCustomRulesResponseDataConditionListHeaderConditions {
	s.ValueList = v
	return s
}

func (s *ListCustomRulesResponseDataConditionListHeaderConditions) SetKey(v string) *ListCustomRulesResponseDataConditionListHeaderConditions {
	s.Key = &v
	return s
}

type ListCustomRulesResponseDataConditionListRefererConditions struct {
	// {"en":"Referer.","zh_CN":"Referer。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s ListCustomRulesResponseDataConditionListRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListRefererConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListRefererConditions) SetReferer(v []*string) *ListCustomRulesResponseDataConditionListRefererConditions {
	s.Referer = v
	return s
}

func (s *ListCustomRulesResponseDataConditionListRefererConditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListRefererConditions {
	s.MatchType = &v
	return s
}

type ListCustomRulesResponseDataConditionListJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List.","zh_CN":"JA3指纹列表。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListJa3Conditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListJa3Conditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListJa3Conditions) SetJa3List(v []*string) *ListCustomRulesResponseDataConditionListJa3Conditions {
	s.Ja3List = v
	return s
}

type ListCustomRulesResponseDataConditionListJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List.","zh_CN":"JA4指纹列表。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesResponseDataConditionListJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseDataConditionListJa4Conditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesResponseDataConditionListJa4Conditions) SetMatchType(v string) *ListCustomRulesResponseDataConditionListJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesResponseDataConditionListJa4Conditions) SetJa4List(v []*string) *ListCustomRulesResponseDataConditionListJa4Conditions {
	s.Ja4List = v
	return s
}

type ListCustomRulesResponseHeader struct {
}

func (s ListCustomRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesResponseHeader) GoString() string {
	return s.String()
}

type RejectIntelligentAnalysisRequest struct {
	// {'en':'Intelligent analysis id.', 'zh_CN':'托管id。'}
	Rid *int `json:"rid,omitempty" xml:"rid,omitempty" require:"true"`
}

func (s RejectIntelligentAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisRequest) GoString() string {
	return s.String()
}

func (s *RejectIntelligentAnalysisRequest) SetRid(v int) *RejectIntelligentAnalysisRequest {
	s.Rid = &v
	return s
}

type RejectIntelligentAnalysisResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s RejectIntelligentAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisResponse) GoString() string {
	return s.String()
}

func (s *RejectIntelligentAnalysisResponse) SetCode(v string) *RejectIntelligentAnalysisResponse {
	s.Code = &v
	return s
}

func (s *RejectIntelligentAnalysisResponse) SetMessage(v string) *RejectIntelligentAnalysisResponse {
	s.Message = &v
	return s
}

type RejectIntelligentAnalysisPaths struct {
}

func (s RejectIntelligentAnalysisPaths) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisPaths) GoString() string {
	return s.String()
}

type RejectIntelligentAnalysisParameters struct {
}

func (s RejectIntelligentAnalysisParameters) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisParameters) GoString() string {
	return s.String()
}

type RejectIntelligentAnalysisRequestHeader struct {
}

func (s RejectIntelligentAnalysisRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisRequestHeader) GoString() string {
	return s.String()
}

type RejectIntelligentAnalysisResponseHeader struct {
}

func (s RejectIntelligentAnalysisResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RejectIntelligentAnalysisResponseHeader) GoString() string {
	return s.String()
}

type UpdateDomainAPISecurityConfigurationRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Protection configuration.","zh_CN":"防护配置。"}
	DefendList []*UpdateDomainAPISecurityConfigurationRequestDefendList `json:"defendList,omitempty" xml:"defendList,omitempty" type:"Repeated"`
}

func (s UpdateDomainAPISecurityConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateDomainAPISecurityConfigurationRequest) SetDomain(v string) *UpdateDomainAPISecurityConfigurationRequest {
	s.Domain = &v
	return s
}

func (s *UpdateDomainAPISecurityConfigurationRequest) SetDefendList(v []*UpdateDomainAPISecurityConfigurationRequestDefendList) *UpdateDomainAPISecurityConfigurationRequest {
	s.DefendList = v
	return s
}

type UpdateDomainAPISecurityConfigurationRequestDefendList struct {
	// {"en":"API ID.","zh_CN":"API ID。"}
	ApiId *string `json:"apiId,omitempty" xml:"apiId,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE: Not Used\nLOG: Log\nBLOCK: Deny","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nBLOCK：拦截","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s UpdateDomainAPISecurityConfigurationRequestDefendList) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationRequestDefendList) GoString() string {
	return s.String()
}

func (s *UpdateDomainAPISecurityConfigurationRequestDefendList) SetApiId(v string) *UpdateDomainAPISecurityConfigurationRequestDefendList {
	s.ApiId = &v
	return s
}

func (s *UpdateDomainAPISecurityConfigurationRequestDefendList) SetAction(v string) *UpdateDomainAPISecurityConfigurationRequestDefendList {
	s.Action = &v
	return s
}

type UpdateDomainAPISecurityConfigurationRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateDomainAPISecurityConfigurationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateDomainAPISecurityConfigurationRequestHeader) SetServiceType(v string) *UpdateDomainAPISecurityConfigurationRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateDomainAPISecurityConfigurationPaths struct {
}

func (s UpdateDomainAPISecurityConfigurationPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationPaths) GoString() string {
	return s.String()
}

type UpdateDomainAPISecurityConfigurationParameters struct {
}

func (s UpdateDomainAPISecurityConfigurationParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationParameters) GoString() string {
	return s.String()
}

type UpdateDomainAPISecurityConfigurationResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateDomainAPISecurityConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateDomainAPISecurityConfigurationResponse) SetCode(v string) *UpdateDomainAPISecurityConfigurationResponse {
	s.Code = &v
	return s
}

func (s *UpdateDomainAPISecurityConfigurationResponse) SetMsg(v string) *UpdateDomainAPISecurityConfigurationResponse {
	s.Msg = &v
	return s
}

type UpdateDomainAPISecurityConfigurationResponseHeader struct {
}

func (s UpdateDomainAPISecurityConfigurationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateDomainAPISecurityConfigurationResponseHeader) GoString() string {
	return s.String()
}

type UpdateGeoBlockSettingsRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Countries/Areas.","zh_CN":"国家/地区。"}
	BlockConditions []*string `json:"blockConditions,omitempty" xml:"blockConditions,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateGeoBlockSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsRequest) GoString() string {
	return s.String()
}

func (s *UpdateGeoBlockSettingsRequest) SetDomain(v string) *UpdateGeoBlockSettingsRequest {
	s.Domain = &v
	return s
}

func (s *UpdateGeoBlockSettingsRequest) SetBlockConditions(v []*string) *UpdateGeoBlockSettingsRequest {
	s.BlockConditions = v
	return s
}

type UpdateGeoBlockSettingsRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateGeoBlockSettingsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateGeoBlockSettingsRequestHeader) SetServiceType(v string) *UpdateGeoBlockSettingsRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateGeoBlockSettingsPaths struct {
}

func (s UpdateGeoBlockSettingsPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsPaths) GoString() string {
	return s.String()
}

type UpdateGeoBlockSettingsParameters struct {
}

func (s UpdateGeoBlockSettingsParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsParameters) GoString() string {
	return s.String()
}

type UpdateGeoBlockSettingsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateGeoBlockSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsResponse) GoString() string {
	return s.String()
}

func (s *UpdateGeoBlockSettingsResponse) SetCode(v string) *UpdateGeoBlockSettingsResponse {
	s.Code = &v
	return s
}

func (s *UpdateGeoBlockSettingsResponse) SetMsg(v string) *UpdateGeoBlockSettingsResponse {
	s.Msg = &v
	return s
}

type UpdateGeoBlockSettingsResponseHeader struct {
}

func (s UpdateGeoBlockSettingsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeoBlockSettingsResponseHeader) GoString() string {
	return s.String()
}

type DomainsOfNonLatestRulesetVersionRequest struct {
}

func (s DomainsOfNonLatestRulesetVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionRequest) GoString() string {
	return s.String()
}

type DomainsOfNonLatestRulesetVersionRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DomainsOfNonLatestRulesetVersionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionRequestHeader) GoString() string {
	return s.String()
}

func (s *DomainsOfNonLatestRulesetVersionRequestHeader) SetServiceType(v string) *DomainsOfNonLatestRulesetVersionRequestHeader {
	s.ServiceType = &v
	return s
}

type DomainsOfNonLatestRulesetVersionPaths struct {
}

func (s DomainsOfNonLatestRulesetVersionPaths) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionPaths) GoString() string {
	return s.String()
}

type DomainsOfNonLatestRulesetVersionParameters struct {
}

func (s DomainsOfNonLatestRulesetVersionParameters) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionParameters) GoString() string {
	return s.String()
}

type DomainsOfNonLatestRulesetVersionResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s DomainsOfNonLatestRulesetVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionResponse) GoString() string {
	return s.String()
}

func (s *DomainsOfNonLatestRulesetVersionResponse) SetCode(v string) *DomainsOfNonLatestRulesetVersionResponse {
	s.Code = &v
	return s
}

func (s *DomainsOfNonLatestRulesetVersionResponse) SetMsg(v string) *DomainsOfNonLatestRulesetVersionResponse {
	s.Msg = &v
	return s
}

func (s *DomainsOfNonLatestRulesetVersionResponse) SetData(v []*string) *DomainsOfNonLatestRulesetVersionResponse {
	s.Data = v
	return s
}

type DomainsOfNonLatestRulesetVersionResponseHeader struct {
}

func (s DomainsOfNonLatestRulesetVersionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DomainsOfNonLatestRulesetVersionResponseHeader) GoString() string {
	return s.String()
}

type ModifyBuiltInProtectionRequest struct {
	// {"en":"customer code", "zh_CN":"客户名称"}
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// {"en":"domain name,Multiple are separated by semicolons", "zh_CN":"域名，多个使用分号分隔"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// {"en":"Built in protection switch,0 : close,1:open", "zh_CN":"内置防护开关，0：关闭，1：开启"}
	InnerSwitch *string `json:"innerSwitch,omitempty" xml:"innerSwitch,omitempty"`
	// {"en":"Built in mode,1:standard,2:strict,3:emergency", "zh_CN":"内置防护模式，1:标准，2：严格，3：攻击应急"}
	InnerTmode *string `json:"innerTmode,omitempty" xml:"innerTmode,omitempty"`
}

func (s ModifyBuiltInProtectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionRequest) GoString() string {
	return s.String()
}

func (s *ModifyBuiltInProtectionRequest) SetCustomCode(v string) *ModifyBuiltInProtectionRequest {
	s.CustomCode = &v
	return s
}

func (s *ModifyBuiltInProtectionRequest) SetDomain(v string) *ModifyBuiltInProtectionRequest {
	s.Domain = &v
	return s
}

func (s *ModifyBuiltInProtectionRequest) SetInnerSwitch(v string) *ModifyBuiltInProtectionRequest {
	s.InnerSwitch = &v
	return s
}

func (s *ModifyBuiltInProtectionRequest) SetInnerTmode(v string) *ModifyBuiltInProtectionRequest {
	s.InnerTmode = &v
	return s
}

type ModifyBuiltInProtectionResponse struct {
	// {"en":"200:success
	// other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s ModifyBuiltInProtectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionResponse) GoString() string {
	return s.String()
}

func (s *ModifyBuiltInProtectionResponse) SetCode(v string) *ModifyBuiltInProtectionResponse {
	s.Code = &v
	return s
}

func (s *ModifyBuiltInProtectionResponse) SetMsg(v string) *ModifyBuiltInProtectionResponse {
	s.Msg = &v
	return s
}

type ModifyBuiltInProtectionPaths struct {
}

func (s ModifyBuiltInProtectionPaths) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionPaths) GoString() string {
	return s.String()
}

type ModifyBuiltInProtectionParameters struct {
}

func (s ModifyBuiltInProtectionParameters) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionParameters) GoString() string {
	return s.String()
}

type ModifyBuiltInProtectionRequestHeader struct {
}

func (s ModifyBuiltInProtectionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionRequestHeader) GoString() string {
	return s.String()
}

type ModifyBuiltInProtectionResponseHeader struct {
}

func (s ModifyBuiltInProtectionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ModifyBuiltInProtectionResponseHeader) GoString() string {
	return s.String()
}

type UpdateRuleExceptionRequest struct {
	// {"en":"Exception ID to change.", "zh_CN":"要变更的例外ID。"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Exception name.", "zh_CN":"例外名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.
	//     0: Bypass
	//     2: Log", "zh_CN":"触发规则时的处理动作。
	//     0：放行
	//     2：监控"}
	Mode *int32 `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Effective scope
	//     1: All rule
	//     2: Specific rule ids
	//     3: Specific attack types", "zh_CN":"生效范围。
	//     1：全部规则
	//     2：特定规则ID
	//     3：特定攻击类型"}
	RangeType *int32 `json:"rangeType,omitempty" xml:"rangeType,omitempty" require:"true"`
	// {"en":"Description, the length cannot exceed 200 characters.", "zh_CN":"描述，长度不能超过200个字符。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
	// {"en":"Effective rule ID,Required when rangetype = 2.", "zh_CN":"生效的规则ID，rangeType=2时必填。"}
	RuleIds []*int32 `json:"ruleIds,omitempty" xml:"ruleIds,omitempty" type:"Repeated"`
	// {"en":"Effective attack types,Required when rangetype = 3
	//     RFC: Protocol compliance
	//     WAF_SQLI: SQL Injection
	//     WAF_XSS: X-Site Scripting
	//     WAF_RFI: File Inclusion
	//     WAF_DIR_TRAVERSAL: Directory Traversal
	//     WAF_SHELL_BACKDOOR: Webshell Uploading
	//     WAF_SERVER_ERROR_LEAKAGE: Server Sensitive Info Leakage
	//     WAF_FILE_UPLOAD: File Uploading
	//     WAF_CMDI: Command Injection
	//     WAF_XPATH_LDAP_SSI: XPATH/LADP/SSI Injection
	//     WAF_SCANNER: Malicious Scan
	//     WAF_FILE_DOWNLOAD: Unauthorized Download
	//     WAF_THIRDCOMP: 3rd Party Component Exploit
	//     WAF_XXE: XML Injection
	//     WAF_SSRF: Server-side Request Forge
	//     WAF_CUSTOM_RULE: Custom Rule", "zh_CN":"生效的攻击类型，rangeType=3时必填
	//     RFC：协议合规
	//     WAF_SQLI：SQL注入
	//     WAF_XSS：XSS跨站
	//     WAF_RFI：文件包含
	//     WAF_DIR_TRAVERSAL：目录遍历
	//     WAF_SHELL_BACKDOOR：木马后门
	//     WAF_SERVER_ERROR_LEAKAGE：服务器信息泄漏
	//     WAF_FILE_UPLOAD：文件上传
	//     WAF_CMDI：命令注入
	//     WAF_XPATH_LDAP_SSI：XPATH/LADP/SSI注入
	//     WAF_SCANNER：扫描器
	//     WAF_FILE_DOWNLOAD：非法下载
	//     WAF_THIRDCOMP：第三方组件漏洞
	//     WAF_XXE：XML注入
	//     WAF_SSRF：服务端请求伪造
	//     WAF_CUSTOM_RULE：自定义规则"}
	AttackTypes []*string `json:"attackTypes,omitempty" xml:"attackTypes,omitempty" type:"Repeated"`
	// {"en":"Matching conditions,array,Currently only one is supported.", "zh_CN":"匹配条件，数组，目前只支持一个。"}
	TemplateRuleWhiteConditions []*UpdateRuleExceptionRuleWhiteCondition `json:"templateRuleWhiteConditions,omitempty" xml:"templateRuleWhiteConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s UpdateRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleExceptionRequest) SetId(v int32) *UpdateRuleExceptionRequest {
	s.Id = &v
	return s
}

func (s *UpdateRuleExceptionRequest) SetName(v string) *UpdateRuleExceptionRequest {
	s.Name = &v
	return s
}

func (s *UpdateRuleExceptionRequest) SetMode(v int32) *UpdateRuleExceptionRequest {
	s.Mode = &v
	return s
}

func (s *UpdateRuleExceptionRequest) SetRangeType(v int32) *UpdateRuleExceptionRequest {
	s.RangeType = &v
	return s
}

func (s *UpdateRuleExceptionRequest) SetMsg(v string) *UpdateRuleExceptionRequest {
	s.Msg = &v
	return s
}

func (s *UpdateRuleExceptionRequest) SetRuleIds(v []*int32) *UpdateRuleExceptionRequest {
	s.RuleIds = v
	return s
}

func (s *UpdateRuleExceptionRequest) SetAttackTypes(v []*string) *UpdateRuleExceptionRequest {
	s.AttackTypes = v
	return s
}

func (s *UpdateRuleExceptionRequest) SetTemplateRuleWhiteConditions(v []*UpdateRuleExceptionRuleWhiteCondition) *UpdateRuleExceptionRequest {
	s.TemplateRuleWhiteConditions = v
	return s
}

func (s *UpdateRuleExceptionRequest) SetDomainList(v []*string) *UpdateRuleExceptionRequest {
	s.DomainList = v
	return s
}

type UpdateRuleExceptionResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Bad rule ID,array.", "zh_CN":"错误的规则ID,数组。"}
	Data []*int32 `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s UpdateRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleExceptionResponse) SetCode(v string) *UpdateRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *UpdateRuleExceptionResponse) SetMessage(v string) *UpdateRuleExceptionResponse {
	s.Message = &v
	return s
}

func (s *UpdateRuleExceptionResponse) SetData(v []*int32) *UpdateRuleExceptionResponse {
	s.Data = v
	return s
}

type UpdateRuleExceptionRuleWhiteCondition struct {
	// {"en":"Type
	//     path: Path
	//     uri: URI
	//     urlParamName: URL Parameter Name
	//     urlParamValue: URL Parameter Value
	//     clientIP: IP
	//     userAgent: User Agent
	//     httpHeaderName: HTTP Header Name
	//     httpHeaderValue: HTTP Header Value
	//     cookie: Cookie
	//     bodyParamName: Body Parameter Name
	//     bodyParamValue: Body Parameter Value
	//     body: Body", "zh_CN":"类型
	//     path：路径
	//     uri：URI
	//     urlParamName：URL Parameter Name
	//     urlParamValue：URL Parameter Value
	//     clientIP：IP
	//     userAgent：User Agent
	//     httpHeaderName：HTTP Header Name
	//     httpHeaderValue：HTTP Header Value
	//     cookie：Cookie
	//     bodyParamName：Body Parameter Name
	//     bodyParamValue：Body Parameter Value
	//     body：Body"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Regular or not
	//     0: yes
	//     1: no", "zh_CN":"是否正则。
	//     0：否
	//     1：是"}
	IsReg *int32 `json:"isReg,omitempty" xml:"isReg,omitempty" require:"true"`
	// {"en":"Enter the exception configuration. Except for Body, multiple values can be set at the same time.The clientIP type uses English half-corner commas to separate multiple values, and other types use newlines to separate multiple values.", "zh_CN":"例外内容，除了body类型以外，支持多个，clientIP类型用英文半角逗号分隔，其他类型用换行符分隔"}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s UpdateRuleExceptionRuleWhiteCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionRuleWhiteCondition) GoString() string {
	return s.String()
}

func (s *UpdateRuleExceptionRuleWhiteCondition) SetType(v string) *UpdateRuleExceptionRuleWhiteCondition {
	s.Type = &v
	return s
}

func (s *UpdateRuleExceptionRuleWhiteCondition) SetIsReg(v int32) *UpdateRuleExceptionRuleWhiteCondition {
	s.IsReg = &v
	return s
}

func (s *UpdateRuleExceptionRuleWhiteCondition) SetContent(v string) *UpdateRuleExceptionRuleWhiteCondition {
	s.Content = &v
	return s
}

type UpdateRuleExceptionPaths struct {
}

func (s UpdateRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionPaths) GoString() string {
	return s.String()
}

type UpdateRuleExceptionParameters struct {
}

func (s UpdateRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionParameters) GoString() string {
	return s.String()
}

type UpdateRuleExceptionRequestHeader struct {
}

func (s UpdateRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

type UpdateRuleExceptionResponseHeader struct {
}

func (s UpdateRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForRuleExceptionRequest struct {
	// {"en":"Exception ID, array.", "zh_CN":"例外ID，数组。"}
	TemplateIdList []*int32 `json:"templateIdList,omitempty" xml:"templateIdList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Domain to remove from the specified rule exception, array.", "zh_CN":"要从指定规则例外中移除的域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveDomainsForRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForRuleExceptionRequest) SetTemplateIdList(v []*int32) *RemoveDomainsForRuleExceptionRequest {
	s.TemplateIdList = v
	return s
}

func (s *RemoveDomainsForRuleExceptionRequest) SetDomainList(v []*string) *RemoveDomainsForRuleExceptionRequest {
	s.DomainList = v
	return s
}

type RemoveDomainsForRuleExceptionResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s RemoveDomainsForRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *RemoveDomainsForRuleExceptionResponse) SetCode(v string) *RemoveDomainsForRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *RemoveDomainsForRuleExceptionResponse) SetMessage(v string) *RemoveDomainsForRuleExceptionResponse {
	s.Message = &v
	return s
}

type RemoveDomainsForRuleExceptionPaths struct {
}

func (s RemoveDomainsForRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionPaths) GoString() string {
	return s.String()
}

type RemoveDomainsForRuleExceptionParameters struct {
}

func (s RemoveDomainsForRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionParameters) GoString() string {
	return s.String()
}

type RemoveDomainsForRuleExceptionRequestHeader struct {
}

func (s RemoveDomainsForRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

type RemoveDomainsForRuleExceptionResponseHeader struct {
}

func (s RemoveDomainsForRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s RemoveDomainsForRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type DeployFingerprintAnalysisRequest struct {
	// {"en":"domain.", "zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"User fingerprint analysis.", "zh_CN":"用户指纹分析。"}
	Edgebot_user_fingerprint_challenge *DeployFingerprintAnalysisFingerprint `json:"edgebot_user_fingerprint_challenge,omitempty" xml:"edgebot_user_fingerprint_challenge,omitempty" require:"true"`
	// {"en":"Browser fingerprint analysis.", "zh_CN":"浏览器指纹分析。"}
	Edgebot_device_fingerprint_challenge *DeployFingerprintAnalysisFingerprint `json:"edgebot_device_fingerprint_challenge,omitempty" xml:"edgebot_device_fingerprint_challenge,omitempty" require:"true"`
}

func (s DeployFingerprintAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisRequest) GoString() string {
	return s.String()
}

func (s *DeployFingerprintAnalysisRequest) SetDomain(v string) *DeployFingerprintAnalysisRequest {
	s.Domain = &v
	return s
}

func (s *DeployFingerprintAnalysisRequest) SetEdgebot_user_fingerprint_challenge(v *DeployFingerprintAnalysisFingerprint) *DeployFingerprintAnalysisRequest {
	s.Edgebot_user_fingerprint_challenge = v
	return s
}

func (s *DeployFingerprintAnalysisRequest) SetEdgebot_device_fingerprint_challenge(v *DeployFingerprintAnalysisFingerprint) *DeployFingerprintAnalysisRequest {
	s.Edgebot_device_fingerprint_challenge = v
	return s
}

type DeployFingerprintAnalysisFingerprint struct {
	// {"en":"Switch for user fingerprint analysis.
	//  0:OFF
	//  1:ON", "zh_CN":"指纹分析开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Analysis frequency. Unit: min", "zh_CN":"分析频率。单位：分"}
	Analysis_frequency *int `json:"analysis_frequency,omitempty" xml:"analysis_frequency,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: min", "zh_CN":"触发条件-统计周期。单位：分"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Number of IP.", "zh_CN":"IP个数。"}
	Ip_threshold *int `json:"ip_threshold,omitempty" xml:"ip_threshold,omitempty" require:"true"`
	// {"en":"Processing action.
	//   1:blok
	//  2:Log
	//  5:Reset", "zh_CN":"处理动作。
	//  1：拦截
	//  2：监控
	//  5：断开连接"}
	Action_type *int `json:"action_type,omitempty" xml:"action_type,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit:min", "zh_CN":"处理动作持续时间。单位：分"}
	Action_time *int `json:"action_time,omitempty" xml:"action_time,omitempty" require:"true"`
	// {"en":"Details of protection path.", "zh_CN":"防护路径内容。"}
	Fp_rows []*DeployFingerprintAnalysisFpRows `json:"fp_rows,omitempty" xml:"fp_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployFingerprintAnalysisFingerprint) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisFingerprint) GoString() string {
	return s.String()
}

func (s *DeployFingerprintAnalysisFingerprint) SetEnable(v int) *DeployFingerprintAnalysisFingerprint {
	s.Enable = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetAnalysis_frequency(v int) *DeployFingerprintAnalysisFingerprint {
	s.Analysis_frequency = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetStatistical_period(v int) *DeployFingerprintAnalysisFingerprint {
	s.Statistical_period = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetIp_threshold(v int) *DeployFingerprintAnalysisFingerprint {
	s.Ip_threshold = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetAction_type(v int) *DeployFingerprintAnalysisFingerprint {
	s.Action_type = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetAction_time(v int) *DeployFingerprintAnalysisFingerprint {
	s.Action_time = &v
	return s
}

func (s *DeployFingerprintAnalysisFingerprint) SetFp_rows(v []*DeployFingerprintAnalysisFpRows) *DeployFingerprintAnalysisFingerprint {
	s.Fp_rows = v
	return s
}

type DeployFingerprintAnalysisFpRows struct {
	// {"en":"Protection scope.
	//  0:All
	//  3:Full URI
	//  4:Regex", "zh_CN":"防护范围。
	//   0：全站
	//  3：完整URI
	//  4：正则匹配"}
	Protection_scope *int `json:"protection_scope,omitempty" xml:"protection_scope,omitempty" require:"true"`
	// {"en":"Request method for protection.
	//  0:All
	//  1:GET
	//  2:POST
	//  3:GET/POST", "zh_CN":"防护的请求方法 。
	//   0：All
	//  1：GET
	//  2：POST
	//  3：GET/POST"}
	Protection_method *int `json:"protection_method,omitempty" xml:"protection_method,omitempty" require:"true"`
	// {"en":"Content of protection path.", "zh_CN":"防护路径内容。"}
	Protection_content *string `json:"protection_content,omitempty" xml:"protection_content,omitempty" require:"true"`
}

func (s DeployFingerprintAnalysisFpRows) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisFpRows) GoString() string {
	return s.String()
}

func (s *DeployFingerprintAnalysisFpRows) SetProtection_scope(v int) *DeployFingerprintAnalysisFpRows {
	s.Protection_scope = &v
	return s
}

func (s *DeployFingerprintAnalysisFpRows) SetProtection_method(v int) *DeployFingerprintAnalysisFpRows {
	s.Protection_method = &v
	return s
}

func (s *DeployFingerprintAnalysisFpRows) SetProtection_content(v string) *DeployFingerprintAnalysisFpRows {
	s.Protection_content = &v
	return s
}

type DeployFingerprintAnalysisResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *DeployFingerprintAnalysisResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployFingerprintAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisResponse) GoString() string {
	return s.String()
}

func (s *DeployFingerprintAnalysisResponse) SetCode(v string) *DeployFingerprintAnalysisResponse {
	s.Code = &v
	return s
}

func (s *DeployFingerprintAnalysisResponse) SetMessage(v string) *DeployFingerprintAnalysisResponse {
	s.Message = &v
	return s
}

func (s *DeployFingerprintAnalysisResponse) SetData(v *DeployFingerprintAnalysisResult) *DeployFingerprintAnalysisResponse {
	s.Data = v
	return s
}

type DeployFingerprintAnalysisResult struct {
	// {"en":"Deployment Version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployFingerprintAnalysisResult) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisResult) GoString() string {
	return s.String()
}

func (s *DeployFingerprintAnalysisResult) SetDeployVersion(v string) *DeployFingerprintAnalysisResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployFingerprintAnalysisResult) SetEstimatetime(v string) *DeployFingerprintAnalysisResult {
	s.Estimatetime = &v
	return s
}

type DeployFingerprintAnalysisPaths struct {
}

func (s DeployFingerprintAnalysisPaths) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisPaths) GoString() string {
	return s.String()
}

type DeployFingerprintAnalysisParameters struct {
}

func (s DeployFingerprintAnalysisParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisParameters) GoString() string {
	return s.String()
}

type DeployFingerprintAnalysisRequestHeader struct {
}

func (s DeployFingerprintAnalysisRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisRequestHeader) GoString() string {
	return s.String()
}

type DeployFingerprintAnalysisResponseHeader struct {
}

func (s DeployFingerprintAnalysisResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployFingerprintAnalysisResponseHeader) GoString() string {
	return s.String()
}

type ListNonSharedWAFRuleExceptionsForWAFRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"WAF rule ID list.","zh_CN":"WAF规则ID列表。"}
	RuleIdList []*int `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesRequest) GoString() string {
	return s.String()
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesRequest) SetDomainList(v []*string) *ListNonSharedWAFRuleExceptionsForWAFRulesRequest {
	s.DomainList = v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesRequest) SetRuleIdList(v []*int) *ListNonSharedWAFRuleExceptionsForWAFRulesRequest {
	s.RuleIdList = v
	return s
}

type ListNonSharedWAFRuleExceptionsForWAFRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesRequestHeader) SetServiceType(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListNonSharedWAFRuleExceptionsForWAFRulesPaths struct {
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesPaths) GoString() string {
	return s.String()
}

type ListNonSharedWAFRuleExceptionsForWAFRulesParameters struct {
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesParameters) GoString() string {
	return s.String()
}

type ListNonSharedWAFRuleExceptionsForWAFRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListNonSharedWAFRuleExceptionsForWAFRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponse) GoString() string {
	return s.String()
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponse) SetCode(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Code = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponse) SetMsg(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponse) SetData(v []*ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) *ListNonSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Data = v
	return s
}

type ListNonSharedWAFRuleExceptionsForWAFRulesResponseData struct {
	// {"en":"Rule exception ID.","zh_CN":"规则例外ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Matching conditions.\nip: IP\npath: Path\nuri: URI\nurlParamName: URI Parameter Name\nurlParamValue: URI Parameter Value\nuserAgent: User Agent\nhttpHeaderName: Request Header Name\nhttpHeaderValue: Request Header Value\ncookie: Cookie\nbody: Body\nbodyParamName: Body Parameter Name\nbodyParamValue: Body Parameter Value","zh_CN":"匹配条件。\nip：IP\npath：路径\nuri：URI\nurlParamName：URI参数名\nurlParamValue：URI参数值\nuserAgent：User Agent\nhttpHeaderName：请求头部名称\nhttpHeaderValue：请求头部值\ncookie：Cookie\nbody：Body\nbodyParamName：Body参数名\nbodyParamValue：Body参数值","exampleValue":"ip,path,uri,urlParamName,urlParamValue,userAgent,httpHeaderName,httpHeaderValue,cookie,body,bodyParamName,bodyParamValue"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// {"en":"Match type,IP can only be EQUAL.\nEQUAL: Equal\nCONTAIN: Contains\nREGEX: Regular match","zh_CN":"匹配类型，IP只能是等于。\nEQUAL：等于\nCONTAIN：包含\nREGEX：正则匹配","exampleValue":"EQUAL,CONTAIN,REGEX"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Rule exceptions.\nWhen matchType=EQUAL, case-sensitive.","zh_CN":"规则例外内容。\nmatchType=EQUAL时，大小写敏感。"}
	ContentList []*string `json:"contentList,omitempty" xml:"contentList,omitempty" require:"true" type:"Repeated"`
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetId(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.Id = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetDomain(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.Domain = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetRuleId(v int) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.RuleId = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetType(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.Type = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetMatchType(v string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.MatchType = &v
	return s
}

func (s *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData) SetContentList(v []*string) *ListNonSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.ContentList = v
	return s
}

type ListNonSharedWAFRuleExceptionsForWAFRulesResponseHeader struct {
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListNonSharedWAFRuleExceptionsForWAFRulesResponseHeader) GoString() string {
	return s.String()
}

type EditConcurrencyLimitRuleRequest struct {
	// {"en":"Rule ID.", "zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Control action,default value: INTERCEPT.
	// INTERCEPT: Block
	// MONITOR: Log", "zh_CN":"控制动作，默认值：INTERCEPT。
	// INTERCEPT：拦截
	// MONITOR：监控"}
	ControlAction *string `json:"controlAction,omitempty" xml:"controlAction,omitempty"`
	// {"en":"Time period.", "zh_CN":"限制时长。"}
	LimitDuration *int `json:"limitDuration,omitempty" xml:"limitDuration,omitempty"`
	// {"en":"Detailing unit,default value:s.
	// s:Second
	// m:Minute.", "zh_CN":"时长单位，默认值：s。
	// s：秒
	// m：分。"}
	LimitUnit *string `json:"limitUnit,omitempty" xml:"limitUnit,omitempty" require:"true"`
	// {"en":"Rule name.", "zh_CN":"规则名称。"}
	PolicyName *string `json:"policyName,omitempty" xml:"policyName,omitempty"`
	// {"en":"Note.", "zh_CN":"备注。"}
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// {"en":"API current limiting threshold.", "zh_CN":"API限流阈值。"}
	ThresholdValue *int `json:"thresholdValue,omitempty" xml:"thresholdValue,omitempty"`
}

func (s EditConcurrencyLimitRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRuleRequest) GoString() string {
	return s.String()
}

func (s *EditConcurrencyLimitRuleRequest) SetId(v string) *EditConcurrencyLimitRuleRequest {
	s.Id = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetControlAction(v string) *EditConcurrencyLimitRuleRequest {
	s.ControlAction = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetLimitDuration(v int) *EditConcurrencyLimitRuleRequest {
	s.LimitDuration = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetLimitUnit(v string) *EditConcurrencyLimitRuleRequest {
	s.LimitUnit = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetPolicyName(v string) *EditConcurrencyLimitRuleRequest {
	s.PolicyName = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetRemark(v string) *EditConcurrencyLimitRuleRequest {
	s.Remark = &v
	return s
}

func (s *EditConcurrencyLimitRuleRequest) SetThresholdValue(v int) *EditConcurrencyLimitRuleRequest {
	s.ThresholdValue = &v
	return s
}

type EditConcurrencyLimitRuleResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s EditConcurrencyLimitRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRuleResponse) GoString() string {
	return s.String()
}

func (s *EditConcurrencyLimitRuleResponse) SetCode(v int) *EditConcurrencyLimitRuleResponse {
	s.Code = &v
	return s
}

func (s *EditConcurrencyLimitRuleResponse) SetMsg(v string) *EditConcurrencyLimitRuleResponse {
	s.Msg = &v
	return s
}

func (s *EditConcurrencyLimitRuleResponse) SetData(v map[string]interface{}) *EditConcurrencyLimitRuleResponse {
	s.Data = v
	return s
}

type EditConcurrencyLimitRulePaths struct {
}

func (s EditConcurrencyLimitRulePaths) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRulePaths) GoString() string {
	return s.String()
}

type EditConcurrencyLimitRuleParameters struct {
}

func (s EditConcurrencyLimitRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRuleParameters) GoString() string {
	return s.String()
}

type EditConcurrencyLimitRuleRequestHeader struct {
}

func (s EditConcurrencyLimitRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRuleRequestHeader) GoString() string {
	return s.String()
}

type EditConcurrencyLimitRuleResponseHeader struct {
}

func (s EditConcurrencyLimitRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s EditConcurrencyLimitRuleResponseHeader) GoString() string {
	return s.String()
}

type ListSharedWAFRuleExceptionsForWAFRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"WAF rule ID list.","zh_CN":"WAF规则ID列表。"}
	RuleIdList []*int `json:"ruleIdList,omitempty" xml:"ruleIdList,omitempty" require:"true" type:"Repeated"`
}

func (s ListSharedWAFRuleExceptionsForWAFRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesRequest) GoString() string {
	return s.String()
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesRequest) SetDomainList(v []*string) *ListSharedWAFRuleExceptionsForWAFRulesRequest {
	s.DomainList = v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesRequest) SetRuleIdList(v []*int) *ListSharedWAFRuleExceptionsForWAFRulesRequest {
	s.RuleIdList = v
	return s
}

type ListSharedWAFRuleExceptionsForWAFRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListSharedWAFRuleExceptionsForWAFRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesRequestHeader) SetServiceType(v string) *ListSharedWAFRuleExceptionsForWAFRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type ListSharedWAFRuleExceptionsForWAFRulesPaths struct {
}

func (s ListSharedWAFRuleExceptionsForWAFRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesPaths) GoString() string {
	return s.String()
}

type ListSharedWAFRuleExceptionsForWAFRulesParameters struct {
}

func (s ListSharedWAFRuleExceptionsForWAFRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesParameters) GoString() string {
	return s.String()
}

type ListSharedWAFRuleExceptionsForWAFRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListSharedWAFRuleExceptionsForWAFRulesResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponse) GoString() string {
	return s.String()
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponse) SetCode(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Code = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponse) SetMsg(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Msg = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponse) SetData(v []*ListSharedWAFRuleExceptionsForWAFRulesResponseData) *ListSharedWAFRuleExceptionsForWAFRulesResponse {
	s.Data = v
	return s
}

type ListSharedWAFRuleExceptionsForWAFRulesResponseData struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Shared exception ID.","zh_CN":"共享例外ID。"}
	ShareId *string `json:"shareId,omitempty" xml:"shareId,omitempty" require:"true"`
	// {"en":"Shared exception name.","zh_CN":"共享例外名称。"}
	ShareName *string `json:"shareName,omitempty" xml:"shareName,omitempty" require:"true"`
	// {"en":"Matching conditions.\nip: IP\npath: Path\nuri: URI\nurlParamName: URI Parameter Name\nurlParamValue: URI Parameter Value\nuserAgent: User Agent\nhttpHeaderName: Request Header Name\nhttpHeaderValue: Request Header Value\ncookie: Cookie\nbody: Body\nbodyParamName: Body Parameter Name\nbodyParamValue: Body Parameter Value","zh_CN":"匹配条件。\nip：IP\npath：路径\nuri：URI\nurlParamName：URI参数名\nurlParamValue：URI参数值\nuserAgent：User Agent\nhttpHeaderName：请求头部名称\nhttpHeaderValue：请求头部值\ncookie：Cookie\nbody：Body\nbodyParamName：Body参数名\nbodyParamValue：Body参数值","exampleValue":"ip,path,uri,urlParamName,urlParamValue,userAgent,httpHeaderName,httpHeaderValue,cookie,body,bodyParamName,bodyParamValue"}
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponseData) GoString() string {
	return s.String()
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponseData) SetDomain(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.Domain = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponseData) SetRuleId(v int) *ListSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.RuleId = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponseData) SetShareId(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.ShareId = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponseData) SetShareName(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.ShareName = &v
	return s
}

func (s *ListSharedWAFRuleExceptionsForWAFRulesResponseData) SetType(v string) *ListSharedWAFRuleExceptionsForWAFRulesResponseData {
	s.Type = &v
	return s
}

type ListSharedWAFRuleExceptionsForWAFRulesResponseHeader struct {
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListSharedWAFRuleExceptionsForWAFRulesResponseHeader) GoString() string {
	return s.String()
}

type UpdateThreatIntelligenceDomainConfigRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Configuration list.","zh_CN":"配置列表。"}
	ConfigList []*UpdateThreatIntelligenceDomainConfigRequestConfigList `json:"configList,omitempty" xml:"configList,omitempty" type:"Repeated"`
}

func (s UpdateThreatIntelligenceDomainConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateThreatIntelligenceDomainConfigRequest) SetDomain(v string) *UpdateThreatIntelligenceDomainConfigRequest {
	s.Domain = &v
	return s
}

func (s *UpdateThreatIntelligenceDomainConfigRequest) SetConfigList(v []*UpdateThreatIntelligenceDomainConfigRequestConfigList) *UpdateThreatIntelligenceDomainConfigRequest {
	s.ConfigList = v
	return s
}

type UpdateThreatIntelligenceDomainConfigRequestConfigList struct {
	// {"en":"Category ID.","zh_CN":"分类ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE: Not Used\nLOG: Log\nBLOCK: Deny","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nBLOCK：拦截","exampleValue":"NO_USE,LOG,BLOCK"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
}

func (s UpdateThreatIntelligenceDomainConfigRequestConfigList) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigRequestConfigList) GoString() string {
	return s.String()
}

func (s *UpdateThreatIntelligenceDomainConfigRequestConfigList) SetId(v string) *UpdateThreatIntelligenceDomainConfigRequestConfigList {
	s.Id = &v
	return s
}

func (s *UpdateThreatIntelligenceDomainConfigRequestConfigList) SetAction(v string) *UpdateThreatIntelligenceDomainConfigRequestConfigList {
	s.Action = &v
	return s
}

type UpdateThreatIntelligenceDomainConfigRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateThreatIntelligenceDomainConfigRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateThreatIntelligenceDomainConfigRequestHeader) SetServiceType(v string) *UpdateThreatIntelligenceDomainConfigRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateThreatIntelligenceDomainConfigPaths struct {
}

func (s UpdateThreatIntelligenceDomainConfigPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigPaths) GoString() string {
	return s.String()
}

type UpdateThreatIntelligenceDomainConfigParameters struct {
}

func (s UpdateThreatIntelligenceDomainConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigParameters) GoString() string {
	return s.String()
}

type UpdateThreatIntelligenceDomainConfigResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateThreatIntelligenceDomainConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateThreatIntelligenceDomainConfigResponse) SetCode(v string) *UpdateThreatIntelligenceDomainConfigResponse {
	s.Code = &v
	return s
}

func (s *UpdateThreatIntelligenceDomainConfigResponse) SetMsg(v string) *UpdateThreatIntelligenceDomainConfigResponse {
	s.Msg = &v
	return s
}

type UpdateThreatIntelligenceDomainConfigResponseHeader struct {
}

func (s UpdateThreatIntelligenceDomainConfigResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateThreatIntelligenceDomainConfigResponseHeader) GoString() string {
	return s.String()
}

type QueryBotFeatureVerificationRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationRequest) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationRequest) SetDomain(v string) *QueryBotFeatureVerificationRequest {
	s.Domain = &v
	return s
}

type QueryBotFeatureVerificationResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *QueryBotFeatureVerificationResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationResponse) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationResponse) SetCode(v string) *QueryBotFeatureVerificationResponse {
	s.Code = &v
	return s
}

func (s *QueryBotFeatureVerificationResponse) SetMessage(v string) *QueryBotFeatureVerificationResponse {
	s.Message = &v
	return s
}

func (s *QueryBotFeatureVerificationResponse) SetData(v *QueryBotFeatureVerificationResult) *QueryBotFeatureVerificationResponse {
	s.Data = v
	return s
}

type QueryBotFeatureVerificationResult struct {
	// {"en":"QueryBotFeatureVerificationBasic configuration.", "zh_CN":"基础配置。"}
	Edgebot_pt_scope *QueryBotFeatureVerificationBasic `json:"edgebot_pt_scope,omitempty" xml:"edgebot_pt_scope,omitempty" require:"true"`
	// {"en":"QueryBotFeatureVerificationCookie Feature Verification.", "zh_CN":"Cookie特性检测。"}
	Edgebot_cookie_challenge *QueryBotFeatureVerificationCookie `json:"edgebot_cookie_challenge,omitempty" xml:"edgebot_cookie_challenge,omitempty" require:"true"`
	// {"en":"QueryBotFeatureVerificationHuman Interaction Verification.", "zh_CN":"机器识别。"}
	Edgebot_human_challenge *QueryBotFeatureVerificationHuman `json:"edgebot_human_challenge,omitempty" xml:"edgebot_human_challenge,omitempty" require:"true"`
	// {"en":"JavaScript Feature Verification.", "zh_CN":"JavaScript特性检测。"}
	Edgebot_js_challenge *QueryBotFeatureVerificationJs `json:"edgebot_js_challenge,omitempty" xml:"edgebot_js_challenge,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationResult) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationResult) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationResult) SetEdgebot_pt_scope(v *QueryBotFeatureVerificationBasic) *QueryBotFeatureVerificationResult {
	s.Edgebot_pt_scope = v
	return s
}

func (s *QueryBotFeatureVerificationResult) SetEdgebot_cookie_challenge(v *QueryBotFeatureVerificationCookie) *QueryBotFeatureVerificationResult {
	s.Edgebot_cookie_challenge = v
	return s
}

func (s *QueryBotFeatureVerificationResult) SetEdgebot_human_challenge(v *QueryBotFeatureVerificationHuman) *QueryBotFeatureVerificationResult {
	s.Edgebot_human_challenge = v
	return s
}

func (s *QueryBotFeatureVerificationResult) SetEdgebot_js_challenge(v *QueryBotFeatureVerificationJs) *QueryBotFeatureVerificationResult {
	s.Edgebot_js_challenge = v
	return s
}

type QueryBotFeatureVerificationJs struct {
	// {"en":"Switch for JavaScript Feature Verification.
	//  0:OFF
	//  1:ON", "zh_CN":"JavaScript特性检测开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Validation mode.
	//  1:Time verification mode
	//  2:Count verification mode", "zh_CN":"验证模式。
	//  1：有效期验证
	//  2：计数验证"}
	Auth_mode *int `json:"auth_mode,omitempty" xml:"auth_mode,omitempty" require:"true"`
	// {"en":"Count static files.If auth_mode=2, it is required.
	//  0:OFF
	//  1:ON ", "zh_CN":"静态文件计数，若auth_mode=2，则必填。
	//  0：关
	//  1：开"}
	Static_count *int `json:"static_count,omitempty" xml:"static_count,omitempty"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Cookie_buffer *string `json:"cookie_buffer,omitempty" xml:"cookie_buffer,omitempty" require:"true"`
	// {"en":"The number of failed validation requests.", "zh_CN":"验证失败请求数。"}
	Threshold *int `json:"threshold,omitempty" xml:"threshold,omitempty"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit: s", "zh_CN":"处理动作持续时间。单位：秒"}
	Cookie_expiration *int `json:"cookie_expiration,omitempty" xml:"cookie_expiration,omitempty" require:"true"`
	// {"en":"White url.", "zh_CN":"例外路径。"}
	White_url []*QueryBotFeatureVerificationWhiteUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
	// {"en":"Enable cookie.
	//  0:OFF
	//  1:ON", "zh_CN":"是否开启Cookie监测。
	//  0：关
	//  1：开"}
	Cookie_challenge_switch *int `json:"cookie_challenge_switch,omitempty" xml:"cookie_challenge_switch,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationJs) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationJs) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationJs) SetEnable(v int) *QueryBotFeatureVerificationJs {
	s.Enable = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetAuth_mode(v int) *QueryBotFeatureVerificationJs {
	s.Auth_mode = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetStatic_count(v int) *QueryBotFeatureVerificationJs {
	s.Static_count = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetCookie_buffer(v string) *QueryBotFeatureVerificationJs {
	s.Cookie_buffer = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetThreshold(v int) *QueryBotFeatureVerificationJs {
	s.Threshold = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetAct(v int) *QueryBotFeatureVerificationJs {
	s.Act = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetCookie_expiration(v int) *QueryBotFeatureVerificationJs {
	s.Cookie_expiration = &v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetWhite_url(v []*QueryBotFeatureVerificationWhiteUrl) *QueryBotFeatureVerificationJs {
	s.White_url = v
	return s
}

func (s *QueryBotFeatureVerificationJs) SetCookie_challenge_switch(v int) *QueryBotFeatureVerificationJs {
	s.Cookie_challenge_switch = &v
	return s
}

type QueryBotFeatureVerificationHuman struct {
	// {"en":"Switch for QueryBotFeatureVerificationHuman Interaction Verification.
	//   0:OFF
	//  1:ON", "zh_CN":"机器检测开关。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Cookie_buffer *int `json:"cookie_buffer,omitempty" xml:"cookie_buffer,omitempty" require:"true"`
	// {"en":"Switch for suspected revalidation.
	//  0:OFF
	//  1:ON", "zh_CN":"疑似再验证。
	//  0：关
	//  1：开"}
	Suspect_status *int `json:"suspect_status,omitempty" xml:"suspect_status,omitempty" require:"true"`
	// {"en":"The validity period of the suspected revalidation. Unit: s.", "zh_CN":"疑似再验证有效期。单位：秒"}
	Chance_time *int `json:"chance_time,omitempty" xml:"chance_time,omitempty" require:"true"`
	// {"en":"Switch for automated tools detection.
	//  0:OFF
	//  1:ON", "zh_CN":"自动框架检测。
	//  0：关
	//  1：开"}
	Auto_status *int `json:"auto_status,omitempty" xml:"auto_status,omitempty" require:"true"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit: s", "zh_CN":"处理动作持续时间。单位：秒"}
	Cookie_expiration *int `json:"cookie_expiration,omitempty" xml:"cookie_expiration,omitempty" require:"true"`
	// {"en":"White url.", "zh_CN":"例外路径。"}
	White_url []*QueryBotFeatureVerificationWhiteUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
	// {"en":"Enable cookie.
	//  0:OFF
	//  1:ON", "zh_CN":"是否开启Cookie监测。
	//  0：关
	//  1：开"}
	Cookie_challenge_switch *int `json:"cookie_challenge_switch,omitempty" xml:"cookie_challenge_switch,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationHuman) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationHuman) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationHuman) SetEnable(v int) *QueryBotFeatureVerificationHuman {
	s.Enable = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetCookie_buffer(v int) *QueryBotFeatureVerificationHuman {
	s.Cookie_buffer = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetSuspect_status(v int) *QueryBotFeatureVerificationHuman {
	s.Suspect_status = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetChance_time(v int) *QueryBotFeatureVerificationHuman {
	s.Chance_time = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetAuto_status(v int) *QueryBotFeatureVerificationHuman {
	s.Auto_status = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetAct(v int) *QueryBotFeatureVerificationHuman {
	s.Act = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetCookie_expiration(v int) *QueryBotFeatureVerificationHuman {
	s.Cookie_expiration = &v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetWhite_url(v []*QueryBotFeatureVerificationWhiteUrl) *QueryBotFeatureVerificationHuman {
	s.White_url = v
	return s
}

func (s *QueryBotFeatureVerificationHuman) SetCookie_challenge_switch(v int) *QueryBotFeatureVerificationHuman {
	s.Cookie_challenge_switch = &v
	return s
}

type QueryBotFeatureVerificationCookie struct {
	// {"en":"Switch for QueryBotFeatureVerificationCookie Feature Verification.
	//  0:OFF
	//  1:On", "zh_CN":"Cookie特性检测开关。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"The number of requests that failed validation. ", "zh_CN":"验证失败的请求数。"}
	Failed_num *int `json:"failed_num,omitempty" xml:"failed_num,omitempty" require:"true"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"First validation. If act=1, it is required.
	//  0:OFF
	//  1:ON", "zh_CN":"首次验证。若 act=1则必填。
	//  1：开
	//  0：关"}
	First_switch *int `json:"first_switch,omitempty" xml:"first_switch,omitempty"`
	// {"en":"Duration. Unit: s", "zh_CN":"持续时间。单位：秒"}
	Block_tm *int `json:"block_tm,omitempty" xml:"block_tm,omitempty" require:"true"`
	// {"en":"White url.", "zh_CN":"例外路径。"}
	White_url []*QueryBotFeatureVerificationWhiteUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
	// {"en":"Default value 5.00", "zh_CN":"默认值 5.00"}
	Short_cookie_expiration *int `json:"short_cookie_expiration,omitempty" xml:"short_cookie_expiration,omitempty" require:"true"`
	// {"en":"Default value 1.00", "zh_CN":"默认值 1.00"}
	Short_cookie_buffer *int `json:"short_cookie_buffer,omitempty" xml:"short_cookie_buffer,omitempty" require:"true"`
	// {"en":"Equal  edgebot_pt_scope.duration_time", "zh_CN":"处理动作持续时间。单位：秒"}
	Cookie_expiration *int `json:"cookie_expiration,omitempty" xml:"cookie_expiration,omitempty" require:"true"`
	// {"en":"Enable js.
	//  0:OFF
	//  1:ON", "zh_CN":"是否开启js监测。
	//  0：关
	//  1：开"}
	Js_challenge_switch *int `json:"js_challenge_switch,omitempty" xml:"js_challenge_switch,omitempty" require:"true"`
	// {"en":"Enable human.
	//  0:OFF
	//  1:ON", "zh_CN":"是否开启Human监测。
	//  0：关
	//  1：开"}
	Human_challenge_switch *int `json:"human_challenge_switch,omitempty" xml:"human_challenge_switch,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationCookie) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationCookie) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationCookie) SetEnable(v int) *QueryBotFeatureVerificationCookie {
	s.Enable = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetPeriod(v int) *QueryBotFeatureVerificationCookie {
	s.Period = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetFailed_num(v int) *QueryBotFeatureVerificationCookie {
	s.Failed_num = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetAct(v int) *QueryBotFeatureVerificationCookie {
	s.Act = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetFirst_switch(v int) *QueryBotFeatureVerificationCookie {
	s.First_switch = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetBlock_tm(v int) *QueryBotFeatureVerificationCookie {
	s.Block_tm = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetWhite_url(v []*QueryBotFeatureVerificationWhiteUrl) *QueryBotFeatureVerificationCookie {
	s.White_url = v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetShort_cookie_expiration(v int) *QueryBotFeatureVerificationCookie {
	s.Short_cookie_expiration = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetShort_cookie_buffer(v int) *QueryBotFeatureVerificationCookie {
	s.Short_cookie_buffer = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetCookie_expiration(v int) *QueryBotFeatureVerificationCookie {
	s.Cookie_expiration = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetJs_challenge_switch(v int) *QueryBotFeatureVerificationCookie {
	s.Js_challenge_switch = &v
	return s
}

func (s *QueryBotFeatureVerificationCookie) SetHuman_challenge_switch(v int) *QueryBotFeatureVerificationCookie {
	s.Human_challenge_switch = &v
	return s
}

type QueryBotFeatureVerificationBasic struct {
	// {"en":"Switch for basic configuration. If the basic function is turned off,all functions of Bot Feature Verification will be turned off at the same time.
	//  0:OFF
	//  1:ON", "zh_CN":"基础配置开关，基础功能关闭，将同时关闭Bot特性检测的所有功能。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"User fingerprint validity period. Unit: s", "zh_CN":"用户指纹有效期。单位：秒"}
	Duration_time *int `json:"duration_time,omitempty" xml:"duration_time,omitempty" require:"true"`
	// {"en":"Protection path.", "zh_CN":"防护路径。"}
	Pt_rows []*QueryBotFeatureVerificationPtRow `json:"pt_rows,omitempty" xml:"pt_rows,omitempty" require:"true" type:"Repeated"`
}

func (s QueryBotFeatureVerificationBasic) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationBasic) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationBasic) SetEnable(v int) *QueryBotFeatureVerificationBasic {
	s.Enable = &v
	return s
}

func (s *QueryBotFeatureVerificationBasic) SetDuration_time(v int) *QueryBotFeatureVerificationBasic {
	s.Duration_time = &v
	return s
}

func (s *QueryBotFeatureVerificationBasic) SetPt_rows(v []*QueryBotFeatureVerificationPtRow) *QueryBotFeatureVerificationBasic {
	s.Pt_rows = v
	return s
}

type QueryBotFeatureVerificationWhiteUrl struct {
	// {"en":"Regex match.
	//  0:OFF
	//  1:ON", "zh_CN":"正则匹配。
	//  0：关闭
	//  1：启用"}
	Regual *int `json:"regual,omitempty" xml:"regual,omitempty" require:"true"`
	// {"en":"URL Content.", "zh_CN":"URL内容。"}
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationWhiteUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationWhiteUrl) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationWhiteUrl) SetRegual(v int) *QueryBotFeatureVerificationWhiteUrl {
	s.Regual = &v
	return s
}

func (s *QueryBotFeatureVerificationWhiteUrl) SetUrl(v string) *QueryBotFeatureVerificationWhiteUrl {
	s.Url = &v
	return s
}

type QueryBotFeatureVerificationPtRow struct {
	// {"en":"Matching method.
	//   0:All Path
	//  1:File Suffix
	//  2:Directory
	//  3:Complete Match
	//  4:Regex Match", "zh_CN":"匹配方式。
	//  0：所有路径
	//  1：文件后缀
	//  2：目录
	//  3：完整匹配
	//  4：正则匹配"}
	Scope *int `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// {"en":"Request method.
	//  0:ALL
	//  1:GET
	//  2:POST
	//  3:GET/POST", "zh_CN":"请求方法。
	//   0：ALL
	//  1：GET
	//  2：POST
	//  3：GET/POST"}
	Method *int `json:"method,omitempty" xml:"method,omitempty" require:"true"`
	// {"en":"Path content. If scope=0, it is not required. Default is '.*'.", "zh_CN":"路径内容，如果scope=0 则非必填。默认.*"}
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s QueryBotFeatureVerificationPtRow) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationPtRow) GoString() string {
	return s.String()
}

func (s *QueryBotFeatureVerificationPtRow) SetScope(v int) *QueryBotFeatureVerificationPtRow {
	s.Scope = &v
	return s
}

func (s *QueryBotFeatureVerificationPtRow) SetMethod(v int) *QueryBotFeatureVerificationPtRow {
	s.Method = &v
	return s
}

func (s *QueryBotFeatureVerificationPtRow) SetContent(v string) *QueryBotFeatureVerificationPtRow {
	s.Content = &v
	return s
}

type QueryBotFeatureVerificationPaths struct {
}

func (s QueryBotFeatureVerificationPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationPaths) GoString() string {
	return s.String()
}

type QueryBotFeatureVerificationParameters struct {
}

func (s QueryBotFeatureVerificationParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationParameters) GoString() string {
	return s.String()
}

type QueryBotFeatureVerificationRequestHeader struct {
}

func (s QueryBotFeatureVerificationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationRequestHeader) GoString() string {
	return s.String()
}

type QueryBotFeatureVerificationResponseHeader struct {
}

func (s QueryBotFeatureVerificationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryBotFeatureVerificationResponseHeader) GoString() string {
	return s.String()
}

type UpdateUaBotsActRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {'en':'Modified Bot category data.', 'zh_CN':'修改的Bot类别数据。'}
	UpdateList []*UpdateUaBotsActBotPublicBotsDTO `json:"updateList,omitempty" xml:"updateList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateUaBotsActRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActRequest) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsActRequest) SetDomain(v string) *UpdateUaBotsActRequest {
	s.Domain = &v
	return s
}

func (s *UpdateUaBotsActRequest) SetUpdateList(v []*UpdateUaBotsActBotPublicBotsDTO) *UpdateUaBotsActRequest {
	s.UpdateList = v
	return s
}

type UpdateUaBotsActResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateUaBotsActResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActResponse) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsActResponse) SetCode(v string) *UpdateUaBotsActResponse {
	s.Code = &v
	return s
}

func (s *UpdateUaBotsActResponse) SetMsg(v string) *UpdateUaBotsActResponse {
	s.Msg = &v
	return s
}

type UpdateUaBotsActBotPublicBotsDTO struct {
	// {'en':'User-Agent based detection category.
	//  auto_version: Automated Tools
	//  crawler_version: Crawler Tools
	//  df_version: Development Framework
	//  http_version: HTTP Library
	//  low_version: Low Version User-Agent
	//  scanner_version: Scanner
	//  wz_version: Fake User-Agent', 'zh_CN':'UA特征检测类别。
	//  auto_version：自动化工具
	//  crawler_version：爬虫工具
	//  df_version：开发框架
	//  http_version：HTTP库
	//  low_version：低版本UA
	//  scanner_version：扫描器
	//  wz_version：伪造UA'}
	BotCategory *string `json:"botCategory,omitempty" xml:"botCategory,omitempty" require:"true"`
	// {'en':'Action.
	//  NO_USE: Not Used
	//  BLOCK: Deny
	//  LOG: Log
	//  ACCEPT: Release', 'zh_CN':'处理动作。
	//  NO_USE：不使用
	//  BLOCK：拦截
	//  LOG：监控
	//  ACCEPT：放行'}
	BotAct *string `json:"botAct,omitempty" xml:"botAct,omitempty" require:"true"`
}

func (s UpdateUaBotsActBotPublicBotsDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActBotPublicBotsDTO) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsActBotPublicBotsDTO) SetBotCategory(v string) *UpdateUaBotsActBotPublicBotsDTO {
	s.BotCategory = &v
	return s
}

func (s *UpdateUaBotsActBotPublicBotsDTO) SetBotAct(v string) *UpdateUaBotsActBotPublicBotsDTO {
	s.BotAct = &v
	return s
}

type UpdateUaBotsActPaths struct {
}

func (s UpdateUaBotsActPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActPaths) GoString() string {
	return s.String()
}

type UpdateUaBotsActParameters struct {
}

func (s UpdateUaBotsActParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActParameters) GoString() string {
	return s.String()
}

type UpdateUaBotsActRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateUaBotsActRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateUaBotsActRequestHeader) SetServiceType(v string) *UpdateUaBotsActRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateUaBotsActResponseHeader struct {
}

func (s UpdateUaBotsActResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateUaBotsActResponseHeader) GoString() string {
	return s.String()
}

type CopyPoliciesToOtherHostnamesRequest struct {
	// {"en":"The reference domain.","zh_CN":"指定域名。"}
	SourceDomain *string `json:"sourceDomain,omitempty" xml:"sourceDomain,omitempty" require:"true"`
	// {"en":"Domains to be accessed.","zh_CN":"目标域名。"}
	TargetDomains []*string `json:"targetDomains,omitempty" xml:"targetDomains,omitempty" require:"true" type:"Repeated"`
	// {"en":"Policy type.\nBLOCK: IP/Geo blocking\nDMS_DEFEND: DDoS protection\nWAF_DEFEND: WAF\nBOT_MANAGE: Bot management\nAPI_DEFEND: API security\nINTELLIGENCE: Threat intelligence\nRATE_LIMIT: Rate limiting\nCUSTOMIZE_RULE: Custom rules\nWHITELIST: Whitelist","zh_CN":"策略类型。\nBLOCK：IP/区域封禁\nDMS_DEFEND：DDoS防护\nWAF_DEFEND：WAF\nBOT_MANAGE：Bot管理\nAPI_DEFEND：API安全\nINTELLIGENCE：威胁情报\nRATE_LIMIT：频率限制\nCUSTOMIZE_RULE：自定义规则\nWHITELIST：白名单","exampleValue":"BLOCK,DMS_DEFEND,WAF_DEFEND,BOT_MANAGE,API_DEFEND,INTELLIGENCE,RATE_LIMIT,CUSTOMIZE_RULE,WHITELIST"}
	PolicyTypes []*string `json:"policyTypes,omitempty" xml:"policyTypes,omitempty" require:"true" type:"Repeated"`
}

func (s CopyPoliciesToOtherHostnamesRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesRequest) GoString() string {
	return s.String()
}

func (s *CopyPoliciesToOtherHostnamesRequest) SetSourceDomain(v string) *CopyPoliciesToOtherHostnamesRequest {
	s.SourceDomain = &v
	return s
}

func (s *CopyPoliciesToOtherHostnamesRequest) SetTargetDomains(v []*string) *CopyPoliciesToOtherHostnamesRequest {
	s.TargetDomains = v
	return s
}

func (s *CopyPoliciesToOtherHostnamesRequest) SetPolicyTypes(v []*string) *CopyPoliciesToOtherHostnamesRequest {
	s.PolicyTypes = v
	return s
}

type CopyPoliciesToOtherHostnamesRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s CopyPoliciesToOtherHostnamesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesRequestHeader) GoString() string {
	return s.String()
}

func (s *CopyPoliciesToOtherHostnamesRequestHeader) SetServiceType(v string) *CopyPoliciesToOtherHostnamesRequestHeader {
	s.ServiceType = &v
	return s
}

type CopyPoliciesToOtherHostnamesPaths struct {
}

func (s CopyPoliciesToOtherHostnamesPaths) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesPaths) GoString() string {
	return s.String()
}

type CopyPoliciesToOtherHostnamesParameters struct {
}

func (s CopyPoliciesToOtherHostnamesParameters) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesParameters) GoString() string {
	return s.String()
}

type CopyPoliciesToOtherHostnamesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s CopyPoliciesToOtherHostnamesResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesResponse) GoString() string {
	return s.String()
}

func (s *CopyPoliciesToOtherHostnamesResponse) SetCode(v string) *CopyPoliciesToOtherHostnamesResponse {
	s.Code = &v
	return s
}

func (s *CopyPoliciesToOtherHostnamesResponse) SetMsg(v string) *CopyPoliciesToOtherHostnamesResponse {
	s.Msg = &v
	return s
}

type CopyPoliciesToOtherHostnamesResponseHeader struct {
}

func (s CopyPoliciesToOtherHostnamesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CopyPoliciesToOtherHostnamesResponseHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceAddRequest struct {
	// {"en":"access protocol,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS", "zh_CN":"访问协议,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS"}
	AccessProtocol *int `json:"accessProtocol,omitempty" xml:"accessProtocol,omitempty"`
	// {"en":"access port(Multiple values are separated by ;/input ranges are separated by -, for example, 22-24 means 22; 23; 24)", "zh_CN":"访问端口(多个以;隔开/输入范围用-隔开，例如22-24表示22;23;24)"}
	AccessPort *string `json:"accessPort,omitempty" xml:"accessPort,omitempty"`
	// {"en":"source ip(Multiple separated by ;)", "zh_CN":"源站IP/源站域名(多个以;隔开)"}
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// {"en":"source port", "zh_CN":"源站端口"}
	SourcePort *string `json:"sourcePort,omitempty" xml:"sourcePort,omitempty"`
	// {"en":"Multi-source load balancing，1:Polling;2:Fast;3:Hash", "zh_CN":"多源负载均衡,1:轮询；2:快速；3:哈希"}
	LoadBalance *string `json:"loadBalance,omitempty" xml:"loadBalance,omitempty"`
	// {"en":"Domain name, transmitted when the access protocol is http/https", "zh_CN":"域名，访问协议为http/https时传"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// {"en":"The http header carries the name of the IP field. It is supported for domain names and must be passed", "zh_CN":"http头部携带IP字段的名称，域名时候支持，必传"}
	HeaderIp *string `json:"headerIp,omitempty" xml:"headerIp,omitempty"`
	// {"en":"Whether to enable the xff function, 0 - close 1 - support when opening the domain name, mandatory", "zh_CN":"是否开启xff功能， 0-关闭 1-开启 域名时候支持，必传"}
	Xff *string `json:"xff,omitempty" xml:"xff,omitempty"`
}

func (s WssMPNetworkServiceAddRequest) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddRequest) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceAddRequest) SetAccessProtocol(v int) *WssMPNetworkServiceAddRequest {
	s.AccessProtocol = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetAccessPort(v string) *WssMPNetworkServiceAddRequest {
	s.AccessPort = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetSource(v string) *WssMPNetworkServiceAddRequest {
	s.Source = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetSourcePort(v string) *WssMPNetworkServiceAddRequest {
	s.SourcePort = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetLoadBalance(v string) *WssMPNetworkServiceAddRequest {
	s.LoadBalance = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetDomain(v string) *WssMPNetworkServiceAddRequest {
	s.Domain = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetHeaderIp(v string) *WssMPNetworkServiceAddRequest {
	s.HeaderIp = &v
	return s
}

func (s *WssMPNetworkServiceAddRequest) SetXff(v string) *WssMPNetworkServiceAddRequest {
	s.Xff = &v
	return s
}

type WssMPNetworkServiceAddResponse struct {
	// {"en":"200:success other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s WssMPNetworkServiceAddResponse) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddResponse) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceAddResponse) SetCode(v string) *WssMPNetworkServiceAddResponse {
	s.Code = &v
	return s
}

func (s *WssMPNetworkServiceAddResponse) SetMsg(v string) *WssMPNetworkServiceAddResponse {
	s.Msg = &v
	return s
}

type WssMPNetworkServiceAddPaths struct {
}

func (s WssMPNetworkServiceAddPaths) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddPaths) GoString() string {
	return s.String()
}

type WssMPNetworkServiceAddParameters struct {
}

func (s WssMPNetworkServiceAddParameters) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddParameters) GoString() string {
	return s.String()
}

type WssMPNetworkServiceAddRequestHeader struct {
}

func (s WssMPNetworkServiceAddRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddRequestHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceAddResponseHeader struct {
}

func (s WssMPNetworkServiceAddResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceAddResponseHeader) GoString() string {
	return s.String()
}

type ReportIncorrectApiAssetRequest struct {
	// {"en":"Asset discovery ID.", "zh_CN":"资产发现ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Feedback.", "zh_CN":"反馈意见。"}
	Feedback *string `json:"feedback,omitempty" xml:"feedback,omitempty"`
}

func (s ReportIncorrectApiAssetRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetRequest) GoString() string {
	return s.String()
}

func (s *ReportIncorrectApiAssetRequest) SetId(v string) *ReportIncorrectApiAssetRequest {
	s.Id = &v
	return s
}

func (s *ReportIncorrectApiAssetRequest) SetFeedback(v string) *ReportIncorrectApiAssetRequest {
	s.Feedback = &v
	return s
}

type ReportIncorrectApiAssetResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.", "zh_CN":"数据。"}
	Data map[string]interface{} `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s ReportIncorrectApiAssetResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetResponse) GoString() string {
	return s.String()
}

func (s *ReportIncorrectApiAssetResponse) SetCode(v int) *ReportIncorrectApiAssetResponse {
	s.Code = &v
	return s
}

func (s *ReportIncorrectApiAssetResponse) SetMsg(v string) *ReportIncorrectApiAssetResponse {
	s.Msg = &v
	return s
}

func (s *ReportIncorrectApiAssetResponse) SetData(v map[string]interface{}) *ReportIncorrectApiAssetResponse {
	s.Data = v
	return s
}

type ReportIncorrectApiAssetPaths struct {
}

func (s ReportIncorrectApiAssetPaths) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetPaths) GoString() string {
	return s.String()
}

type ReportIncorrectApiAssetParameters struct {
}

func (s ReportIncorrectApiAssetParameters) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetParameters) GoString() string {
	return s.String()
}

type ReportIncorrectApiAssetRequestHeader struct {
}

func (s ReportIncorrectApiAssetRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetRequestHeader) GoString() string {
	return s.String()
}

type ReportIncorrectApiAssetResponseHeader struct {
}

func (s ReportIncorrectApiAssetResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ReportIncorrectApiAssetResponseHeader) GoString() string {
	return s.String()
}

type ListDomainCustomizeBotsRequest struct {
	// {'en':'Hostname.', 'zh_CN':'域名。'}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s ListDomainCustomizeBotsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsRequest) GoString() string {
	return s.String()
}

func (s *ListDomainCustomizeBotsRequest) SetDomain(v string) *ListDomainCustomizeBotsRequest {
	s.Domain = &v
	return s
}

type ListDomainCustomizeBotsConditionVO struct {
	// {'en':'Matching condition name:
	// IP_IPS: IP/IP segment
	// UA: User-agent', 'zh_CN':'匹配条件名称：
	// IP_IPS：IP/IP段
	// UA：User-agent'}
	ConditionName *string `json:"conditionName,omitempty" xml:"conditionName,omitempty" require:"true"`
	// {'en':'Condition value list. ', 'zh_CN':'条件值列表。'}
	ConditionValueList []*string `json:"conditionValueList,omitempty" xml:"conditionValueList,omitempty" require:"true" type:"Repeated"`
	// {'en':'Matching condition function, the value can be:
	// EQUAL: equal
	// NOT_EQUAL: Not equal
	// REGEX: match regular
	// NONE: empty or non-existent
	// CONTAIN:contains
	// NOT_CONTAIN:Does not contain
	// NOT_REGEX: regular does not match
	// START_WITH: starts with
	// END_WITH: ends with
	// WILDCARD: wildcard matches
	// NOT_WILDCARD: wildcard does not match', 'zh_CN':'匹配条件函数，可能的值：
	// EQUAL：相等
	// NOT_EQUAL：不相等
	// REGEX：匹配正则
	// NONE：为空或不存在
	// CONTAIN：包含
	// NOT_CONTAIN：不包含
	// NOT_REGEX：正则不匹配
	// START_WITH：开头是
	// END_WITH：结尾是
	// WILDCARD：通配符匹配
	// NOT_WILDCARD：通配符不匹配'}
	ConditionFunc *string `json:"conditionFunc,omitempty" xml:"conditionFunc,omitempty" require:"true"`
}

func (s ListDomainCustomizeBotsConditionVO) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsConditionVO) GoString() string {
	return s.String()
}

func (s *ListDomainCustomizeBotsConditionVO) SetConditionName(v string) *ListDomainCustomizeBotsConditionVO {
	s.ConditionName = &v
	return s
}

func (s *ListDomainCustomizeBotsConditionVO) SetConditionValueList(v []*string) *ListDomainCustomizeBotsConditionVO {
	s.ConditionValueList = v
	return s
}

func (s *ListDomainCustomizeBotsConditionVO) SetConditionFunc(v string) *ListDomainCustomizeBotsConditionVO {
	s.ConditionFunc = &v
	return s
}

type ListDomainCustomizeBotsBaseVO struct {
	// {'en':'Id.', 'zh_CN':'Id。'}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {'en':'Creator.', 'zh_CN':'创建者。'}
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// {'en':'Rule Name.', 'zh_CN':'规则名称。'}
	BotName *string `json:"botName,omitempty" xml:"botName,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'规则描述。'}
	BotDescription *string `json:"botDescription,omitempty" xml:"botDescription,omitempty"`
	// {'en':'Actions:
	// BLOCK: block
	// LOG: log
	// ACCEPT: release', 'zh_CN':'处理动作：
	// BLOCK：拦截
	// LOG：监控
	// ACCEPT：放行'}
	BotAct *string `json:"botAct,omitempty" xml:"botAct,omitempty" require:"true"`
	// {'en':'Matching conditions.', 'zh_CN':'匹配条件。'}
	ConditionList []*ListDomainCustomizeBotsConditionVO `json:"conditionList,omitempty" xml:"conditionList,omitempty" type:"Repeated"`
}

func (s ListDomainCustomizeBotsBaseVO) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsBaseVO) GoString() string {
	return s.String()
}

func (s *ListDomainCustomizeBotsBaseVO) SetId(v string) *ListDomainCustomizeBotsBaseVO {
	s.Id = &v
	return s
}

func (s *ListDomainCustomizeBotsBaseVO) SetCreator(v string) *ListDomainCustomizeBotsBaseVO {
	s.Creator = &v
	return s
}

func (s *ListDomainCustomizeBotsBaseVO) SetBotName(v string) *ListDomainCustomizeBotsBaseVO {
	s.BotName = &v
	return s
}

func (s *ListDomainCustomizeBotsBaseVO) SetBotDescription(v string) *ListDomainCustomizeBotsBaseVO {
	s.BotDescription = &v
	return s
}

func (s *ListDomainCustomizeBotsBaseVO) SetBotAct(v string) *ListDomainCustomizeBotsBaseVO {
	s.BotAct = &v
	return s
}

func (s *ListDomainCustomizeBotsBaseVO) SetConditionList(v []*ListDomainCustomizeBotsConditionVO) *ListDomainCustomizeBotsBaseVO {
	s.ConditionList = v
	return s
}

type ListDomainCustomizeBotsResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {'en':'Data.', 'zh_CN':'出参数据。'}
	Data []*ListDomainCustomizeBotsBaseVO `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListDomainCustomizeBotsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsResponse) GoString() string {
	return s.String()
}

func (s *ListDomainCustomizeBotsResponse) SetCode(v string) *ListDomainCustomizeBotsResponse {
	s.Code = &v
	return s
}

func (s *ListDomainCustomizeBotsResponse) SetMsg(v string) *ListDomainCustomizeBotsResponse {
	s.Msg = &v
	return s
}

func (s *ListDomainCustomizeBotsResponse) SetData(v []*ListDomainCustomizeBotsBaseVO) *ListDomainCustomizeBotsResponse {
	s.Data = v
	return s
}

type ListDomainCustomizeBotsPaths struct {
}

func (s ListDomainCustomizeBotsPaths) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsPaths) GoString() string {
	return s.String()
}

type ListDomainCustomizeBotsParameters struct {
}

func (s ListDomainCustomizeBotsParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsParameters) GoString() string {
	return s.String()
}

type ListDomainCustomizeBotsRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListDomainCustomizeBotsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsRequestHeader) GoString() string {
	return s.String()
}

func (s *ListDomainCustomizeBotsRequestHeader) SetServiceType(v string) *ListDomainCustomizeBotsRequestHeader {
	s.ServiceType = &v
	return s
}

type ListDomainCustomizeBotsResponseHeader struct {
}

func (s ListDomainCustomizeBotsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListDomainCustomizeBotsResponseHeader) GoString() string {
	return s.String()
}

type AddExactRuleRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule Name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule Description.", "zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Action.
	//  0:Bypass
	// 1:Block
	//  2:Log ", "zh_CN":"处理动作。
	//  0：放行
	//  1：拦截
	//  2：监控"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Match AddExactRuleCondition.", "zh_CN":"匹配条件。"}
	DeployContent []*AddExactRuleCondition `json:"deployContent,omitempty" xml:"deployContent,omitempty" require:"true" type:"Repeated"`
}

func (s AddExactRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleRequest) GoString() string {
	return s.String()
}

func (s *AddExactRuleRequest) SetServiceType(v string) *AddExactRuleRequest {
	s.ServiceType = &v
	return s
}

func (s *AddExactRuleRequest) SetRuleName(v string) *AddExactRuleRequest {
	s.RuleName = &v
	return s
}

func (s *AddExactRuleRequest) SetRuleDescription(v string) *AddExactRuleRequest {
	s.RuleDescription = &v
	return s
}

func (s *AddExactRuleRequest) SetAction(v string) *AddExactRuleRequest {
	s.Action = &v
	return s
}

func (s *AddExactRuleRequest) SetDeployContent(v []*AddExactRuleCondition) *AddExactRuleRequest {
	s.DeployContent = v
	return s
}

type AddExactRuleCondition struct {
	// {"en":"Matching condition type.
	//  Other matching conditions except the Http Header cannot be set to and repeatedly. Duplicate matching conditions are defined as matching conditions and matching logic are identical,for example,IP =.
	//  0:IP
	//  1:IP Segment
	//  2:URI
	//  3:User-Agent
	//  4:Cookie
	//  5:Referer
	//  6:HTTP Header
	//  7:Area
	//  8:HTTP Method
	//  9:Path  ", "zh_CN":"匹配条件类型。匹配条件，除Http Header外，其他匹配条件不允许重复配置为且。匹配条件重复的定义是，条件与匹配逻辑完全一致，如：IP = 。
	//  0：IP
	//  1：IP段
	//  2：URI
	//  3：User-agent
	//  4：Cookie
	//  5：Referer
	//  6：HTTP Header
	//   7：区域
	//  8：请求方法
	//  9：路径 "}
	MatchCondition *string `json:"matchCondition,omitempty" xml:"matchCondition,omitempty" require:"true"`
	// {"en":"Matching condition operation.
	//   IF matchCondition=IP/IP Segment/Area/HTTP Method, The operator=0/1.
	//  IF matchCondition=URI/Path, The operator=0/1/3/4.
	//  IF matchCondition=User-Agent/Cookie/Referer/HTTP Header, The operator=0/1/2/3/4.
	//  0:=
	//  1:!=
	//  2:Empty or doesn't exist
	//  3:=(Regex)
	//  4:!=(Regex) ",
	//     "zh_CN":"匹配条件操作。
	//  当matchCondition=IP/IPS/区域/请求方法，则operator=0/1。
	//   当matchCondition=URI/路径，则operator=0/1/3/4。
	//  当matchCondition=User-agent/Cookie/Referer/HTTP Header，则operator=0/1/2/3/4。
	//  0：=
	//  1：!=
	//  2：为空或不存在
	//  3：=正则
	//  4：!=正则 "}
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// {"en":"The first matching condition value.
	//   IF matchCondition=IP/IP Segment/URI/Path/Area/HTTP Method/HTTP Header, The firstCondition is not empty.
	//  IF matchCondition=User-Agent/Cookie/Referer and The operator=2, The firstCondition is null; The operator=0/1/3/4, The firstCondition is not null.
	//   IF matchCondition=Area,The firstCondition=/POST/HEAD/PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH/PROPFIND/MKCOL/COPY/MOVE/LOCK/UNLOCK.
	//  IF matchCondition=Area, firstCondition refers to the API center: https://www.wangsu.com/document/api-doc/Overview 8、 Appendix description, countries, regions and provinces in Schedule 1.",
	//     "zh_CN":"第一匹配条件值。
	//   当matchCondition=IP/IPS/URI/路径/区域/请求方法/HTTP Header，则firstCondition不为空。
	//   当matchCondition=User-agent/Cookie/Referer 且 operator=2， 则firstCondition为空；operator=0或1或3或4，则firstCondition不为空。
	//   当matchCondition=请求方法，则firstCondition=GET/POST/HEAD/PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH/PROPFIND/MKCOL/COPY/MOVE/LOCK/UNLOCK。
	//  当matchCondition=区域，则firstCondition参考API中心：https://www.wangsu.com/document/api-doc/Overview 八、附录说明，附表1中的国家地区、省份。"}
	FirstCondition []*string `json:"firstCondition,omitempty" xml:"firstCondition,omitempty" type:"Repeated"`
	// {"en":"The second matching condition value.
	//   IF matchCondition=Area and operator=0/1/3/4, The secondCondition is required.", "zh_CN":"第二匹配条件值。
	//  当matchCondition=区域且operator=0或1或3或4，则secondCondition必填。 "}
	SecondCondition []*string `json:"secondCondition,omitempty" xml:"secondCondition,omitempty" type:"Repeated"`
}

func (s AddExactRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleCondition) GoString() string {
	return s.String()
}

func (s *AddExactRuleCondition) SetMatchCondition(v string) *AddExactRuleCondition {
	s.MatchCondition = &v
	return s
}

func (s *AddExactRuleCondition) SetOperator(v string) *AddExactRuleCondition {
	s.Operator = &v
	return s
}

func (s *AddExactRuleCondition) SetFirstCondition(v []*string) *AddExactRuleCondition {
	s.FirstCondition = v
	return s
}

func (s *AddExactRuleCondition) SetSecondCondition(v []*string) *AddExactRuleCondition {
	s.SecondCondition = v
	return s
}

type AddExactRuleResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *AddExactRuleResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s AddExactRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleResponse) GoString() string {
	return s.String()
}

func (s *AddExactRuleResponse) SetCode(v string) *AddExactRuleResponse {
	s.Code = &v
	return s
}

func (s *AddExactRuleResponse) SetMessage(v string) *AddExactRuleResponse {
	s.Message = &v
	return s
}

func (s *AddExactRuleResponse) SetData(v *AddExactRuleResp) *AddExactRuleResponse {
	s.Data = v
	return s
}

type AddExactRuleResp struct {
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
}

func (s AddExactRuleResp) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleResp) GoString() string {
	return s.String()
}

func (s *AddExactRuleResp) SetRuleId(v string) *AddExactRuleResp {
	s.RuleId = &v
	return s
}

type AddExactRulePaths struct {
}

func (s AddExactRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AddExactRulePaths) GoString() string {
	return s.String()
}

type AddExactRuleParameters struct {
}

func (s AddExactRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleParameters) GoString() string {
	return s.String()
}

type AddExactRuleRequestHeader struct {
}

func (s AddExactRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleRequestHeader) GoString() string {
	return s.String()
}

type AddExactRuleResponseHeader struct {
}

func (s AddExactRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AddExactRuleResponseHeader) GoString() string {
	return s.String()
}

type DeployBlockPageRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Status code. Common status codes are supported:
	//  200;204;206;301;302;304;307;400;401;403;404;500;501;503,and other user-defined status codes.", "zh_CN":"状态码。
	//    200;204;206;301;302;304;307;400;401;403;404;500;501;503，以及其他自定义状态码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Response content definition.", "zh_CN":"响应内容定义。"}
	Response *string `json:"response,omitempty" xml:"response,omitempty" require:"true"`
	// {"en":"Block page setting switch.
	//  0:OFF
	//  1:ON", "zh_CN":"开关。
	//  0：关闭
	//  1：启用"}
	Enable *string `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"The content type of the blocked page. Multiple with; separate.
	//  text/html
	//  application/json
	//  application/x-www-form-urlencoded ", "zh_CN":"拦截页面的内容类型。多个以;隔开。
	//  text/html
	//  application/json
	//  application/x-www-form-urlencoded "}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty" require:"true"`
}

func (s DeployBlockPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageRequest) GoString() string {
	return s.String()
}

func (s *DeployBlockPageRequest) SetDomain(v string) *DeployBlockPageRequest {
	s.Domain = &v
	return s
}

func (s *DeployBlockPageRequest) SetCode(v int) *DeployBlockPageRequest {
	s.Code = &v
	return s
}

func (s *DeployBlockPageRequest) SetResponse(v string) *DeployBlockPageRequest {
	s.Response = &v
	return s
}

func (s *DeployBlockPageRequest) SetEnable(v string) *DeployBlockPageRequest {
	s.Enable = &v
	return s
}

func (s *DeployBlockPageRequest) SetContentType(v string) *DeployBlockPageRequest {
	s.ContentType = &v
	return s
}

type DeployBlockPageResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Information returned. Return 'Success' when successful.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *DeployBlockPageResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployBlockPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageResponse) GoString() string {
	return s.String()
}

func (s *DeployBlockPageResponse) SetCode(v string) *DeployBlockPageResponse {
	s.Code = &v
	return s
}

func (s *DeployBlockPageResponse) SetMessage(v string) *DeployBlockPageResponse {
	s.Message = &v
	return s
}

func (s *DeployBlockPageResponse) SetData(v *DeployBlockPageResult) *DeployBlockPageResponse {
	s.Data = v
	return s
}

type DeployBlockPageResult struct {
	// {"en":"Deployment Version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployBlockPageResult) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageResult) GoString() string {
	return s.String()
}

func (s *DeployBlockPageResult) SetDeployVersion(v string) *DeployBlockPageResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployBlockPageResult) SetEstimatetime(v string) *DeployBlockPageResult {
	s.Estimatetime = &v
	return s
}

type DeployBlockPagePaths struct {
}

func (s DeployBlockPagePaths) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPagePaths) GoString() string {
	return s.String()
}

type DeployBlockPageParameters struct {
}

func (s DeployBlockPageParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageParameters) GoString() string {
	return s.String()
}

type DeployBlockPageRequestHeader struct {
}

func (s DeployBlockPageRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageRequestHeader) GoString() string {
	return s.String()
}

type DeployBlockPageResponseHeader struct {
}

func (s DeployBlockPageResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBlockPageResponseHeader) GoString() string {
	return s.String()
}

type DeleteRuleExceptionRequest struct {
	// {"en":"Exception ID.", "zh_CN":"例外ID。"}
	Id *int32 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteRuleExceptionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleExceptionRequest) SetId(v int32) *DeleteRuleExceptionRequest {
	s.Id = &v
	return s
}

type DeleteRuleExceptionResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s DeleteRuleExceptionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleExceptionResponse) SetCode(v string) *DeleteRuleExceptionResponse {
	s.Code = &v
	return s
}

func (s *DeleteRuleExceptionResponse) SetMessage(v string) *DeleteRuleExceptionResponse {
	s.Message = &v
	return s
}

type DeleteRuleExceptionPaths struct {
}

func (s DeleteRuleExceptionPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionPaths) GoString() string {
	return s.String()
}

type DeleteRuleExceptionParameters struct {
}

func (s DeleteRuleExceptionParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionParameters) GoString() string {
	return s.String()
}

type DeleteRuleExceptionRequestHeader struct {
}

func (s DeleteRuleExceptionRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionRequestHeader) GoString() string {
	return s.String()
}

type DeleteRuleExceptionResponseHeader struct {
}

func (s DeleteRuleExceptionResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleExceptionResponseHeader) GoString() string {
	return s.String()
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequest struct {
	// {"en":"Sharing exception to remove.","zh_CN":"要移除的共享例外。"}
	DelDTOList []*DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList `json:"delDTOList,omitempty" xml:"delDTOList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequest) SetDelDTOList(v []*DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequest {
	s.DelDTOList = v
	return s
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Exception ID.","zh_CN":"例外ID。"}
	ShareIdList []*string `json:"shareIdList,omitempty" xml:"shareIdList,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) GoString() string {
	return s.String()
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) SetDomain(v string) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList {
	s.Domain = &v
	return s
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) SetRuleId(v int) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList {
	s.RuleId = &v
	return s
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList) SetShareIdList(v []*string) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestDelDTOList {
	s.ShareIdList = v
	return s
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestHeader) SetServiceType(v string) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesPaths struct {
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesPaths) GoString() string {
	return s.String()
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesParameters struct {
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesParameters) GoString() string {
	return s.String()
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse) SetCode(v string) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse {
	s.Code = &v
	return s
}

func (s *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse) SetMsg(v string) *DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponse {
	s.Msg = &v
	return s
}

type DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponseHeader struct {
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteSharedWAFExceptionsAssociatedWithWAFManagedRulesResponseHeader) GoString() string {
	return s.String()
}

type EditExactRuleRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule Name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule Description.", "zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Action.
	//  0:Bypass
	// 1:Block
	//  2:Log ", "zh_CN":"处理动作。
	//  0：放行
	//  1：拦截
	//  2：监控"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Match EditExactRuleCondition.", "zh_CN":"匹配条件。"}
	DeployContent []*EditExactRuleCondition `json:"deployContent,omitempty" xml:"deployContent,omitempty" require:"true" type:"Repeated"`
}

func (s EditExactRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleRequest) GoString() string {
	return s.String()
}

func (s *EditExactRuleRequest) SetServiceType(v string) *EditExactRuleRequest {
	s.ServiceType = &v
	return s
}

func (s *EditExactRuleRequest) SetRuleId(v string) *EditExactRuleRequest {
	s.RuleId = &v
	return s
}

func (s *EditExactRuleRequest) SetRuleName(v string) *EditExactRuleRequest {
	s.RuleName = &v
	return s
}

func (s *EditExactRuleRequest) SetRuleDescription(v string) *EditExactRuleRequest {
	s.RuleDescription = &v
	return s
}

func (s *EditExactRuleRequest) SetAction(v string) *EditExactRuleRequest {
	s.Action = &v
	return s
}

func (s *EditExactRuleRequest) SetDeployContent(v []*EditExactRuleCondition) *EditExactRuleRequest {
	s.DeployContent = v
	return s
}

type EditExactRuleCondition struct {
	// {"en":"Matching condition type.
	//  Other matching conditions except the Http Header cannot be set to and repeatedly. Duplicate matching conditions are defined as matching conditions and matching logic are identical,for example,IP =.
	//  0:IP
	//  1:IP Segment
	//  2:URI
	//  3:User-Agent
	//  4:Cookie
	//  5:Referer
	//  6:HTTP Header
	//  7:Area
	//  8:HTTP Method
	//  9:Path  ", "zh_CN":"匹配条件类型。匹配条件，除Http Header外，其他匹配条件不允许重复配置为且。匹配条件重复的定义是，条件与匹配逻辑完全一致，如：IP = 。
	//  0：IP
	//  1：IP段
	//  2：URI
	//  3：User-agent
	//  4：Cookie
	//  5：Referer
	//  6：HTTP Header
	//   7：区域
	//  8：请求方法
	//  9：路径 "}
	MatchCondition *string `json:"matchCondition,omitempty" xml:"matchCondition,omitempty" require:"true"`
	// {"en":"Matching condition operation.
	//   IF matchCondition=IP/IP Segment/Area/HTTP Method, The operator=0/1.
	//  IF matchCondition=URI/Path, The operator=0/1/3/4.
	//  IF matchCondition=User-Agent/Cookie/Referer/HTTP Header, The operator=0/1/2/3/4.
	//  0:=
	//  1:!=
	//  2:Empty or doesn't exist
	//  3:=(Regex)
	//  4:!=(Regex) ",
	//     "zh_CN":"匹配条件操作。
	//  当matchCondition=IP/IPS/区域/请求方法，则operator=0/1。
	//   当matchCondition=URI/路径，则operator=0/1/3/4。
	//  当matchCondition=User-agent/Cookie/Referer/HTTP Header，则operator=0/1/2/3/4。
	//  0：=
	//  1：!=
	//  2：为空或不存在
	//  3：=正则
	//  4：!=正则 "}
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// {"en":"The first matching condition value.
	//   IF matchCondition=IP/IP Segment/URI/Path/Area/HTTP Method/HTTP Header, The firstCondition is not empty.
	//  IF matchCondition=User-Agent/Cookie/Referer and The operator=2, The firstCondition is null; The operator=0/1/3/4, The firstCondition is not null.
	//   IF matchCondition=Area,The firstCondition=/POST/HEAD/PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH/PROPFIND/MKCOL/COPY/MOVE/LOCK/UNLOCK.
	//  IF matchCondition=Area, firstCondition refers to the API center: https://www.wangsu.com/document/api-doc/Overview 8、 Appendix description, countries, regions and provinces in Schedule 1.",
	//     "zh_CN":"第一匹配条件值。
	//   当matchCondition=IP/IPS/URI/路径/区域/请求方法/HTTP Header，则firstCondition不为空。
	//   当matchCondition=User-agent/Cookie/Referer 且 operator=2， 则firstCondition为空；operator=0或1或3或4，则firstCondition不为空。
	//   当matchCondition=请求方法，则firstCondition=GET/POST/HEAD/PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH/PROPFIND/MKCOL/COPY/MOVE/LOCK/UNLOCK。
	//  当matchCondition=区域，则firstCondition参考API中心：https://www.wangsu.com/document/api-doc/Overview 八、附录说明，附表1中的国家地区、省份。"}
	FirstCondition []*string `json:"firstCondition,omitempty" xml:"firstCondition,omitempty" type:"Repeated"`
	// {"en":"The second matching condition value.
	//   IF matchCondition=Area and operator=0/1/3/4, The secondCondition is required.", "zh_CN":"第二匹配条件值。
	//  当matchCondition=区域且operator=0或1或3或4，则secondCondition必填。 "}
	SecondCondition []*string `json:"secondCondition,omitempty" xml:"secondCondition,omitempty" type:"Repeated"`
}

func (s EditExactRuleCondition) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleCondition) GoString() string {
	return s.String()
}

func (s *EditExactRuleCondition) SetMatchCondition(v string) *EditExactRuleCondition {
	s.MatchCondition = &v
	return s
}

func (s *EditExactRuleCondition) SetOperator(v string) *EditExactRuleCondition {
	s.Operator = &v
	return s
}

func (s *EditExactRuleCondition) SetFirstCondition(v []*string) *EditExactRuleCondition {
	s.FirstCondition = v
	return s
}

func (s *EditExactRuleCondition) SetSecondCondition(v []*string) *EditExactRuleCondition {
	s.SecondCondition = v
	return s
}

type EditExactRuleResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *EditExactRuleResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s EditExactRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleResponse) GoString() string {
	return s.String()
}

func (s *EditExactRuleResponse) SetCode(v string) *EditExactRuleResponse {
	s.Code = &v
	return s
}

func (s *EditExactRuleResponse) SetMessage(v string) *EditExactRuleResponse {
	s.Message = &v
	return s
}

func (s *EditExactRuleResponse) SetData(v *EditExactRuleResp) *EditExactRuleResponse {
	s.Data = v
	return s
}

type EditExactRuleResp struct {
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"association domain.", "zh_CN":"关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s EditExactRuleResp) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleResp) GoString() string {
	return s.String()
}

func (s *EditExactRuleResp) SetRuleId(v string) *EditExactRuleResp {
	s.RuleId = &v
	return s
}

func (s *EditExactRuleResp) SetDomainList(v []*string) *EditExactRuleResp {
	s.DomainList = v
	return s
}

type EditExactRulePaths struct {
}

func (s EditExactRulePaths) String() string {
	return tea.Prettify(s)
}

func (s EditExactRulePaths) GoString() string {
	return s.String()
}

type EditExactRuleParameters struct {
}

func (s EditExactRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleParameters) GoString() string {
	return s.String()
}

type EditExactRuleRequestHeader struct {
}

func (s EditExactRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleRequestHeader) GoString() string {
	return s.String()
}

type EditExactRuleResponseHeader struct {
}

func (s EditExactRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s EditExactRuleResponseHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceUpdateRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// {"en":"access protocol,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS", "zh_CN":"访问协议,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS"}
	AccessProtocol *int `json:"accessProtocol,omitempty" xml:"accessProtocol,omitempty"`
	// {"en":"source port", "zh_CN":"源站端口"}
	SourcePort *string `json:"sourcePort,omitempty" xml:"sourcePort,omitempty"`
	// {"en":"source ip(Multiple separated by ;)", "zh_CN":"源站IP/源站域名(多个以;隔开)"}
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// {"en":"Multi-source load balancing，1:Polling;2:Fast;3:Hash", "zh_CN":"多源负载均衡,1:轮询；2:快速；3:哈希"}
	LoadBalance *string `json:"loadBalance,omitempty" xml:"loadBalance,omitempty"`
	// {"en":"Whether to enable the xff function 0; 1 Required when the shutdown protocol is http", "zh_CN":"是否开启xff功能 0开启；1关闭 协议为http时必传"}
	Xff *string `json:"xff,omitempty" xml:"xff,omitempty"`
	// {"en":"The http header carries the name of the ip field, which must be passed when the protocol is http", "zh_CN":"http头部携带ip字段的名称，协议为http时必传"}
	HeaderIp *string `json:"headerIp,omitempty" xml:"headerIp,omitempty"`
}

func (s WssMPNetworkServiceUpdateRequest) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdateRequest) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceUpdateRequest) SetId(v string) *WssMPNetworkServiceUpdateRequest {
	s.Id = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetAccessProtocol(v int) *WssMPNetworkServiceUpdateRequest {
	s.AccessProtocol = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetSourcePort(v string) *WssMPNetworkServiceUpdateRequest {
	s.SourcePort = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetSource(v string) *WssMPNetworkServiceUpdateRequest {
	s.Source = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetLoadBalance(v string) *WssMPNetworkServiceUpdateRequest {
	s.LoadBalance = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetXff(v string) *WssMPNetworkServiceUpdateRequest {
	s.Xff = &v
	return s
}

func (s *WssMPNetworkServiceUpdateRequest) SetHeaderIp(v string) *WssMPNetworkServiceUpdateRequest {
	s.HeaderIp = &v
	return s
}

type WssMPNetworkServiceUpdateResponse struct {
	// {"en":"200:success other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s WssMPNetworkServiceUpdateResponse) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdateResponse) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceUpdateResponse) SetCode(v string) *WssMPNetworkServiceUpdateResponse {
	s.Code = &v
	return s
}

func (s *WssMPNetworkServiceUpdateResponse) SetMsg(v string) *WssMPNetworkServiceUpdateResponse {
	s.Msg = &v
	return s
}

type WssMPNetworkServiceUpdatePaths struct {
}

func (s WssMPNetworkServiceUpdatePaths) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdatePaths) GoString() string {
	return s.String()
}

type WssMPNetworkServiceUpdateParameters struct {
}

func (s WssMPNetworkServiceUpdateParameters) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdateParameters) GoString() string {
	return s.String()
}

type WssMPNetworkServiceUpdateRequestHeader struct {
}

func (s WssMPNetworkServiceUpdateRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdateRequestHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceUpdateResponseHeader struct {
}

func (s WssMPNetworkServiceUpdateResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceUpdateResponseHeader) GoString() string {
	return s.String()
}

type ApplyRecommendationsRequest struct {
	// {'en':'Recommendation ID.', 'zh_CN':'建议ID。'}
	IdList []*string `json:"idList,omitempty" xml:"idList,omitempty" require:"true" type:"Repeated"`
}

func (s ApplyRecommendationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsRequest) GoString() string {
	return s.String()
}

func (s *ApplyRecommendationsRequest) SetIdList(v []*string) *ApplyRecommendationsRequest {
	s.IdList = v
	return s
}

type ApplyRecommendationsResponse struct {
	// {'en':'Please refer to the error code for exceptions.', 'zh_CN':'请参照错误码。','dictionary':'belong=WAAP-MS-Ext|dict=waap_retCodeEnum'}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {'en':'Description.', 'zh_CN':'描述信息。'}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s ApplyRecommendationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsResponse) GoString() string {
	return s.String()
}

func (s *ApplyRecommendationsResponse) SetCode(v string) *ApplyRecommendationsResponse {
	s.Code = &v
	return s
}

func (s *ApplyRecommendationsResponse) SetMsg(v string) *ApplyRecommendationsResponse {
	s.Msg = &v
	return s
}

type ApplyRecommendationsPaths struct {
}

func (s ApplyRecommendationsPaths) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsPaths) GoString() string {
	return s.String()
}

type ApplyRecommendationsParameters struct {
}

func (s ApplyRecommendationsParameters) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsParameters) GoString() string {
	return s.String()
}

type ApplyRecommendationsRequestHeader struct {
	// {"zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ApplyRecommendationsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsRequestHeader) GoString() string {
	return s.String()
}

func (s *ApplyRecommendationsRequestHeader) SetServiceType(v string) *ApplyRecommendationsRequestHeader {
	s.ServiceType = &v
	return s
}

type ApplyRecommendationsResponseHeader struct {
}

func (s ApplyRecommendationsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecommendationsResponseHeader) GoString() string {
	return s.String()
}

type DeleteApiRequest struct {
	// {"en":"List of API ID to delete.", "zh_CN":"要删除的API ID列表。"}
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiRequest) SetIds(v []*string) *DeleteApiRequest {
	s.Ids = v
	return s
}

type DeleteApiResponse struct {
	// {"en":"Return 200 means success.", "zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.", "zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"List of deleted API name.", "zh_CN":"被删除的API名称列表。"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiResponse) SetCode(v int) *DeleteApiResponse {
	s.Code = &v
	return s
}

func (s *DeleteApiResponse) SetMsg(v string) *DeleteApiResponse {
	s.Msg = &v
	return s
}

func (s *DeleteApiResponse) SetData(v []*string) *DeleteApiResponse {
	s.Data = v
	return s
}

type DeleteApiPaths struct {
}

func (s DeleteApiPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiPaths) GoString() string {
	return s.String()
}

type DeleteApiParameters struct {
}

func (s DeleteApiParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiParameters) GoString() string {
	return s.String()
}

type DeleteApiRequestHeader struct {
}

func (s DeleteApiRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiRequestHeader) GoString() string {
	return s.String()
}

type DeleteApiResponseHeader struct {
}

func (s DeleteApiResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponseHeader) GoString() string {
	return s.String()
}

type CreateWhitelistRuleRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Rule name, maximum 50 characters.\nDoes not support # and &.","zh_CN":"规则名称，最多50个字符。\n不支持 # 和 &。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description, maximum 200 characters.","zh_CN":"描述，最多200个字符。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// {"en":"Match conditions, at least one, at most five.","zh_CN":"匹配条件，至少一个，至多五个。"}
	Conditions *CreateWhitelistRuleRequestConditions `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Struct"`
}

func (s CreateWhitelistRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequest) SetDomain(v string) *CreateWhitelistRuleRequest {
	s.Domain = &v
	return s
}

func (s *CreateWhitelistRuleRequest) SetRuleName(v string) *CreateWhitelistRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateWhitelistRuleRequest) SetDescription(v string) *CreateWhitelistRuleRequest {
	s.Description = &v
	return s
}

func (s *CreateWhitelistRuleRequest) SetConditions(v *CreateWhitelistRuleRequestConditions) *CreateWhitelistRuleRequest {
	s.Conditions = v
	return s
}

type CreateWhitelistRuleRequestConditions struct {
	// {"en":"IP/CIDR match conditions, match type cannot be repeated.","zh_CN":"IP/IP段匹配条件，匹配类型不可重复。"}
	IpOrIpsConditions []*CreateWhitelistRuleRequestConditionsIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" type:"Repeated"`
	// {"en":"Path match conditions, match type cannot be repeated.","zh_CN":"路径匹配条件，匹配类型不可重复。"}
	PathConditions []*CreateWhitelistRuleRequestConditionsPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" type:"Repeated"`
	// {"en":"URI match conditions, match type cannot be repeated.","zh_CN":"URI匹配条件，匹配类型不可重复。"}
	UriConditions []*CreateWhitelistRuleRequestConditionsUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" type:"Repeated"`
	// {"en":"User agent match conditions, match type cannot be repeated.","zh_CN":"User-Agent 匹配条件，匹配类型不可重复。"}
	UaConditions []*CreateWhitelistRuleRequestConditionsUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" type:"Repeated"`
	// {"en":"Referer match conditions, match type cannot be repeated.","zh_CN":"Referer 匹配条件，匹配类型不可重复。"}
	RefererConditions []*CreateWhitelistRuleRequestConditionsRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" type:"Repeated"`
	// {"en":"Request header match conditions.","zh_CN":"请求头匹配条件。"}
	HeaderConditions []*CreateWhitelistRuleRequestConditionsHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditions) SetIpOrIpsConditions(v []*CreateWhitelistRuleRequestConditionsIpOrIpsConditions) *CreateWhitelistRuleRequestConditions {
	s.IpOrIpsConditions = v
	return s
}

func (s *CreateWhitelistRuleRequestConditions) SetPathConditions(v []*CreateWhitelistRuleRequestConditionsPathConditions) *CreateWhitelistRuleRequestConditions {
	s.PathConditions = v
	return s
}

func (s *CreateWhitelistRuleRequestConditions) SetUriConditions(v []*CreateWhitelistRuleRequestConditionsUriConditions) *CreateWhitelistRuleRequestConditions {
	s.UriConditions = v
	return s
}

func (s *CreateWhitelistRuleRequestConditions) SetUaConditions(v []*CreateWhitelistRuleRequestConditionsUaConditions) *CreateWhitelistRuleRequestConditions {
	s.UaConditions = v
	return s
}

func (s *CreateWhitelistRuleRequestConditions) SetRefererConditions(v []*CreateWhitelistRuleRequestConditionsRefererConditions) *CreateWhitelistRuleRequestConditions {
	s.RefererConditions = v
	return s
}

func (s *CreateWhitelistRuleRequestConditions) SetHeaderConditions(v []*CreateWhitelistRuleRequestConditionsHeaderConditions) *CreateWhitelistRuleRequestConditions {
	s.HeaderConditions = v
	return s
}

type CreateWhitelistRuleRequestConditionsIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR, maximum 500 IP/CIDR.","zh_CN":"IP/IP段，最多500个IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsIpOrIpsConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsIpOrIpsConditions) SetIpOrIps(v []*string) *CreateWhitelistRuleRequestConditionsIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type CreateWhitelistRuleRequestConditionsPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, path case sensitive\nNOT_EQUAL: Does not equal, path case sensitive\nCONTAIN: Contains, path case insensitive\nNOT_CONTAIN: Does not Contains, path case insensitive\nREGEX: Regex match, path case insensitive\nNOT_REGEX: Regular does not match, path case sensitive\nSTART_WITH: Starts with, path case sensitive\nEND_WITH: Ends with, path case sensitive\nWILDCARD: Wildcard matches, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character.\nNOT_WILDCARD: Wildcard does not match, path case sensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，路径大小写敏感\nNOT_EQUAL：不等于，路径大小写敏感\nCONTAIN：包含，路径大小写不敏感\nNOT_CONTAIN：不包含，路径大小写不敏感\nREGEX：匹配正则，路径大小写不敏感\nNOT_REGEX：正则不匹配，路径大小写不敏感\nSTART_WITH：开头是，路径大小写不敏感\nEND_WITH：结尾是，路径大小写不敏感\nWILDCARD：通配符匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，路径大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, path needs to start with \"/\", and no parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html.","zh_CN":"路径。\n当匹配类型为等于/不等于/开头是/结尾是，路径必须以“/”开头，不含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html。"}
	CreateWhitelistRulePaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsPathConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsPathConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsPathConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsPathConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsPathConditions) SetCreateWhitelistRulePaths(v []*string) *CreateWhitelistRuleRequestConditionsPathConditions {
	s.CreateWhitelistRulePaths = v
	return s
}

type CreateWhitelistRuleRequestConditionsUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, URI case sensitive\nNOT_EQUAL: Does not equal, URI case sensitive\nCONTAIN: Contains, URI case insensitive\nNOT_CONTAIN: Does not Contains, URI case insensitive\nREGEX: Regex match, URI case insensitive\nNOT_REGEX: Regular does not match, URI case insensitive\nSTART_WITH: Starts with, URI case insensitive\nEND_WITH: Ends with, URI case insensitive\nWILDCARD: Wildcard matches, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, URI case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，URI大小写敏感\nNOT_EQUAL：不等于，URI大小写敏感\nCONTAIN：包含，URI大小写不敏感\nNOT_CONTAIN：不包含，URI大小写不敏感\nREGEX：匹配正则，URI大小写不敏感\nNOT_REGEX：正则不匹配，URI大小写不敏感\nSTART_WITH：开头是，URI大小写不敏感\nEND_WITH：结尾是，URI大小写不敏感\nWILDCARD：通配符匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，URI大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.\nWhen match type is EQUAL/NOT_EQUAL/START_WITH/END_WITH, uri needs to start with \"/\", and includes parameters.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: /test.html?id=1.","zh_CN":"URI。\n当匹配类型为等于/不等于/开头是/结尾是，URI必须以”/“开头，含参数。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：/test.html?id=1。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsUriConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsUriConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsUriConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsUriConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsUriConditions) SetUri(v []*string) *CreateWhitelistRuleRequestConditionsUriConditions {
	s.Uri = v
	return s
}

type CreateWhitelistRuleRequestConditionsUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, user agent case sensitive\nNOT_EQUAL: Does not equal, user agent case sensitive\nCONTAIN: Contains, user agent case insensitive\nNOT_CONTAIN: Does not Contains, user agent case insensitive\nREGEX: Regex match, user agent case insensitive\nNOT_REGEX: Regular does not match, user agent case insensitive\nSTART_WITH: Starts with, user agent case insensitive\nEND_WITH: Ends with, user agent case insensitive\nWILDCARD: Wildcard matches, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, user agent case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，User-Agent大小写敏感\nNOT_EQUAL：不等于，User-Agent大小写敏感\nCONTAIN：包含，User-Agent大小写不敏感\nNOT_CONTAIN：不包含，User-Agent大小写不敏感\nREGEX：匹配正则，User-Agent大小写不敏感\nNOT_REGEX：正则不匹配，User-Agent大小写不敏感\nSTART_WITH：开头是，User-Agent大小写不敏感\nEND_WITH：结尾是，User-Agent大小写不敏感\nWILDCARD：通配符匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，User-Agent大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: go-Http-client/1.1.","zh_CN":"User-Agent。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：go-Http-client/1.1。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsUaConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsUaConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsUaConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsUaConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsUaConditions) SetUa(v []*string) *CreateWhitelistRuleRequestConditionsUaConditions {
	s.Ua = v
	return s
}

type CreateWhitelistRuleRequestConditionsRefererConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, referer case sensitive\nNOT_EQUAL: Does not equal, referer case sensitive\nCONTAIN: Contains, referer case insensitive\nNOT_CONTAIN: Does not Contains, referer case insensitive\nREGEX: Regex match, referer case insensitive\nNOT_REGEX: Regular does not match, referer case insensitive\nSTART_WITH: Starts with, referer case insensitive\nEND_WITH: Ends with, referer case insensitive\nWILDCARD: Wildcard matches, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single characte\nNOT_WILDCARD: Wildcard does not match, referer case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，referer大小写敏感\nNOT_EQUAL：不等于，referer大小写敏感\nCONTAIN：包含，referer大小写不敏感\nNOT_CONTAIN：不包含，referer大小写不敏感\nREGEX：匹配正则，referer大小写不敏感\nNOT_REGEX：正则不匹配，referer大小写不敏感\nSTART_WITH：开头是，referer大小写不敏感\nEND_WITH：结尾是，referer大小写不敏感\nWILDCARD：通配符匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，referer大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Referer.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.\nExample: http://test.com.","zh_CN":"Referer。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。\n示例：http://test.com。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsRefererConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsRefererConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsRefererConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsRefererConditions) SetReferer(v []*string) *CreateWhitelistRuleRequestConditionsRefererConditions {
	s.Referer = v
	return s
}

type CreateWhitelistRuleRequestConditionsHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: Equals, request header values case sensitive\nNOT_EQUAL: Does not equal, request header values case sensitive\nCONTAIN: Contains, request header values case insensitive\nNOT_CONTAIN: Does not Contains, request header values case insensitive\nREGEX: Regex match, request header values case insensitive\nNOT_REGEX: Regular does not match, request header values case insensitive\nSTART_WITH: Starts with, request header values case insensitive\nEND_WITH: Ends with, request header values case insensitive\nWILDCARD: Wildcard matches, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, request header values case insensitive,* represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于，头部值大小写敏感\nNOT_EQUAL：不等于，头部值大小写敏感\nCONTAIN：包含，头部值大小写不敏感\nNOT_CONTAIN：不包含，头部值大小写不敏感\nREGEX：匹配正则，头部值大小写不敏感\nNOT_REGEX：正则不匹配，头部值大小写不敏感\nSTART_WITH：开头是，头部值大小写不敏感\nEND_WITH：结尾是，头部值大小写不敏感\nWILDCARD：通配符匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，头部值大小写不敏感，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header name,case insensitive,up to 100 characters.\nExample: Accept.","zh_CN":"头部名称，大小写不敏感，最多100个字符。\n示例：Accept。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// {"en":"Header value.\nWhen the match type is REGEX/NOT_REGEX, only one value is allowed.","zh_CN":"头部值。\n当匹配类型为正则/正则不匹配，则只允许只有一个值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
}

func (s CreateWhitelistRuleRequestConditionsHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestConditionsHeaderConditions) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestConditionsHeaderConditions) SetMatchType(v string) *CreateWhitelistRuleRequestConditionsHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsHeaderConditions) SetKey(v string) *CreateWhitelistRuleRequestConditionsHeaderConditions {
	s.Key = &v
	return s
}

func (s *CreateWhitelistRuleRequestConditionsHeaderConditions) SetValueList(v []*string) *CreateWhitelistRuleRequestConditionsHeaderConditions {
	s.ValueList = v
	return s
}

type CreateWhitelistRuleRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s CreateWhitelistRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleRequestHeader) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleRequestHeader) SetServiceType(v string) *CreateWhitelistRuleRequestHeader {
	s.ServiceType = &v
	return s
}

type CreateWhitelistRulePaths struct {
}

func (s CreateWhitelistRulePaths) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRulePaths) GoString() string {
	return s.String()
}

type CreateWhitelistRuleParameters struct {
}

func (s CreateWhitelistRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleParameters) GoString() string {
	return s.String()
}

type CreateWhitelistRuleResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Rule ID.","zh_CN":"规则 ID。"}
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s CreateWhitelistRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateWhitelistRuleResponse) SetCode(v string) *CreateWhitelistRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateWhitelistRuleResponse) SetMsg(v string) *CreateWhitelistRuleResponse {
	s.Msg = &v
	return s
}

func (s *CreateWhitelistRuleResponse) SetData(v string) *CreateWhitelistRuleResponse {
	s.Data = &v
	return s
}

type CreateWhitelistRuleResponseHeader struct {
}

func (s CreateWhitelistRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s CreateWhitelistRuleResponseHeader) GoString() string {
	return s.String()
}

type DisableAllPoliciesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s DisableAllPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DisableAllPoliciesRequest) SetDomainList(v []*string) *DisableAllPoliciesRequest {
	s.DomainList = v
	return s
}

type DisableAllPoliciesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s DisableAllPoliciesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesRequestHeader) GoString() string {
	return s.String()
}

func (s *DisableAllPoliciesRequestHeader) SetServiceType(v string) *DisableAllPoliciesRequestHeader {
	s.ServiceType = &v
	return s
}

type DisableAllPoliciesPaths struct {
}

func (s DisableAllPoliciesPaths) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesPaths) GoString() string {
	return s.String()
}

type DisableAllPoliciesParameters struct {
}

func (s DisableAllPoliciesParameters) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesParameters) GoString() string {
	return s.String()
}

type DisableAllPoliciesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s DisableAllPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DisableAllPoliciesResponse) SetCode(v string) *DisableAllPoliciesResponse {
	s.Code = &v
	return s
}

func (s *DisableAllPoliciesResponse) SetMsg(v string) *DisableAllPoliciesResponse {
	s.Msg = &v
	return s
}

type DisableAllPoliciesResponseHeader struct {
}

func (s DisableAllPoliciesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DisableAllPoliciesResponseHeader) GoString() string {
	return s.String()
}

type QueryExactRuleListRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule Name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty"`
	// {"en":"Action.
	//  0:Bypass
	// 1:Block
	//  2:Log ", "zh_CN":"处理动作。
	//  0：放行
	//  1：拦截
	//  2：监控"}
	ActionList []*string `json:"actionList,omitempty" xml:"actionList,omitempty" type:"Repeated"`
}

func (s QueryExactRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListRequest) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListRequest) SetServiceType(v string) *QueryExactRuleListRequest {
	s.ServiceType = &v
	return s
}

func (s *QueryExactRuleListRequest) SetRuleName(v string) *QueryExactRuleListRequest {
	s.RuleName = &v
	return s
}

func (s *QueryExactRuleListRequest) SetActionList(v []*string) *QueryExactRuleListRequest {
	s.ActionList = v
	return s
}

type QueryExactRuleListResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *QueryExactRuleListResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s QueryExactRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListResponse) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListResponse) SetCode(v string) *QueryExactRuleListResponse {
	s.Code = &v
	return s
}

func (s *QueryExactRuleListResponse) SetMessage(v string) *QueryExactRuleListResponse {
	s.Message = &v
	return s
}

func (s *QueryExactRuleListResponse) SetData(v *QueryExactRuleListResp) *QueryExactRuleListResponse {
	s.Data = v
	return s
}

type QueryExactRuleListResp struct {
	// {"en":"Number of records. ", "zh_CN":"记录数。"}
	TotalNum *string `json:"totalNum,omitempty" xml:"totalNum,omitempty" require:"true"`
	// {"en":"Records data.", "zh_CN":"数据。"}
	List []*QueryExactRuleListItem `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s QueryExactRuleListResp) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListResp) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListResp) SetTotalNum(v string) *QueryExactRuleListResp {
	s.TotalNum = &v
	return s
}

func (s *QueryExactRuleListResp) SetList(v []*QueryExactRuleListItem) *QueryExactRuleListResp {
	s.List = v
	return s
}

type QueryExactRuleListItem struct {
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule Name.", "zh_CN":"规则名。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Rule Description.", "zh_CN":"规则描述。"}
	RuleDescription *string `json:"ruleDescription,omitempty" xml:"ruleDescription,omitempty"`
	// {"en":"Action.
	//  0:Bypass
	// 1:Block
	//  2:Log ", "zh_CN":"处理动作。
	//  0：放行
	//  1：拦截
	//  2：监控"}
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// {"en":"Match QueryExactRuleListCondition.", "zh_CN":"匹配条件。"}
	DeployContent []*QueryExactRuleListCondition `json:"deployContent,omitempty" xml:"deployContent,omitempty" require:"true" type:"Repeated"`
}

func (s QueryExactRuleListItem) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListItem) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListItem) SetRuleId(v string) *QueryExactRuleListItem {
	s.RuleId = &v
	return s
}

func (s *QueryExactRuleListItem) SetRuleName(v string) *QueryExactRuleListItem {
	s.RuleName = &v
	return s
}

func (s *QueryExactRuleListItem) SetRuleDescription(v string) *QueryExactRuleListItem {
	s.RuleDescription = &v
	return s
}

func (s *QueryExactRuleListItem) SetAction(v string) *QueryExactRuleListItem {
	s.Action = &v
	return s
}

func (s *QueryExactRuleListItem) SetDeployContent(v []*QueryExactRuleListCondition) *QueryExactRuleListItem {
	s.DeployContent = v
	return s
}

type QueryExactRuleListCondition struct {
	// {"en":"Matching condition type.
	//  0:IP
	//  1:IP Segment
	//  2:URI
	//  3:User-Agent
	//  4:Cookie
	//  5:Referer
	//  6:HTTP Header
	//  7:Area
	//  8:HTTP Method
	//  9:Path  ", "zh_CN":"匹配条件类型。0：IP
	//  1：IP段
	//  2：URI
	//  3：User-agent
	//  4：Cookie
	//  5：Referer
	//  6：HTTP Header
	//   7：区域
	//  8：请求方法
	//  9：路径 "}
	MatchCondition *string `json:"matchCondition,omitempty" xml:"matchCondition,omitempty" require:"true"`
	// {"en":"Matching condition operation.
	//  0:=
	//  1:!=
	//  2:Empty or doesn't exist
	//  3:=(Regex)
	//  4:!=(Regex) ", "zh_CN":"匹配条件操作。
	//  0：=
	//  1：!=
	//  2：为空或不存在
	//  3：=正则
	//  4：!=正则 "}
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// {"en":"First QueryExactRuleListCondition.", "zh_CN":"第一匹配条件值。"}
	FirstCondition *string `json:"firstCondition,omitempty" xml:"firstCondition,omitempty"`
	// {"en":"Second QueryExactRuleListCondition.", "zh_CN":"第二匹配条件值。"}
	SecondCondition *string `json:"secondCondition,omitempty" xml:"secondCondition,omitempty"`
}

func (s QueryExactRuleListCondition) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListCondition) GoString() string {
	return s.String()
}

func (s *QueryExactRuleListCondition) SetMatchCondition(v string) *QueryExactRuleListCondition {
	s.MatchCondition = &v
	return s
}

func (s *QueryExactRuleListCondition) SetOperator(v string) *QueryExactRuleListCondition {
	s.Operator = &v
	return s
}

func (s *QueryExactRuleListCondition) SetFirstCondition(v string) *QueryExactRuleListCondition {
	s.FirstCondition = &v
	return s
}

func (s *QueryExactRuleListCondition) SetSecondCondition(v string) *QueryExactRuleListCondition {
	s.SecondCondition = &v
	return s
}

type QueryExactRuleListPaths struct {
}

func (s QueryExactRuleListPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListPaths) GoString() string {
	return s.String()
}

type QueryExactRuleListParameters struct {
}

func (s QueryExactRuleListParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListParameters) GoString() string {
	return s.String()
}

type QueryExactRuleListRequestHeader struct {
}

func (s QueryExactRuleListRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListRequestHeader) GoString() string {
	return s.String()
}

type QueryExactRuleListResponseHeader struct {
}

func (s QueryExactRuleListResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryExactRuleListResponseHeader) GoString() string {
	return s.String()
}

type SetDefaultBuiltInRuleRequest struct {
	// {'en':'Template id.', 'zh_CN':'模板id。'}
	Id *int `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s SetDefaultBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultBuiltInRuleRequest) SetId(v int) *SetDefaultBuiltInRuleRequest {
	s.Id = &v
	return s
}

type SetDefaultBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s SetDefaultBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultBuiltInRuleResponse) SetCode(v string) *SetDefaultBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *SetDefaultBuiltInRuleResponse) SetMessage(v string) *SetDefaultBuiltInRuleResponse {
	s.Message = &v
	return s
}

type SetDefaultBuiltInRulePaths struct {
}

func (s SetDefaultBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRulePaths) GoString() string {
	return s.String()
}

type SetDefaultBuiltInRuleParameters struct {
}

func (s SetDefaultBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRuleParameters) GoString() string {
	return s.String()
}

type SetDefaultBuiltInRuleRequestHeader struct {
}

func (s SetDefaultBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type SetDefaultBuiltInRuleResponseHeader struct {
}

func (s SetDefaultBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateIPBlockSettingsRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"The number of blocked IP/ CIDR should not exceed 500.","zh_CN":"要拦截的IP/IP段，不超过500个IP/IP段。"}
	BlockConditions []*string `json:"blockConditions,omitempty" xml:"blockConditions,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateIPBlockSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsRequest) GoString() string {
	return s.String()
}

func (s *UpdateIPBlockSettingsRequest) SetDomain(v string) *UpdateIPBlockSettingsRequest {
	s.Domain = &v
	return s
}

func (s *UpdateIPBlockSettingsRequest) SetBlockConditions(v []*string) *UpdateIPBlockSettingsRequest {
	s.BlockConditions = v
	return s
}

type UpdateIPBlockSettingsRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateIPBlockSettingsRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateIPBlockSettingsRequestHeader) SetServiceType(v string) *UpdateIPBlockSettingsRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateIPBlockSettingsPaths struct {
}

func (s UpdateIPBlockSettingsPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsPaths) GoString() string {
	return s.String()
}

type UpdateIPBlockSettingsParameters struct {
}

func (s UpdateIPBlockSettingsParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsParameters) GoString() string {
	return s.String()
}

type UpdateIPBlockSettingsResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateIPBlockSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsResponse) GoString() string {
	return s.String()
}

func (s *UpdateIPBlockSettingsResponse) SetCode(v string) *UpdateIPBlockSettingsResponse {
	s.Code = &v
	return s
}

func (s *UpdateIPBlockSettingsResponse) SetMsg(v string) *UpdateIPBlockSettingsResponse {
	s.Msg = &v
	return s
}

type UpdateIPBlockSettingsResponseHeader struct {
}

func (s UpdateIPBlockSettingsResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateIPBlockSettingsResponseHeader) GoString() string {
	return s.String()
}

type GetBlockPageRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s GetBlockPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageRequest) GoString() string {
	return s.String()
}

func (s *GetBlockPageRequest) SetDomain(v string) *GetBlockPageRequest {
	s.Domain = &v
	return s
}

type GetBlockPageResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Information returned. Return 'Success' when successful.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *GetBlockPageResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s GetBlockPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageResponse) GoString() string {
	return s.String()
}

func (s *GetBlockPageResponse) SetCode(v string) *GetBlockPageResponse {
	s.Code = &v
	return s
}

func (s *GetBlockPageResponse) SetMessage(v string) *GetBlockPageResponse {
	s.Message = &v
	return s
}

func (s *GetBlockPageResponse) SetData(v *GetBlockPageResult) *GetBlockPageResponse {
	s.Data = v
	return s
}

type GetBlockPageResult struct {
	// {"en":"Block page", "zh_CN":"拦截页面"}
	Edgebot_block_page *GetBlockPagePage `json:"edgebot_block_page,omitempty" xml:"edgebot_block_page,omitempty" require:"true"`
}

func (s GetBlockPageResult) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageResult) GoString() string {
	return s.String()
}

func (s *GetBlockPageResult) SetEdgebot_block_page(v *GetBlockPagePage) *GetBlockPageResult {
	s.Edgebot_block_page = v
	return s
}

type GetBlockPagePage struct {
	// {"en":"Status code. Common status codes are supported:
	//  200;204;206;301;302;304;307;400;401;403;404;500;501;503,and other user-defined status codes.", "zh_CN":"状态码。
	//    200;204;206;301;302;304;307;400;401;403;404;500;501;503，以及其他自定义状态码。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Response content definition.", "zh_CN":"响应内容定义。"}
	Response *string `json:"response,omitempty" xml:"response,omitempty" require:"true"`
	// {"en":"Block page setting switch.
	//  0:OFF
	//  1:ON", "zh_CN":"开关。
	//  0：关闭
	//  1：启用"}
	Enable *string `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"The content type of the blocked page. Multiple with; separate.
	//  text/html
	//  application/json
	//  application/x-www-form-urlencoded ", "zh_CN":"拦截页面的内容类型。多个以;隔开。
	//  text/html
	//  application/json
	//  application/x-www-form-urlencoded "}
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty" require:"true"`
}

func (s GetBlockPagePage) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPagePage) GoString() string {
	return s.String()
}

func (s *GetBlockPagePage) SetCode(v int) *GetBlockPagePage {
	s.Code = &v
	return s
}

func (s *GetBlockPagePage) SetResponse(v string) *GetBlockPagePage {
	s.Response = &v
	return s
}

func (s *GetBlockPagePage) SetEnable(v string) *GetBlockPagePage {
	s.Enable = &v
	return s
}

func (s *GetBlockPagePage) SetContentType(v string) *GetBlockPagePage {
	s.ContentType = &v
	return s
}

type GetBlockPagePaths struct {
}

func (s GetBlockPagePaths) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPagePaths) GoString() string {
	return s.String()
}

type GetBlockPageParameters struct {
}

func (s GetBlockPageParameters) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageParameters) GoString() string {
	return s.String()
}

type GetBlockPageRequestHeader struct {
}

func (s GetBlockPageRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageRequestHeader) GoString() string {
	return s.String()
}

type GetBlockPageResponseHeader struct {
}

func (s GetBlockPageResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetBlockPageResponseHeader) GoString() string {
	return s.String()
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainRequest) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainRequest) SetDomain(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainRequest {
	s.Domain = &v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainRequestHeader) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainRequestHeader) SetServiceType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainRequestHeader {
	s.ServiceType = &v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainPaths struct {
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainPaths) GoString() string {
	return s.String()
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainParameters struct {
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainParameters) GoString() string {
	return s.String()
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse struct {
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse) SetMsg(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse {
	s.Msg = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse) SetCode(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse {
	s.Code = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse) SetData(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponse {
	s.Data = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData struct {
	// {"en":"Can it be shared.","zh_CN":"是否可以被共享。"}
	Shareable *bool `json:"shareable,omitempty" xml:"shareable,omitempty" require:"true"`
	// {"en":"Match Conditions.","zh_CN":"匹配条件。"}
	Condition *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition `json:"condition,omitempty" xml:"condition,omitempty" require:"true" type:"Struct"`
	// {"en":"Creator.","zh_CN":"创建者。"}
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// {"en":"Action.\nNO_USE: Not Used\nLOG: Log\nDELAY: Delay\nBLOCK: Deny\nRESET: Reset Connection","zh_CN":"处理动作。\nNO_USE：不使用\nLOG：监控\nDELAY：延迟响应\nBLOCK：拦截\nRESET：断开连接","exampleValue":"NO_USE,LOG,DELAY,BLOCK,RESET"}
	Act *string `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Create time.","zh_CN":"创建时间。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"Update time.","zh_CN":"更新时间。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetShareable(v bool) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Shareable = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetCondition(v *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Condition = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetCreator(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Creator = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetAct(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Act = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetCreateTime(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.CreateTime = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetRuleName(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.RuleName = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetDescription(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Description = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetUpdateTime(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.UpdateTime = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData) SetId(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseData {
	s.Id = &v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition struct {
	// {"en":"Request Method.","zh_CN":"请求方法。"}
	MethodConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions `json:"methodConditions,omitempty" xml:"methodConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Geo.","zh_CN":"区域。"}
	AreaConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions `json:"areaConditions,omitempty" xml:"areaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIpsConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI.","zh_CN":"URI。"}
	UriConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path.","zh_CN":"路径。"}
	PathConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI Parameter.","zh_CN":"URI参数。"}
	UriParamConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions `json:"uriParamConditions,omitempty" xml:"uriParamConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User Agent.","zh_CN":"User-Agent。"}
	UaConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request Header.","zh_CN":"请求头。"}
	HeaderConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer.","zh_CN":"Referer。"}
	RefererConditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA3 Fingerprint, match type cannot be repeated.","zh_CN":"JA3指纹，匹配类型不可重复。"}
	Ja3Conditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions `json:"ja3Conditions,omitempty" xml:"ja3Conditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"JA4 Fingerprint, match type cannot be repeated.","zh_CN":"JA4指纹，匹配类型不可重复。"}
	Ja4Conditions []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions `json:"ja4Conditions,omitempty" xml:"ja4Conditions,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetMethodConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.MethodConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetAreaConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.AreaConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetIpOrIpsConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.IpOrIpsConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetUriConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.UriConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetPathConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.PathConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetUriParamConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.UriParamConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetUaConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.UaConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetHeaderConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.HeaderConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetRefererConditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.RefererConditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetJa3Conditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.Ja3Conditions = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition) SetJa4Conditions(v []*ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataCondition {
	s.Ja4Conditions = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request method.\nSupported values: GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY.","zh_CN":"请求方法。\n支持的值：GET/POST/DELETE/PUT/HEAD/OPTIONS/COPY","exampleValue":"GET,POST,DELETE,PUT,HEAD,OPTIONS,COPY"}
	RequestMethod []*string `json:"requestMethod,omitempty" xml:"requestMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions) SetRequestMethod(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionMethodConditions {
	s.RequestMethod = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_areaCityAndCountry","en":"Geo.","zh_CN":"区域。"}
	Areas []*string `json:"areas,omitempty" xml:"areas,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions) SetAreas(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionAreaConditions {
	s.Areas = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL:Equal\nNOT_EQUAL:Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions) SetIpOrIps(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.","zh_CN":"URI。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions) SetUri(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriConditions {
	s.Uri = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.","zh_CN":"路径。"}
	ListCustomRulesForSharedConfigurationAssociatedWithDomainPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions) SetListCustomRulesForSharedConfigurationAssociatedWithDomainPaths(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionPathConditions {
	s.ListCustomRulesForSharedConfigurationAssociatedWithDomainPaths = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions struct {
	// {"en":"Match type.\nEQUAL:Equals\nNOT_EQUAL:Does not equal\nCONTAIN:Contains\nNOT_CONTAIN:Does not contains\nREGEX:Regex match\nNONE:Empty or non-existent","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NONE"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Param name.","zh_CN":"参数名。"}
	ParamName *string `json:"paramName,omitempty" xml:"paramName,omitempty" require:"true"`
	// {"en":"Param value.","zh_CN":"参数值。"}
	ParamValue []*string `json:"paramValue,omitempty" xml:"paramValue,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) SetParamName(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions {
	s.ParamName = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions) SetParamValue(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUriParamConditions {
	s.ParamValue = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User-Agent.","zh_CN":"User-Agent。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions) SetUa(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionUaConditions {
	s.Ua = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Header value.","zh_CN":"头部值。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request header name.","zh_CN":"头部名称。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) SetValueList(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions {
	s.ValueList = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions) SetKey(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionHeaderConditions {
	s.Key = &v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions struct {
	// {"en":"Referer.","zh_CN":"Referer。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
	// {"en":"Match type.\nEQUAL: equal to\nNOT_EQUAL: not equal to\nCONTAIN: contains\nNOT_CONTAIN: does not contain\nREGEX: regular\nNONE: empty or does not exist\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：正则\nNONE：为空或不存在\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,NONE,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions) SetReferer(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions {
	s.Referer = v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionRefererConditions {
	s.MatchType = &v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于 \nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA3 Fingerprint List.","zh_CN":"JA3指纹列表。"}
	Ja3List []*string `json:"ja3List,omitempty" xml:"ja3List,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions) SetJa3List(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa3Conditions {
	s.Ja3List = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions struct {
	// {"en":"Match type. \nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nSTART_WITH: Starts with\nEND_WITH: Ends with\nWILDCARD: Wildcard matches, ** represents zero or more arbitrary characters, ? represents any single character\nNOT_WILDCARD: Wildcard does not match, ** represents zero or more arbitrary characters, ? represents any single character","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配，*代表零个或多个任意字符，?代表任意单个字符\nNOT_WILDCARD：通配符不匹配，*代表零个或多个任意字符，?代表任意单个字符","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"JA4 Fingerprint List.","zh_CN":"JA4指纹列表。"}
	Ja4List []*string `json:"ja4List,omitempty" xml:"ja4List,omitempty" require:"true" type:"Repeated"`
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions) GoString() string {
	return s.String()
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions) SetMatchType(v string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions {
	s.MatchType = &v
	return s
}

func (s *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions) SetJa4List(v []*string) *ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseDataConditionJa4Conditions {
	s.Ja4List = v
	return s
}

type ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseHeader struct {
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s ListCustomRulesForSharedConfigurationAssociatedWithDomainResponseHeader) GoString() string {
	return s.String()
}

type DeleteExactRuleRequest struct {
	// {"en":"Service name.
	//  WAF:Web Application Firewall
	//  BOT:Bot Shield
	//  API:API Shield
	//  DDoS:DDoS Protection ", "zh_CN":"服务名称。
	//  WAF：WEB应用防火墙
	//  BOT：BotGuard爬虫管理
	//  API：API安全与管理
	//  DDoS: DMS"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty" require:"true"`
	// {"en":"Rule id.", "zh_CN":"规则ID,删除对应规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
}

func (s DeleteExactRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteExactRuleRequest) SetServiceType(v string) *DeleteExactRuleRequest {
	s.ServiceType = &v
	return s
}

func (s *DeleteExactRuleRequest) SetRuleId(v string) *DeleteExactRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteExactRuleResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据。"}
	Data *DeleteExactRuleResp `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeleteExactRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteExactRuleResponse) SetCode(v string) *DeleteExactRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteExactRuleResponse) SetMessage(v string) *DeleteExactRuleResponse {
	s.Message = &v
	return s
}

func (s *DeleteExactRuleResponse) SetData(v *DeleteExactRuleResp) *DeleteExactRuleResponse {
	s.Data = v
	return s
}

type DeleteExactRuleResp struct {
	// {"en":"Rule association domain.", "zh_CN":"规则关联域名。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
	// {"en":"Rule id.", "zh_CN":"规则ID。"}
	RuleId *string `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
}

func (s DeleteExactRuleResp) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleResp) GoString() string {
	return s.String()
}

func (s *DeleteExactRuleResp) SetDomainList(v []*string) *DeleteExactRuleResp {
	s.DomainList = v
	return s
}

func (s *DeleteExactRuleResp) SetRuleId(v string) *DeleteExactRuleResp {
	s.RuleId = &v
	return s
}

type DeleteExactRulePaths struct {
}

func (s DeleteExactRulePaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRulePaths) GoString() string {
	return s.String()
}

type DeleteExactRuleParameters struct {
}

func (s DeleteExactRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleParameters) GoString() string {
	return s.String()
}

type DeleteExactRuleRequestHeader struct {
}

func (s DeleteExactRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleRequestHeader) GoString() string {
	return s.String()
}

type DeleteExactRuleResponseHeader struct {
}

func (s DeleteExactRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteExactRuleResponseHeader) GoString() string {
	return s.String()
}

type UpdateWafCustomRuleRequest struct {
	// {"en":"Rule ID to modify.","zh_CN":"要修改的规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"The action to execute when a rule is matched.\n0: Off\n1: Block\n2: Log","zh_CN":"触发规则时的处理动作。\n0：关闭\n1：拦截\n2：监控"}
	Mode *int `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
	// {"en":"Regular expressions.","zh_CN":"正则表达式。"}
	RuleReg *string `json:"ruleReg,omitempty" xml:"ruleReg,omitempty" require:"true"`
	// {"en":"Rule description, cannot exceed 200 characters.","zh_CN":"规则描述，长度不能超过200个字符。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Matching area,array,\nurl:URL(without param)\nurlParam:URL Param\nheaders:Headers\nbody:Body\nresponse:Response\nfileExt:Upload File Extension\nfileContent:Upload File Content","zh_CN":"匹配区域，数组，\nurl：URL（不含参数）\nurlParam：URL参数\nheaders：请求头\nbody：请求体\nresponse：响应体\nfileExt：上传文件后缀\nfileContent：上传文件内容"}
	MatchZoneMerge []*string `json:"matchZoneMerge,omitempty" xml:"matchZoneMerge,omitempty" require:"true" type:"Repeated"`
	// {"en":"Status codek,English half width comma splicing,Required when the matching area contains response,2:2xx, 3:3xx, 4:4xx, 5:5xx.","zh_CN":"状态码，英文半角逗号分隔，匹配区域包含response时必填,2:2xx, 3:3xx, 4:4xx, 5:5xx。"}
	StatusCode *string `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// {"en":"Correlation domain name, array.","zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" type:"Repeated"`
}

func (s UpdateWafCustomRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateWafCustomRuleRequest) SetRuleId(v int) *UpdateWafCustomRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetRuleName(v string) *UpdateWafCustomRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetMode(v int) *UpdateWafCustomRuleRequest {
	s.Mode = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetRuleReg(v string) *UpdateWafCustomRuleRequest {
	s.RuleReg = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetMsg(v string) *UpdateWafCustomRuleRequest {
	s.Msg = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetMatchZoneMerge(v []*string) *UpdateWafCustomRuleRequest {
	s.MatchZoneMerge = v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetStatusCode(v string) *UpdateWafCustomRuleRequest {
	s.StatusCode = &v
	return s
}

func (s *UpdateWafCustomRuleRequest) SetDomainList(v []*string) *UpdateWafCustomRuleRequest {
	s.DomainList = v
	return s
}

type UpdateWafCustomRuleRequestHeader struct {
}

func (s UpdateWafCustomRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRuleRequestHeader) GoString() string {
	return s.String()
}

type UpdateWafCustomRulePaths struct {
}

func (s UpdateWafCustomRulePaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRulePaths) GoString() string {
	return s.String()
}

type UpdateWafCustomRuleParameters struct {
}

func (s UpdateWafCustomRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRuleParameters) GoString() string {
	return s.String()
}

type UpdateWafCustomRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.","zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Error message or Success.","zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s UpdateWafCustomRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateWafCustomRuleResponse) SetCode(v string) *UpdateWafCustomRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateWafCustomRuleResponse) SetMessage(v string) *UpdateWafCustomRuleResponse {
	s.Message = &v
	return s
}

type UpdateWafCustomRuleResponseHeader struct {
}

func (s UpdateWafCustomRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateWafCustomRuleResponseHeader) GoString() string {
	return s.String()
}

type DeleteIntelligentAnalysisRequest struct {
	// {'en':'Intelligent analysis id.', 'zh_CN':'托管id。'}
	Rid *int `json:"rid,omitempty" xml:"rid,omitempty" require:"true"`
}

func (s DeleteIntelligentAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisRequest) GoString() string {
	return s.String()
}

func (s *DeleteIntelligentAnalysisRequest) SetRid(v int) *DeleteIntelligentAnalysisRequest {
	s.Rid = &v
	return s
}

type DeleteIntelligentAnalysisResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s DeleteIntelligentAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisResponse) GoString() string {
	return s.String()
}

func (s *DeleteIntelligentAnalysisResponse) SetCode(v string) *DeleteIntelligentAnalysisResponse {
	s.Code = &v
	return s
}

func (s *DeleteIntelligentAnalysisResponse) SetMessage(v string) *DeleteIntelligentAnalysisResponse {
	s.Message = &v
	return s
}

type DeleteIntelligentAnalysisPaths struct {
}

func (s DeleteIntelligentAnalysisPaths) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisPaths) GoString() string {
	return s.String()
}

type DeleteIntelligentAnalysisParameters struct {
}

func (s DeleteIntelligentAnalysisParameters) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisParameters) GoString() string {
	return s.String()
}

type DeleteIntelligentAnalysisRequestHeader struct {
}

func (s DeleteIntelligentAnalysisRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisRequestHeader) GoString() string {
	return s.String()
}

type DeleteIntelligentAnalysisResponseHeader struct {
}

func (s DeleteIntelligentAnalysisResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeleteIntelligentAnalysisResponseHeader) GoString() string {
	return s.String()
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequest struct {
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequest) GoString() string {
	return s.String()
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader) SetServiceType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainRequestHeader {
	s.ServiceType = &v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths struct {
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths) GoString() string {
	return s.String()
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainParameters struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainParameters) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainParameters) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainParameters) SetDomain(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainParameters {
	s.Domain = &v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"出参数据。"}
	Data []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetCode(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Code = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetMsg(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Msg = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse) SetData(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponse {
	s.Data = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData struct {
	// {"en":"Rule ID.","zh_CN":"规则ID。"}
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// {"en":"Rule name.","zh_CN":"规则名称。"}
	RuleName *string `json:"ruleName,omitempty" xml:"ruleName,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"规则描述。"}
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// {"en":"creator.","zh_CN":"创建者。"}
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// {"en":"Match conditions, at least one, at most five.","zh_CN":"匹配条件，至少一个，至多五个。"}
	Conditions *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions `json:"conditions,omitempty" xml:"conditions,omitempty" require:"true" type:"Struct"`
	// {"en":"Created date, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"创建时间，格式：yyyy-MM-dd HH:mm:ss。"}
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty" require:"true"`
	// {"en":"Update date, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"更新时间，格式：yyyy-MM-dd HH:mm:ss。"}
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty" require:"true"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetId(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Id = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetRuleName(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.RuleName = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetDescription(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Description = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetCreator(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Creator = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetConditions(v *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.Conditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetCreateTime(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.CreateTime = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData) SetUpdateTime(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseData {
	s.UpdateTime = &v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions struct {
	// {"en":"IP/CIDR match conditions.","zh_CN":"IP/IP段匹配条件。"}
	IpOrIpsConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions `json:"ipOrIpsConditions,omitempty" xml:"ipOrIpsConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Path match conditions.","zh_CN":"路径匹配条件。"}
	PathConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions `json:"pathConditions,omitempty" xml:"pathConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"URI match conditions.","zh_CN":"URI匹配条件。"}
	UriConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions `json:"uriConditions,omitempty" xml:"uriConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"User agent match conditions.","zh_CN":"User-Agent 匹配条件。"}
	UaConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions `json:"uaConditions,omitempty" xml:"uaConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Referer match conditions.","zh_CN":"Referer 匹配条件。"}
	RefererConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions `json:"refererConditions,omitempty" xml:"refererConditions,omitempty" require:"true" type:"Repeated"`
	// {"en":"Request header match conditions.","zh_CN":"请求头匹配条件。"}
	HeaderConditions []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions `json:"headerConditions,omitempty" xml:"headerConditions,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetIpOrIpsConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.IpOrIpsConditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetPathConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.PathConditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetUriConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.UriConditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetUaConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.UaConditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetRefererConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.RefererConditions = v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions) SetHeaderConditions(v []*GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditions {
	s.HeaderConditions = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于","exampleValue":"EQUAL,NOT_EQUAL"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"IP/CIDR.","zh_CN":"IP/IP段。"}
	IpOrIps []*string `json:"ipOrIps,omitempty" xml:"ipOrIps,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions) SetIpOrIps(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsIpOrIpsConditions {
	s.IpOrIps = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Path.","zh_CN":"路径。"}
	GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths []*string `json:"paths,omitempty" xml:"paths,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions) SetGetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsPathConditions {
	s.GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainPaths = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"URI.","zh_CN":"URI。"}
	Uri []*string `json:"uri,omitempty" xml:"uri,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions) SetUri(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUriConditions {
	s.Uri = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"User agent.","zh_CN":"User-Agent。"}
	Ua []*string `json:"ua,omitempty" xml:"ua,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions) SetUa(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsUaConditions {
	s.Ua = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Referer.","zh_CN":"Referer。"}
	Referer []*string `json:"referer,omitempty" xml:"referer,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions) SetReferer(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsRefererConditions {
	s.Referer = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions struct {
	// {"en":"Match type.\nEQUAL: Equals\nNOT_EQUAL: Does not equal\nCONTAIN: Contains\nNOT_CONTAIN: Does not Contains\nREGEX: Regex match\nNOT_REGEX: regular does not match\nSTART_WITH: starts with\nEND_WITH: ends with\nWILDCARD: wildcard matches\nNOT_WILDCARD: wildcard does not match","zh_CN":"匹配类型。\nEQUAL：等于\nNOT_EQUAL：不等于\nCONTAIN：包含\nNOT_CONTAIN：不包含\nREGEX：匹配正则\nNOT_REGEX：正则不匹配\nSTART_WITH：开头是\nEND_WITH：结尾是\nWILDCARD：通配符匹配\nNOT_WILDCARD：通配符不匹配","exampleValue":"EQUAL,NOT_EQUAL,CONTAIN,NOT_CONTAIN,REGEX,NOT_REGEX,START_WITH,END_WITH,WILDCARD,NOT_WILDCARD"}
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty" require:"true"`
	// {"en":"Request header key.","zh_CN":"头部名称。"}
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// {"en":"List of request header values.","zh_CN":"头部值列表。"}
	ValueList []*string `json:"valueList,omitempty" xml:"valueList,omitempty" require:"true" type:"Repeated"`
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) GoString() string {
	return s.String()
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) SetMatchType(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions {
	s.MatchType = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) SetKey(v string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions {
	s.Key = &v
	return s
}

func (s *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions) SetValueList(v []*string) *GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseDataConditionsHeaderConditions {
	s.ValueList = v
	return s
}

type GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader struct {
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetWhiteRulesForTheSharedConfigurationAsociatedWithDomainResponseHeader) GoString() string {
	return s.String()
}

type DeployCaptchaVerificationRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"CAPTCHA verification.", "zh_CN":"验证码校验。"}
	Edgebot_captcha_challenge *DeployCaptchaVerificationCaptcha `json:"edgebot_captcha_challenge,omitempty" xml:"edgebot_captcha_challenge,omitempty" require:"true"`
}

func (s DeployCaptchaVerificationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationRequest) GoString() string {
	return s.String()
}

func (s *DeployCaptchaVerificationRequest) SetDomain(v string) *DeployCaptchaVerificationRequest {
	s.Domain = &v
	return s
}

func (s *DeployCaptchaVerificationRequest) SetEdgebot_captcha_challenge(v *DeployCaptchaVerificationCaptcha) *DeployCaptchaVerificationRequest {
	s.Edgebot_captcha_challenge = v
	return s
}

type DeployCaptchaVerificationCaptcha struct {
	// {"en":"Switch for CAPTCHA verification.
	//  0:OFF
	//  1:ON", "zh_CN":"验证码校验开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Verification code refresh frequency. Unit: s", "zh_CN":"验证码刷新频率。单位：秒"}
	Captcha_expire_time *int `json:"captcha_expire_time,omitempty" xml:"captcha_expire_time,omitempty" require:"true"`
	// {"en":"Verification object.
	//  0:IP
	//  1:IP&UA
	//  2:User fingerprint", "zh_CN":"校验对象。
	//  0：IP
	//  1：IP&UA
	//  2：用户指纹"}
	Protection_type *int `json:"protection_type,omitempty" xml:"protection_type,omitempty" require:"true"`
	// {"en":"Abnormal handling cycle.Unit: s", "zh_CN":"异常处置周期。单位：秒"}
	Statistical_period *int `json:"statistical_period,omitempty" xml:"statistical_period,omitempty" require:"true"`
	// {"en":"Number of validation failures.", "zh_CN":"验证失败次数。"}
	Trigger_threshold *int `json:"trigger_threshold,omitempty" xml:"trigger_threshold,omitempty" require:"true"`
	// {"en":"Interception duration. Unit: s", "zh_CN":"拦截时长。单位：秒"}
	Intercept_time *int `json:"intercept_time,omitempty" xml:"intercept_time,omitempty" require:"true"`
	// {"en":"Verification frequency.Unit: s", "zh_CN":"验证频率。单位：秒"}
	Accept_time *int `json:"accept_time,omitempty" xml:"accept_time,omitempty" require:"true"`
	// {"en":"Verification path.", "zh_CN":"校验路径。"}
	Ca_rows []*DeployCaptchaVerificationCaRows `json:"ca_rows,omitempty" xml:"ca_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployCaptchaVerificationCaptcha) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationCaptcha) GoString() string {
	return s.String()
}

func (s *DeployCaptchaVerificationCaptcha) SetEnable(v int) *DeployCaptchaVerificationCaptcha {
	s.Enable = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetCaptcha_expire_time(v int) *DeployCaptchaVerificationCaptcha {
	s.Captcha_expire_time = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetProtection_type(v int) *DeployCaptchaVerificationCaptcha {
	s.Protection_type = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetStatistical_period(v int) *DeployCaptchaVerificationCaptcha {
	s.Statistical_period = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetTrigger_threshold(v int) *DeployCaptchaVerificationCaptcha {
	s.Trigger_threshold = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetIntercept_time(v int) *DeployCaptchaVerificationCaptcha {
	s.Intercept_time = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetAccept_time(v int) *DeployCaptchaVerificationCaptcha {
	s.Accept_time = &v
	return s
}

func (s *DeployCaptchaVerificationCaptcha) SetCa_rows(v []*DeployCaptchaVerificationCaRows) *DeployCaptchaVerificationCaptcha {
	s.Ca_rows = v
	return s
}

type DeployCaptchaVerificationCaRows struct {
	// {"en":"Verification URL.", "zh_CN":"校验路径。"}
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// {"en":"Request method. Only GET is supported.
	//  3:GET", "zh_CN":"请求方法。仅支持GET。
	//  3：GET"}
	Scope *int `json:"scope,omitempty" xml:"scope,omitempty"`
}

func (s DeployCaptchaVerificationCaRows) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationCaRows) GoString() string {
	return s.String()
}

func (s *DeployCaptchaVerificationCaRows) SetUrl(v string) *DeployCaptchaVerificationCaRows {
	s.Url = &v
	return s
}

func (s *DeployCaptchaVerificationCaRows) SetScope(v int) *DeployCaptchaVerificationCaRows {
	s.Scope = &v
	return s
}

type DeployCaptchaVerificationResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned", "zh_CN":"返回数据"}
	Data *DeployCaptchaVerificationResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployCaptchaVerificationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationResponse) GoString() string {
	return s.String()
}

func (s *DeployCaptchaVerificationResponse) SetCode(v string) *DeployCaptchaVerificationResponse {
	s.Code = &v
	return s
}

func (s *DeployCaptchaVerificationResponse) SetMessage(v string) *DeployCaptchaVerificationResponse {
	s.Message = &v
	return s
}

func (s *DeployCaptchaVerificationResponse) SetData(v *DeployCaptchaVerificationResult) *DeployCaptchaVerificationResponse {
	s.Data = v
	return s
}

type DeployCaptchaVerificationResult struct {
	// {"en":"Deployment Version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployCaptchaVerificationResult) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationResult) GoString() string {
	return s.String()
}

func (s *DeployCaptchaVerificationResult) SetDeployVersion(v string) *DeployCaptchaVerificationResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployCaptchaVerificationResult) SetEstimatetime(v string) *DeployCaptchaVerificationResult {
	s.Estimatetime = &v
	return s
}

type DeployCaptchaVerificationPaths struct {
}

func (s DeployCaptchaVerificationPaths) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationPaths) GoString() string {
	return s.String()
}

type DeployCaptchaVerificationParameters struct {
}

func (s DeployCaptchaVerificationParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationParameters) GoString() string {
	return s.String()
}

type DeployCaptchaVerificationRequestHeader struct {
}

func (s DeployCaptchaVerificationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationRequestHeader) GoString() string {
	return s.String()
}

type DeployCaptchaVerificationResponseHeader struct {
}

func (s DeployCaptchaVerificationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployCaptchaVerificationResponseHeader) GoString() string {
	return s.String()
}

type GetApiAssetDetailRequest struct {
	// {"en":"Domain.","zh_CN":"域名。"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Endpoint path.","zh_CN":"前端路径。"}
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// {"en":"First discovery time, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"首次发现时间，格式：yyyy-MM-dd HH:mm:ss。"}
	DiscoveryTime *string `json:"discoveryTime,omitempty" xml:"discoveryTime,omitempty" require:"true"`
}

func (s GetApiAssetDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailRequest) GoString() string {
	return s.String()
}

func (s *GetApiAssetDetailRequest) SetDomain(v string) *GetApiAssetDetailRequest {
	s.Domain = &v
	return s
}

func (s *GetApiAssetDetailRequest) SetPath(v string) *GetApiAssetDetailRequest {
	s.Path = &v
	return s
}

func (s *GetApiAssetDetailRequest) SetDiscoveryTime(v string) *GetApiAssetDetailRequest {
	s.DiscoveryTime = &v
	return s
}

type GetApiAssetDetailRequestHeader struct {
}

func (s GetApiAssetDetailRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailRequestHeader) GoString() string {
	return s.String()
}

type GetApiAssetDetailPaths struct {
}

func (s GetApiAssetDetailPaths) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailPaths) GoString() string {
	return s.String()
}

type GetApiAssetDetailParameters struct {
}

func (s GetApiAssetDetailParameters) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailParameters) GoString() string {
	return s.String()
}

type GetApiAssetDetailResponse struct {
	// {"en":"Return 200 means success.","zh_CN":"200状态码表示请求成功。"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Message.","zh_CN":"返回信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"Data.","zh_CN":"数据。"}
	Data *GetApiAssetDetailResponseData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Struct"`
}

func (s GetApiAssetDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponse) GoString() string {
	return s.String()
}

func (s *GetApiAssetDetailResponse) SetCode(v int) *GetApiAssetDetailResponse {
	s.Code = &v
	return s
}

func (s *GetApiAssetDetailResponse) SetMsg(v string) *GetApiAssetDetailResponse {
	s.Msg = &v
	return s
}

func (s *GetApiAssetDetailResponse) SetData(v *GetApiAssetDetailResponseData) *GetApiAssetDetailResponse {
	s.Data = v
	return s
}

type GetApiAssetDetailResponseData struct {
	// {"en":"Map[request method, the number of requests].","zh_CN":"Map<请求方法, 请求量>。"}
	ReqMethodCnt *GetApiAssetDetailResponseDataReqMethodCnt `json:"reqMethodCnt,omitempty" xml:"reqMethodCnt,omitempty" require:"true" type:"Struct"`
	// {"en":"Map[status code, the number of requests].","zh_CN":"Map<状态码，请求量>。"}
	StatusCodeCnt *GetApiAssetDetailResponseDataStatusCodeCnt `json:"statusCodeCnt,omitempty" xml:"statusCodeCnt,omitempty" require:"true" type:"Struct"`
	// {"en":"Request trend in the last 30 days.","zh_CN":"近30天调用趋势。"}
	ReqCntTrend []*GetApiAssetDetailResponseDataReqCntTrend `json:"reqCntTrend,omitempty" xml:"reqCntTrend,omitempty" require:"true" type:"Repeated"`
}

func (s GetApiAssetDetailResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponseData) GoString() string {
	return s.String()
}

func (s *GetApiAssetDetailResponseData) SetReqMethodCnt(v *GetApiAssetDetailResponseDataReqMethodCnt) *GetApiAssetDetailResponseData {
	s.ReqMethodCnt = v
	return s
}

func (s *GetApiAssetDetailResponseData) SetStatusCodeCnt(v *GetApiAssetDetailResponseDataStatusCodeCnt) *GetApiAssetDetailResponseData {
	s.StatusCodeCnt = v
	return s
}

func (s *GetApiAssetDetailResponseData) SetReqCntTrend(v []*GetApiAssetDetailResponseDataReqCntTrend) *GetApiAssetDetailResponseData {
	s.ReqCntTrend = v
	return s
}

type GetApiAssetDetailResponseDataReqMethodCnt struct {
}

func (s GetApiAssetDetailResponseDataReqMethodCnt) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponseDataReqMethodCnt) GoString() string {
	return s.String()
}

type GetApiAssetDetailResponseDataStatusCodeCnt struct {
}

func (s GetApiAssetDetailResponseDataStatusCodeCnt) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponseDataStatusCodeCnt) GoString() string {
	return s.String()
}

type GetApiAssetDetailResponseDataReqCntTrend struct {
	// {"en":"The time point of request trend, format: yyyy-MM-dd HH:mm:ss.","zh_CN":"请求趋势时间点，格式：yyyy-MM-dd HH:mm:ss。"}
	Time *string `json:"time,omitempty" xml:"time,omitempty" require:"true"`
	// {"en":"The number of requests.","zh_CN":"请求量。"}
	ReqCnt *int64 `json:"reqCnt,omitempty" xml:"reqCnt,omitempty" require:"true"`
}

func (s GetApiAssetDetailResponseDataReqCntTrend) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponseDataReqCntTrend) GoString() string {
	return s.String()
}

func (s *GetApiAssetDetailResponseDataReqCntTrend) SetTime(v string) *GetApiAssetDetailResponseDataReqCntTrend {
	s.Time = &v
	return s
}

func (s *GetApiAssetDetailResponseDataReqCntTrend) SetReqCnt(v int64) *GetApiAssetDetailResponseDataReqCntTrend {
	s.ReqCnt = &v
	return s
}

type GetApiAssetDetailResponseHeader struct {
}

func (s GetApiAssetDetailResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s GetApiAssetDetailResponseHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceQueryRequest struct {
	// {"en":"access protocol,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS", "zh_CN":"访问协议,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS"}
	AccessProtocol *int `json:"accessProtocol,omitempty" xml:"accessProtocol,omitempty"`
	// {"en":"access port(Multiple with; separate)", "zh_CN":"访问端口 (多个以;隔开)"}
	AccessPort *string `json:"accessPort,omitempty" xml:"accessPort,omitempty"`
}

func (s WssMPNetworkServiceQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryRequest) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceQueryRequest) SetAccessProtocol(v int) *WssMPNetworkServiceQueryRequest {
	s.AccessProtocol = &v
	return s
}

func (s *WssMPNetworkServiceQueryRequest) SetAccessPort(v string) *WssMPNetworkServiceQueryRequest {
	s.AccessPort = &v
	return s
}

type WssMPNetworkServiceQueryResponse struct {
	// {"en":"200:success other code means failed", "zh_CN":"200:成功，其他失败"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"SUCCESS or error message", "zh_CN":"成功=SUCCESS，其他返回错误信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"access protocol,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS", "zh_CN":"协议,0:ALL;1:TCP;2:UDP;3:HTTP;4:HTTPS"}
	AccessProtocol *string `json:"accessProtocol,omitempty" xml:"accessProtocol,omitempty" require:"true"`
	// {"en":"access port", "zh_CN":"访问端口"}
	AccessPort *string `json:"accessPort,omitempty" xml:"accessPort,omitempty" require:"true"`
	// {"en":"source IP/source domain", "zh_CN":"源站IP/源站域名"}
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// {"en":"source port", "zh_CN":"源站端口"}
	SourcePort *string `json:"sourcePort,omitempty" xml:"sourcePort,omitempty" require:"true"`
	// {"en":"Multi-source load balancing，1:Polling;2:Fast;3:Hash", "zh_CN":"多源负载均衡,1:轮询；2:快速；3:哈希"}
	LoadBalance *string `json:"loadBalance,omitempty" xml:"loadBalance,omitempty" require:"true"`
	// {"en":"cname", "zh_CN":"cname"}
	Cname *string `json:"cname,omitempty" xml:"cname,omitempty" require:"true"`
	// {"en":"0 return to source, 1 normal", "zh_CN":"0 回源，1正常"}
	ProtectionStatus *string `json:"protectionStatus,omitempty" xml:"protectionStatus,omitempty" require:"true"`
	// {"en":"1 Deployment succeeded, 2 deployment in progress, 4 deployment failed", "zh_CN":"1 部署成功，2 正在部署中,4 部署失败"}
	DeployStatus *string `json:"deployStatus,omitempty" xml:"deployStatus,omitempty" require:"true"`
	// {"en":"1 Add, 2 Update, 3 Delete", "zh_CN":"1 新增，2 修改，3 删除"}
	OperatorStatus *string `json:"operatorStatus,omitempty" xml:"operatorStatus,omitempty" require:"true"`
}

func (s WssMPNetworkServiceQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryResponse) GoString() string {
	return s.String()
}

func (s *WssMPNetworkServiceQueryResponse) SetCode(v string) *WssMPNetworkServiceQueryResponse {
	s.Code = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetMsg(v string) *WssMPNetworkServiceQueryResponse {
	s.Msg = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetAccessProtocol(v string) *WssMPNetworkServiceQueryResponse {
	s.AccessProtocol = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetAccessPort(v string) *WssMPNetworkServiceQueryResponse {
	s.AccessPort = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetSource(v string) *WssMPNetworkServiceQueryResponse {
	s.Source = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetSourcePort(v string) *WssMPNetworkServiceQueryResponse {
	s.SourcePort = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetLoadBalance(v string) *WssMPNetworkServiceQueryResponse {
	s.LoadBalance = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetCname(v string) *WssMPNetworkServiceQueryResponse {
	s.Cname = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetProtectionStatus(v string) *WssMPNetworkServiceQueryResponse {
	s.ProtectionStatus = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetDeployStatus(v string) *WssMPNetworkServiceQueryResponse {
	s.DeployStatus = &v
	return s
}

func (s *WssMPNetworkServiceQueryResponse) SetOperatorStatus(v string) *WssMPNetworkServiceQueryResponse {
	s.OperatorStatus = &v
	return s
}

type WssMPNetworkServiceQueryPaths struct {
}

func (s WssMPNetworkServiceQueryPaths) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryPaths) GoString() string {
	return s.String()
}

type WssMPNetworkServiceQueryParameters struct {
}

func (s WssMPNetworkServiceQueryParameters) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryParameters) GoString() string {
	return s.String()
}

type WssMPNetworkServiceQueryRequestHeader struct {
}

func (s WssMPNetworkServiceQueryRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryRequestHeader) GoString() string {
	return s.String()
}

type WssMPNetworkServiceQueryResponseHeader struct {
}

func (s WssMPNetworkServiceQueryResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s WssMPNetworkServiceQueryResponseHeader) GoString() string {
	return s.String()
}

type UpdateActionForWAFManagedRulesRequest struct {
	// {"en":"Domain list.","zh_CN":"域名列表。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
	// {"en":"Rule list.","zh_CN":"规则列表。"}
	RuleList []*UpdateActionForWAFManagedRulesRequestRuleList `json:"ruleList,omitempty" xml:"ruleList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateActionForWAFManagedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesRequest) GoString() string {
	return s.String()
}

func (s *UpdateActionForWAFManagedRulesRequest) SetDomainList(v []*string) *UpdateActionForWAFManagedRulesRequest {
	s.DomainList = v
	return s
}

func (s *UpdateActionForWAFManagedRulesRequest) SetRuleList(v []*UpdateActionForWAFManagedRulesRequestRuleList) *UpdateActionForWAFManagedRulesRequest {
	s.RuleList = v
	return s
}

type UpdateActionForWAFManagedRulesRequestRuleList struct {
	// {"en":"WAF rule ID.","zh_CN":"WAF规则ID。"}
	RuleId *int `json:"ruleId,omitempty" xml:"ruleId,omitempty" require:"true"`
	// {"en":"Rule actions.\nBLOCK: Deny request by a default 403 response.\nLOG: Log request and continue further detections.\nOFF: Select if you do not a policy take effect.","zh_CN":"规则动作。\nBLOCK：阻断请求并响应403。\nLOG：记录请求的攻击行为，并继续做进一步的评估。\nOFF：对应规则或策略不生效。","exampleValue":"BLOCK,LOG,OFF"}
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty" require:"true"`
}

func (s UpdateActionForWAFManagedRulesRequestRuleList) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesRequestRuleList) GoString() string {
	return s.String()
}

func (s *UpdateActionForWAFManagedRulesRequestRuleList) SetRuleId(v int) *UpdateActionForWAFManagedRulesRequestRuleList {
	s.RuleId = &v
	return s
}

func (s *UpdateActionForWAFManagedRulesRequestRuleList) SetMode(v string) *UpdateActionForWAFManagedRulesRequestRuleList {
	s.Mode = &v
	return s
}

type UpdateActionForWAFManagedRulesRequestHeader struct {
	// {"en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s UpdateActionForWAFManagedRulesRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesRequestHeader) GoString() string {
	return s.String()
}

func (s *UpdateActionForWAFManagedRulesRequestHeader) SetServiceType(v string) *UpdateActionForWAFManagedRulesRequestHeader {
	s.ServiceType = &v
	return s
}

type UpdateActionForWAFManagedRulesPaths struct {
}

func (s UpdateActionForWAFManagedRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesPaths) GoString() string {
	return s.String()
}

type UpdateActionForWAFManagedRulesParameters struct {
}

func (s UpdateActionForWAFManagedRulesParameters) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesParameters) GoString() string {
	return s.String()
}

type UpdateActionForWAFManagedRulesResponse struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_retCodeEnum","en":"Please refer to the error code for exceptions.","zh_CN":"请参照错误码。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Description.","zh_CN":"描述信息。"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
}

func (s UpdateActionForWAFManagedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesResponse) GoString() string {
	return s.String()
}

func (s *UpdateActionForWAFManagedRulesResponse) SetCode(v string) *UpdateActionForWAFManagedRulesResponse {
	s.Code = &v
	return s
}

func (s *UpdateActionForWAFManagedRulesResponse) SetMsg(v string) *UpdateActionForWAFManagedRulesResponse {
	s.Msg = &v
	return s
}

type UpdateActionForWAFManagedRulesResponseHeader struct {
}

func (s UpdateActionForWAFManagedRulesResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s UpdateActionForWAFManagedRulesResponseHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForBuiltInRuleRequest struct {
	// {"en":"Template name.", "zh_CN":"模板名称。"}
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// {"en":"Correlation domain name, array.", "zh_CN":"关联域名，数组。"}
	DomainList []*string `json:"domainList,omitempty" xml:"domainList,omitempty" require:"true" type:"Repeated"`
}

func (s AssociateDomainsForBuiltInRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRuleRequest) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForBuiltInRuleRequest) SetName(v string) *AssociateDomainsForBuiltInRuleRequest {
	s.Name = &v
	return s
}

func (s *AssociateDomainsForBuiltInRuleRequest) SetDomainList(v []*string) *AssociateDomainsForBuiltInRuleRequest {
	s.DomainList = v
	return s
}

type AssociateDomainsForBuiltInRuleResponse struct {
	// {"en":"Return 0 means success, please see <Error code> to check other status code.", "zh_CN":"0状态码表示请求成功，其他状态码说明请参见《错误码》。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"error message or Success.", "zh_CN":"错误信息或Success。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
}

func (s AssociateDomainsForBuiltInRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRuleResponse) GoString() string {
	return s.String()
}

func (s *AssociateDomainsForBuiltInRuleResponse) SetCode(v string) *AssociateDomainsForBuiltInRuleResponse {
	s.Code = &v
	return s
}

func (s *AssociateDomainsForBuiltInRuleResponse) SetMessage(v string) *AssociateDomainsForBuiltInRuleResponse {
	s.Message = &v
	return s
}

type AssociateDomainsForBuiltInRulePaths struct {
}

func (s AssociateDomainsForBuiltInRulePaths) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRulePaths) GoString() string {
	return s.String()
}

type AssociateDomainsForBuiltInRuleParameters struct {
}

func (s AssociateDomainsForBuiltInRuleParameters) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRuleParameters) GoString() string {
	return s.String()
}

type AssociateDomainsForBuiltInRuleRequestHeader struct {
}

func (s AssociateDomainsForBuiltInRuleRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRuleRequestHeader) GoString() string {
	return s.String()
}

type AssociateDomainsForBuiltInRuleResponseHeader struct {
}

func (s AssociateDomainsForBuiltInRuleResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s AssociateDomainsForBuiltInRuleResponseHeader) GoString() string {
	return s.String()
}

type QueryDomainDDoSBaseInfoRequest struct {
	// {"en":"domains","zh_CN":"域名列表"}
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
}

func (s QueryDomainDDoSBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryDomainDDoSBaseInfoRequest) SetDomains(v []*string) *QueryDomainDDoSBaseInfoRequest {
	s.Domains = v
	return s
}

type QueryDomainDDoSBaseInfoRequestHeader struct {
	// {"dictionary":"belong=WAAP-MS-Ext|dict=waap_serviceType","en":"Security service type. Please enter a specific service type, if you purchase multiple security services.","zh_CN":"安全服务类型。有使用多个不同的安全服务时，需要填写具体的服务类型。"}
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
}

func (s QueryDomainDDoSBaseInfoRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoRequestHeader) GoString() string {
	return s.String()
}

func (s *QueryDomainDDoSBaseInfoRequestHeader) SetServiceType(v string) *QueryDomainDDoSBaseInfoRequestHeader {
	s.ServiceType = &v
	return s
}

type QueryDomainDDoSBaseInfoPaths struct {
}

func (s QueryDomainDDoSBaseInfoPaths) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoPaths) GoString() string {
	return s.String()
}

type QueryDomainDDoSBaseInfoParameters struct {
}

func (s QueryDomainDDoSBaseInfoParameters) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoParameters) GoString() string {
	return s.String()
}

type QueryDomainDDoSBaseInfoResponse struct {
	// {"en":"code","zh_CN":"状态码"}
	Code *int `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"msg","zh_CN":"描述信息"}
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty" require:"true"`
	// {"en":"list","zh_CN":"数组"}
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
	// {"en":"domain","zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"l7DDoSSwitch","zh_CN":"应用层DDoS防护开关，开启：'ON'，关闭：'OFF'","exampleValue":"ON,OFF"}
	L7DDoSSwitch *string `json:"l7DDoSSwitch,omitempty" xml:"l7DDoSSwitch,omitempty" require:"true"`
	// {"en":"innerSwitch","zh_CN":"内置规则防护开关，开启：'ON'，关闭：'OFF'","exampleValue":"ON,OFF"}
	InnerSwitch *string `json:"innerSwitch,omitempty" xml:"innerSwitch,omitempty" require:"true"`
	// {"en":"aiSwitch","zh_CN":"是否启用AI智能防护, 开启：'ON'，关闭：'OFF'","exampleValue":"ON,OFF"}
	AiSwitch *string `json:"aiSwitch,omitempty" xml:"aiSwitch,omitempty" require:"true"`
	// {"en":"loose: 'LOOSE',   moderate:'MODERATE', strict:'STRICT'","zh_CN":"宽松: 'LOOSE',   适中:'MODERATE', 严格:'STRICT'","exampleValue":"LOOSE,MODERATE,STRICT"}
	ProtectMode *string `json:"protectMode,omitempty" xml:"protectMode,omitempty" require:"true"`
	// {"en":"aiAction","zh_CN":"ai规则动作，拦截:'DENY'，监控:'LOG'，DDoS托管:'RR'","exampleValue":"DENY,LOG,RR"}
	AiAction *string `json:"aiAction,omitempty" xml:"aiAction,omitempty" require:"true"`
}

func (s QueryDomainDDoSBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryDomainDDoSBaseInfoResponse) SetCode(v int) *QueryDomainDDoSBaseInfoResponse {
	s.Code = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetMsg(v string) *QueryDomainDDoSBaseInfoResponse {
	s.Msg = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetData(v []*string) *QueryDomainDDoSBaseInfoResponse {
	s.Data = v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetDomain(v string) *QueryDomainDDoSBaseInfoResponse {
	s.Domain = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetL7DDoSSwitch(v string) *QueryDomainDDoSBaseInfoResponse {
	s.L7DDoSSwitch = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetInnerSwitch(v string) *QueryDomainDDoSBaseInfoResponse {
	s.InnerSwitch = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetAiSwitch(v string) *QueryDomainDDoSBaseInfoResponse {
	s.AiSwitch = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetProtectMode(v string) *QueryDomainDDoSBaseInfoResponse {
	s.ProtectMode = &v
	return s
}

func (s *QueryDomainDDoSBaseInfoResponse) SetAiAction(v string) *QueryDomainDDoSBaseInfoResponse {
	s.AiAction = &v
	return s
}

type QueryDomainDDoSBaseInfoResponseHeader struct {
}

func (s QueryDomainDDoSBaseInfoResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainDDoSBaseInfoResponseHeader) GoString() string {
	return s.String()
}

type DeployBotFeatureVerificationRequest struct {
	// {"en":"domain", "zh_CN":"域名"}
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// {"en":"Basic configuration.", "zh_CN":"基础配置。"}
	Edgebot_pt_scope *DeployBotFeatureVerificationPt `json:"edgebot_pt_scope,omitempty" xml:"edgebot_pt_scope,omitempty" require:"true"`
	// {"en":"DeployBotFeatureVerificationCookie Feature Verification.", "zh_CN":"Cookie特性检测。"}
	Edgebot_cookie_challenge *DeployBotFeatureVerificationCookie `json:"edgebot_cookie_challenge,omitempty" xml:"edgebot_cookie_challenge,omitempty" require:"true"`
	// {"en":"DeployBotFeatureVerificationHuman Interaction Verification.", "zh_CN":"机器识别。"}
	Edgebot_human_challenge *DeployBotFeatureVerificationHuman `json:"edgebot_human_challenge,omitempty" xml:"edgebot_human_challenge,omitempty" require:"true"`
	// {"en":"JavaScript Feature Verification.", "zh_CN":"JavaScript特性检测。"}
	Edgebot_js_challenge *DeployBotFeatureVerificationJS `json:"edgebot_js_challenge,omitempty" xml:"edgebot_js_challenge,omitempty" require:"true"`
}

func (s DeployBotFeatureVerificationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationRequest) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationRequest) SetDomain(v string) *DeployBotFeatureVerificationRequest {
	s.Domain = &v
	return s
}

func (s *DeployBotFeatureVerificationRequest) SetEdgebot_pt_scope(v *DeployBotFeatureVerificationPt) *DeployBotFeatureVerificationRequest {
	s.Edgebot_pt_scope = v
	return s
}

func (s *DeployBotFeatureVerificationRequest) SetEdgebot_cookie_challenge(v *DeployBotFeatureVerificationCookie) *DeployBotFeatureVerificationRequest {
	s.Edgebot_cookie_challenge = v
	return s
}

func (s *DeployBotFeatureVerificationRequest) SetEdgebot_human_challenge(v *DeployBotFeatureVerificationHuman) *DeployBotFeatureVerificationRequest {
	s.Edgebot_human_challenge = v
	return s
}

func (s *DeployBotFeatureVerificationRequest) SetEdgebot_js_challenge(v *DeployBotFeatureVerificationJS) *DeployBotFeatureVerificationRequest {
	s.Edgebot_js_challenge = v
	return s
}

type DeployBotFeatureVerificationCookie struct {
	// {"en":"Switch for DeployBotFeatureVerificationCookie Feature Verification.
	//  0:OFF
	//  1:On", "zh_CN":"Cookie特性检测开关。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Period *int `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// {"en":"The number of requests that failed validation.", "zh_CN":"验证失败的请求数。"}
	Failed_num *int `json:"failed_num,omitempty" xml:"failed_num,omitempty" require:"true"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"First validation. If act=1, it is required.
	//  0:OFF
	//  1:ON", "zh_CN":"首次验证。若 act=1则必填。
	//  1：开
	//  0：关"}
	First_switch *int `json:"first_switch,omitempty" xml:"first_switch,omitempty"`
	// {"en":"Duration. Unit: s", "zh_CN":"持续时间。单位：秒"}
	Block_tm *int `json:"block_tm,omitempty" xml:"block_tm,omitempty" require:"true"`
	// {"en":"White url.", "zh_CN":"例外路径。"}
	White_url []*DeployBotFeatureVerificationWhileUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
}

func (s DeployBotFeatureVerificationCookie) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationCookie) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationCookie) SetEnable(v int) *DeployBotFeatureVerificationCookie {
	s.Enable = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetPeriod(v int) *DeployBotFeatureVerificationCookie {
	s.Period = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetFailed_num(v int) *DeployBotFeatureVerificationCookie {
	s.Failed_num = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetAct(v int) *DeployBotFeatureVerificationCookie {
	s.Act = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetFirst_switch(v int) *DeployBotFeatureVerificationCookie {
	s.First_switch = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetBlock_tm(v int) *DeployBotFeatureVerificationCookie {
	s.Block_tm = &v
	return s
}

func (s *DeployBotFeatureVerificationCookie) SetWhite_url(v []*DeployBotFeatureVerificationWhileUrl) *DeployBotFeatureVerificationCookie {
	s.White_url = v
	return s
}

type DeployBotFeatureVerificationPt struct {
	// {"en":"Switch for basic configuration. If the basic function is turned off,all functions of Bot Feature Verification will be turned off at the same time.
	//  0:OFF
	//  1:ON", "zh_CN":"基础配置开关，基础功能关闭，将同时关闭Bot特性检测的所有功能。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"User fingerprint validity period. Unit: s", "zh_CN":"用户指纹有效期。单位：秒"}
	Duration_time *int `json:"duration_time,omitempty" xml:"duration_time,omitempty" require:"true"`
	// {"en":"Protection path.", "zh_CN":"防护路径。"}
	Pt_rows []*DeployBotFeatureVerificationPtRows `json:"pt_rows,omitempty" xml:"pt_rows,omitempty" require:"true" type:"Repeated"`
}

func (s DeployBotFeatureVerificationPt) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationPt) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationPt) SetEnable(v int) *DeployBotFeatureVerificationPt {
	s.Enable = &v
	return s
}

func (s *DeployBotFeatureVerificationPt) SetDuration_time(v int) *DeployBotFeatureVerificationPt {
	s.Duration_time = &v
	return s
}

func (s *DeployBotFeatureVerificationPt) SetPt_rows(v []*DeployBotFeatureVerificationPtRows) *DeployBotFeatureVerificationPt {
	s.Pt_rows = v
	return s
}

type DeployBotFeatureVerificationJS struct {
	// {"en":"Switch for JavaScript Feature Verification.
	//  0:OFF
	//  1:ON", "zh_CN":"JavaScript特性检测开关。
	//  0：关闭
	//  1：启用"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Validation mode.
	//  1:Time verification mode
	//  2:Count verification mode", "zh_CN":"验证模式。
	//  1：有效期验证
	//  2：计数验证"}
	Auth_mode *int `json:"auth_mode,omitempty" xml:"auth_mode,omitempty" require:"true"`
	// {"en":"Count static files.If auth_mode=2, it is required.
	//  0:OFF
	//  1:ON ", "zh_CN":"静态文件计数，若auth_mode=2，则必填。
	//  0：关
	//  1：开"}
	Static_count *int `json:"static_count,omitempty" xml:"static_count,omitempty"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Cookie_buffer *string `json:"cookie_buffer,omitempty" xml:"cookie_buffer,omitempty" require:"true"`
	// {"en":"The number of failed validation requests.", "zh_CN":"验证失败请求数。"}
	Threshold *int `json:"threshold,omitempty" xml:"threshold,omitempty"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit: s", "zh_CN":"处理动作持续时间。单位：秒"}
	Cookie_expiration *int `json:"cookie_expiration,omitempty" xml:"cookie_expiration,omitempty" require:"true"`
	// {"en":"White url.", "zh_CN":"例外路径"}
	White_url []*DeployBotFeatureVerificationWhileUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
}

func (s DeployBotFeatureVerificationJS) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationJS) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationJS) SetEnable(v int) *DeployBotFeatureVerificationJS {
	s.Enable = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetAuth_mode(v int) *DeployBotFeatureVerificationJS {
	s.Auth_mode = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetStatic_count(v int) *DeployBotFeatureVerificationJS {
	s.Static_count = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetCookie_buffer(v string) *DeployBotFeatureVerificationJS {
	s.Cookie_buffer = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetThreshold(v int) *DeployBotFeatureVerificationJS {
	s.Threshold = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetAct(v int) *DeployBotFeatureVerificationJS {
	s.Act = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetCookie_expiration(v int) *DeployBotFeatureVerificationJS {
	s.Cookie_expiration = &v
	return s
}

func (s *DeployBotFeatureVerificationJS) SetWhite_url(v []*DeployBotFeatureVerificationWhileUrl) *DeployBotFeatureVerificationJS {
	s.White_url = v
	return s
}

type DeployBotFeatureVerificationHuman struct {
	// {"en":"Switch for DeployBotFeatureVerificationHuman Interaction Verification.
	//   0:OFF
	//  1:ON", "zh_CN":"机器 检测开关。
	//  0：关
	//  1：开"}
	Enable *int `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// {"en":"Trigger condition - statistical period. Unit: s", "zh_CN":"触发条件-统计周期。单位：秒"}
	Cookie_buffer *int `json:"cookie_buffer,omitempty" xml:"cookie_buffer,omitempty" require:"true"`
	// {"en":"Switch for suspected revalidation.
	//  0:OFF
	//  1:ON", "zh_CN":"疑似再验证。
	//  0：关
	//  1：开"}
	Suspect_status *int `json:"suspect_status,omitempty" xml:"suspect_status,omitempty" require:"true"`
	// {"en":"The validity period of the suspected revalidation. Unit: s", "zh_CN":"疑似再验证有效期。单位：秒"}
	Chance_time *int `json:"chance_time,omitempty" xml:"chance_time,omitempty" require:"true"`
	// {"en":"Switch for automated tools detection.
	//  0:OFF
	//  1:ON", "zh_CN":"自动框架检测。
	//  0：关
	//  1：开"}
	Auto_status *int `json:"auto_status,omitempty" xml:"auto_status,omitempty" require:"true"`
	// {"en":"Action.
	//  1:Block
	//  2:Log
	//  6:Flag
	//  7:Captcha", "zh_CN":"处理动作。
	//  1：拦截
	//  2：告警
	//  6：攻击标记
	//  7：验证码"}
	Act *int `json:"act,omitempty" xml:"act,omitempty" require:"true"`
	// {"en":"Processing action duration. Unit: s", "zh_CN":"处理动作持续时间。单位：秒"}
	Cookie_expiration *int `json:"cookie_expiration,omitempty" xml:"cookie_expiration,omitempty" require:"true"`
	// {"en":"White url。", "zh_CN":"例外路径。"}
	White_url []*DeployBotFeatureVerificationWhileUrl `json:"white_url,omitempty" xml:"white_url,omitempty" require:"true" type:"Repeated"`
}

func (s DeployBotFeatureVerificationHuman) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationHuman) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationHuman) SetEnable(v int) *DeployBotFeatureVerificationHuman {
	s.Enable = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetCookie_buffer(v int) *DeployBotFeatureVerificationHuman {
	s.Cookie_buffer = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetSuspect_status(v int) *DeployBotFeatureVerificationHuman {
	s.Suspect_status = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetChance_time(v int) *DeployBotFeatureVerificationHuman {
	s.Chance_time = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetAuto_status(v int) *DeployBotFeatureVerificationHuman {
	s.Auto_status = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetAct(v int) *DeployBotFeatureVerificationHuman {
	s.Act = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetCookie_expiration(v int) *DeployBotFeatureVerificationHuman {
	s.Cookie_expiration = &v
	return s
}

func (s *DeployBotFeatureVerificationHuman) SetWhite_url(v []*DeployBotFeatureVerificationWhileUrl) *DeployBotFeatureVerificationHuman {
	s.White_url = v
	return s
}

type DeployBotFeatureVerificationPtRows struct {
	// {"en":"Matching method.
	//   0:All Path
	//  1:File Suffix
	//  2:Directory
	//  3:Complete Match
	//  4:Regex Match", "zh_CN":"匹配方式。
	//  0：所有路径
	//  1：文件后缀
	//  2：目录
	//  3：完整匹配
	//  4：正则匹配"}
	Scope *int `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// {"en":"Request method.
	//  0:ALL
	//  1:GET
	//  2:POST
	//  3:GET/POST", "zh_CN":"请求方法。
	//   0：ALL
	//  1：GET
	//  2：POST
	//  3：GET/POST"}
	Method *int `json:"method,omitempty" xml:"method,omitempty" require:"true"`
	// {"en":"Path content. If scope=0, it is not required. Default is '.*'.", "zh_CN":"路径内容，如果scope=0则非必填。默认.*"}
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
}

func (s DeployBotFeatureVerificationPtRows) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationPtRows) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationPtRows) SetScope(v int) *DeployBotFeatureVerificationPtRows {
	s.Scope = &v
	return s
}

func (s *DeployBotFeatureVerificationPtRows) SetMethod(v int) *DeployBotFeatureVerificationPtRows {
	s.Method = &v
	return s
}

func (s *DeployBotFeatureVerificationPtRows) SetContent(v string) *DeployBotFeatureVerificationPtRows {
	s.Content = &v
	return s
}

type DeployBotFeatureVerificationWhileUrl struct {
	// {"en":"Regex match.
	//  0:OFF
	//  1:ON", "zh_CN":"正则匹配。
	//  0：关闭
	//  1：启用"}
	Regual *int `json:"regual,omitempty" xml:"regual,omitempty" require:"true"`
	// {"en":"URL Content.", "zh_CN":"URL内容。"}
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
}

func (s DeployBotFeatureVerificationWhileUrl) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationWhileUrl) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationWhileUrl) SetRegual(v int) *DeployBotFeatureVerificationWhileUrl {
	s.Regual = &v
	return s
}

func (s *DeployBotFeatureVerificationWhileUrl) SetUrl(v string) *DeployBotFeatureVerificationWhileUrl {
	s.Url = &v
	return s
}

type DeployBotFeatureVerificationResponse struct {
	// {"en":"Status code, success is '200'.", "zh_CN":"状态码，成功为“200”。"}
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// {"en":"Return message, success is 'Success'.", "zh_CN":"返回信息，成功为“Success”。"}
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// {"en":"Data returned.", "zh_CN":"返回数据。"}
	Data *DeployBotFeatureVerificationResult `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s DeployBotFeatureVerificationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationResponse) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationResponse) SetCode(v string) *DeployBotFeatureVerificationResponse {
	s.Code = &v
	return s
}

func (s *DeployBotFeatureVerificationResponse) SetMessage(v string) *DeployBotFeatureVerificationResponse {
	s.Message = &v
	return s
}

func (s *DeployBotFeatureVerificationResponse) SetData(v *DeployBotFeatureVerificationResult) *DeployBotFeatureVerificationResponse {
	s.Data = v
	return s
}

type DeployBotFeatureVerificationResult struct {
	// {"en":"Deployment Version", "zh_CN":"部署版本号"}
	DeployVersion *string `json:"deployVersion,omitempty" xml:"deployVersion,omitempty" require:"true"`
	// {"en":"Estimated time", "zh_CN":"预估时间"}
	Estimatetime *string `json:"estimatetime,omitempty" xml:"estimatetime,omitempty" require:"true"`
}

func (s DeployBotFeatureVerificationResult) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationResult) GoString() string {
	return s.String()
}

func (s *DeployBotFeatureVerificationResult) SetDeployVersion(v string) *DeployBotFeatureVerificationResult {
	s.DeployVersion = &v
	return s
}

func (s *DeployBotFeatureVerificationResult) SetEstimatetime(v string) *DeployBotFeatureVerificationResult {
	s.Estimatetime = &v
	return s
}

type DeployBotFeatureVerificationPaths struct {
}

func (s DeployBotFeatureVerificationPaths) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationPaths) GoString() string {
	return s.String()
}

type DeployBotFeatureVerificationParameters struct {
}

func (s DeployBotFeatureVerificationParameters) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationParameters) GoString() string {
	return s.String()
}

type DeployBotFeatureVerificationRequestHeader struct {
}

func (s DeployBotFeatureVerificationRequestHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationRequestHeader) GoString() string {
	return s.String()
}

type DeployBotFeatureVerificationResponseHeader struct {
}

func (s DeployBotFeatureVerificationResponseHeader) String() string {
	return tea.Prettify(s)
}

func (s DeployBotFeatureVerificationResponseHeader) GoString() string {
	return s.String()
}
